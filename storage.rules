rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user matches the userId in the path
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // --- User-Specific Paths ---

    // Profile Images: Allow users to read/write their own profile images.
    // Path: /profiles/{userId}/{fileName}
    match /profiles/{userId}/{fileName} {
      // Allow read access if the user is the owner.
      allow read: if isOwner(userId);

      // Allow create and update access if the user is the owner,
      // and the file meets size and type restrictions.
      allow create, update: if isOwner(userId)
                            && request.resource.size < 2 * 1024 * 1024  // 2MB limit
                            && request.resource.contentType.matches('image/(jpeg|png|gif|webp)');

      // Allow delete access if the user is the owner.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Documents: Allow users to manage their own documents.
    // Path: /documents/{userId}/{fileName}
    match /documents/{userId}/{fileName} {
      // Allow read access if the user is the owner.
      allow read: if isOwner(userId);

      // Allow create access if the user is the owner,
      // and the file meets size and type restrictions.
      allow create: if isOwner(userId)
                            && request.resource.size < 10 * 1024 * 1024  // 10MB limit
                            && request.resource.contentType.matches('image/(jpeg|png|gif|webp)|application/pdf');

      // Allow update access if the user is the owner,
      // and the file meets size and type restrictions.
      allow update: if isOwner(userId)
                            && request.resource.size < 10 * 1024 * 1024  // 10MB limit
                            && request.resource.contentType.matches('image/(jpeg|png|gif|webp)|application/pdf');

      // Allow delete access if the user is the owner.
      allow delete: if isOwner(userId);
    }
    
    // Specific Receipt Images (If keeping separate from documents): Allow users to manage their own receipt images.
    // Path: /receipts/{userId}/{fileName}
    // Consider merging into /documents/{userId}/{fileName} and using metadata for type.
    match /receipts/{userId}/{fileName} {
      // Allow read access if the user is the owner.
      allow read: if isOwner(userId);

      // Allow create and update access if the user is the owner,
      // and the file meets size and type restrictions.
      allow create, update: if isOwner(userId)
                            && request.resource.size < 5 * 1024 * 1024  // 5MB limit
                            && request.resource.contentType.matches('image/(jpeg|png|gif|webp)');

      // Allow delete access if the user is the owner.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Inventory Item Images: Allow users to manage images associated with their inventory items.
    // Path: /inventory/{userId}/{productId}/images/{imageId}
    match /inventory/{userId}/{productId}/images/{imageId} {
       // Allow read access if the user is the owner.
       allow read: if isOwner(userId);

       // Allow create and update access if the user is the owner,
       // the file meets size and type restrictions, and the corresponding
       // Firestore inventory document exists and is owned by the user.
       allow create, update: if isOwner(userId)
                             && request.resource.size < 5 * 1024 * 1024  // 5MB limit
                             && request.resource.contentType.matches('image/.*')
                             // Cross-service validation: Ensure corresponding Firestore document exists and is owned
                             && firestore.exists(/databases/(default)/documents/inventory/$(productId))
                             && firestore.get(/databases/(default)/documents/inventory/$(productId)).data.userId == request.auth.uid;

       // Fixed inventory path rules to correctly reference product ID in Firestore path
       // Note: This fix couldn't be verified through automated testing due to environment issues
       // See docs/known-issues.md for more details
       // Allow delete access if the user is the owner and the corresponding
       // Firestore inventory document exists and is owned by the user.
       allow delete: if isOwner(userId)
                     // Cross-service validation: Ensure corresponding Firestore document exists and is owned
                     && firestore.exists('/databases/(default)/documents/inventory/' + productId)
                     && firestore.get('/databases/(default)/documents/inventory/' + productId).data.userId == request.auth.uid;
    }

    // Data Exports: Allow users to read/write their own exported data files.
    // Path: /exports/{userId}/{fileName}
    match /exports/{userId}/{fileName} {
      allow read: if isOwner(userId);
      // Write access should likely be restricted to backend/functions only.
      allow write: if false; 
      // Allow delete by owner? Or only backend?
      allow delete: if isOwner(userId); 
    }

    // --- Removed Redundant/Old Paths ---
    // match /users/{userId}/profile_image { ... } // Replaced by /profiles/{userId}/{fileName}

  }
}
