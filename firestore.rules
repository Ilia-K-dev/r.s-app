rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    // Checks if the requesting user is the owner of the resource.
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Checks if the user ID matches the document's userId field.
    function isResourceOwner(resource) {
        return isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Checks if the incoming data has the correct owner ID.
    function isDataOwner(data) {
        return isAuthenticated() && request.auth.uid == data.userId;
    }

    // --- Data Validation Functions ---
    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }

    function isValidNumber(num, minVal, maxVal) {
      return (num is number || num is float) && num >= minVal && num <= maxVal;
    }
    
    function isValidTimestamp(ts) {
        // Allow server timestamp or a valid request timestamp
        return ts == request.time || (ts is timestamp && ts <= request.time);
    }

    function isValidUserDoc(data) {
      return isValidString(data.email, 1, 100) // Assuming email is stored
          && data.createdAt is timestamp; 
          // Add other required user fields if necessary
    }

    function isValidReceipt(data) {
      return isDataOwner(data)
          && isValidString(data.merchant, 1, 100)
          && data.date is timestamp // Assuming date is stored as timestamp
          && isValidNumber(data.total, 0.01, 1000000) // Example range
          && data.createdAt is timestamp;
          // Add validation for items array if applicable
    }
    
    function isValidCategory(data) {
        return isDataOwner(data)
            && isValidString(data.name, 1, 50)
            && (!('budget' in data) || isValidNumber(data.budget, 0, 1000000)) // Optional budget
            && (!('color' in data) || (data.color is string && data.color.matches('^#[0-9A-Fa-f]{6}$'))); // Optional color
    }

    function isValidProduct(data) {
      return isDataOwner(data)
          && isValidString(data.name, 1, 100)
          && isValidNumber(data.unitPrice, 0, 1000000)
          && (!('description' in data) || isValidString(data.description, 0, 500)); // Optional description
    }

    function isValidInventory(data) {
      return isDataOwner(data)
          && isValidString(data.productId, 1, 100) // Link to product
          && isValidNumber(data.quantity, 0, 1000000) // Allow 0 quantity
          && (!('location' in data) || isValidString(data.location, 0, 100)); // Optional location
    }

    function isValidStockMovement(data) {
      return isDataOwner(data)
          && isValidString(data.itemId, 1, 100) // Link to inventory/product
          && data.quantity is number // Can be positive or negative
          && isValidString(data.movementType, 1, 50) // e.g., 'purchase', 'sale', 'adjustment'
          && data.timestamp is timestamp; // Should be set by server ideally
    }

    function isValidAlert(data) {
      return isDataOwner(data)
          && isValidString(data.itemId, 1, 100) // Link to inventory/product
          && isValidString(data.message, 1, 200)
          && data.isRead is bool
          && data.createdAt is timestamp;
    }

    function isValidVendor(data) {
      return isDataOwner(data)
          && isValidString(data.name, 1, 100)
          && (!('contactEmail' in data) || isValidString(data.contactEmail, 0, 100)) // Optional fields
          && (!('phone' in data) || isValidString(data.phone, 0, 30));
    }

    function isValidDocument(data) {
      return isDataOwner(data)
          && isValidString(data.imageUrl, 1, 1024) // URL validation is tricky, check length
          && isValidString(data.gcsUri, 1, 1024)
          && data.classification is map // Check if classification is an object
          && data.createdAt is timestamp;
          // Add more checks based on document structure
    }

    function isValidNotification(data) {
      // Primarily created by server, validation might be less strict on client reads/updates
      return isDataOwner(data)
          && isValidString(data.message, 1, 500)
          && data.isRead is bool
          && data.createdAt is timestamp;
    }

    function isValidNotificationPreferences(data) {
      return isDataOwner(data)
          && data.preferences is map; // Ensure preferences is an object
          // Could add specific checks for keys within preferences if needed
    }

    // --- Collection Rules ---

    // Users: Only the user themselves can read/write their own document.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      // Disallow direct creation? Usually handled by Firebase Auth trigger or backend.
      allow create: if isOwner(userId) && isValidUserDoc(request.resource.data); 
    }

    // Receipts: Owned data, requires valid fields on create/update.
    match /receipts/{receiptId} {
      allow read: if isResourceOwner(resource);
      allow create: if isDataOwner(request.resource.data) && isValidReceipt(request.resource.data);
      allow update: if isResourceOwner(resource) && isValidReceipt(request.resource.data); // Ensure owner cannot change userId
      allow delete: if isResourceOwner(resource);
    }

    // Categories: Owned data, requires valid fields on create/update.
    match /categories/{categoryId} {
      allow read: if isResourceOwner(resource);
      allow create: if isDataOwner(request.resource.data) && isValidCategory(request.resource.data);
      allow update: if isResourceOwner(resource) && isValidCategory(request.resource.data);
      allow delete: if isResourceOwner(resource);
    }

    // Products: Owned data, requires valid fields on create/update.
    match /products/{productId} {
      allow read: if isResourceOwner(resource);
      allow create: if isDataOwner(request.resource.data) && isValidProduct(request.resource.data);
      allow update: if isResourceOwner(resource) && isValidProduct(request.resource.data);
      allow delete: if isResourceOwner(resource);
    }

    // Inventory: Owned data, requires valid fields on create/update.
    match /inventory/{inventoryId} {
      allow read: if isResourceOwner(resource);
      allow create: if isDataOwner(request.resource.data) && isValidInventory(request.resource.data);
      allow update: if isResourceOwner(resource) && isValidInventory(request.resource.data);
      allow delete: if isResourceOwner(resource);
    }

    // StockMovements: Owned data, immutable after creation.
    match /stockMovements/{stockMovementId} {
      allow read: if isResourceOwner(resource);
      // Create might be restricted to backend/functions depending on logic
      allow create: if isDataOwner(request.resource.data) && isValidStockMovement(request.resource.data);
      allow update: if false; // Immutable
      allow delete: if false; // Keep for audit trail
    }

    // Alerts: Owned data, requires valid fields.
    match /alerts/{alertId} {
      allow read: if isResourceOwner(resource);
      // Create might be restricted to backend/functions
      allow create: if isDataOwner(request.resource.data) && isValidAlert(request.resource.data);
      allow update: if isResourceOwner(resource) && isValidAlert(request.resource.data); // Allow updating 'isRead' status
      allow delete: if isResourceOwner(resource); // Allow deletion
    }

    // Vendors: Owned data, requires valid fields.
    match /vendors/{vendorId} {
      allow read: if isResourceOwner(resource);
      allow create: if isDataOwner(request.resource.data) && isValidVendor(request.resource.data);
      allow update: if isResourceOwner(resource) && isValidVendor(request.resource.data);
      allow delete: if isResourceOwner(resource);
    }

    // Documents: Owned data, requires valid fields. Created via backend.
    match /documents/{documentId} {
      allow read: if isResourceOwner(resource);
      // Create should ideally only happen via backend after processing
      allow create: if isDataOwner(request.resource.data) && isValidDocument(request.resource.data); // Allow if needed, but backend is safer
      allow update: if isResourceOwner(resource) && isValidDocument(request.resource.data); // Allow updates (e.g., manual correction)
      allow delete: if isResourceOwner(resource);
    }

    // Notifications: Owned data, server-created, client can update read status or delete.
     match /notifications/{notificationId} {
      allow read: if isResourceOwner(resource);
      allow create: if false; // Only server/functions create notifications
      allow update: if isResourceOwner(resource) && request.resource.data.isRead is bool; // Only allow updating 'isRead'
      allow delete: if isResourceOwner(resource);
    }
    
    // NotificationPreferences: Owned data, requires valid fields.
    match /notificationPreferences/{prefsId} {
      // Assume only one doc per user, ID might be userId
      match /{userId} { // Match the document ID to the userId
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isValidNotificationPreferences(request.resource.data);
        allow update: if isOwner(userId) && isValidNotificationPreferences(request.resource.data);
        allow delete: if isOwner(userId); // Or disallow delete?
      }
    }
  }
}
