{"ast":null,"code":"import{initializeApp}from'firebase/app';import{getAuth}from'firebase/auth';import{getFirestore,enableIndexedDbPersistence}from'firebase/firestore';import{getStorage}from'firebase/storage';function log(message){console.log(`[Firebase] ${message}`);}var firebaseConfig={apiKey:\"AIzaSyAWx_ZcWGx8XoCl-fWO8TPJi7hzDrWjQ\",authDomain:\"project-reciept-reader-id.firebaseapp.com\",projectId:\"project-reciept-reader-id\",storageBucket:\"project-reciept-reader-id.appspot.com\",messagingSenderId:\"7474182423\",appId:\"1:747418219423:web:f77288088223d55c3aa\",measurementId:\"G-C7KLBLG2\"};log(\"Initializing Firebase app...\");var app=initializeApp(firebaseConfig);log(\"Firebase app initialized successfully\");var auth=getAuth(app);log(\"Auth service initialized\");var db=getFirestore(app);log(\"Firestore service initialized\");enableIndexedDbPersistence(db).then(function(){log(\"Firestore offline persistence enabled\");}).catch(function(err){if(err.code=='failed-precondition'){log(\"Firestore persistence failed: Multiple tabs open.\");}else if(err.code=='unimplemented'){log(\"Firestore persistence failed: Browser does not support persistence.\");}else{log(\"Firestore persistence failed:\",err);}});var storage=getStorage(app);log(\"Storage service initialized\");export{app,auth,db,storage};","map":{"version":3,"names":["initializeApp","getAuth","getFirestore","enableIndexedDbPersistence","getStorage","log","message","console","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","then","catch","err","code","storage"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/config/firebase.js"],"sourcesContent":["// File: client/src/core/config/firebase.js\r\n// Date: 2025-05-10\r\n// Description: Firebase configuration and service initialization.\r\n// Reasoning: Initializes Firebase app and services (Auth, Firestore, Storage) and configures offline persistence for Firestore.\r\n// Potential Optimizations: Replace hardcoded config with environment variables for production.\r\n\r\nimport { initializeApp } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore, enableIndexedDbPersistence } from 'firebase/firestore'; // Import enableIndexedDbPersistence\r\nimport { getStorage } from 'firebase/storage';\r\n\r\n// Log configuration and initialization steps\r\nfunction log(message) {\r\n  console.log(`[Firebase] ${message}`);\r\n}\r\n\r\n// Hardcoded configuration for development only\r\n// In production, this would be replaced with environment variables\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAWx_ZcWGx8XoCl-fWO8TPJi7hzDrWjQ\",\r\n  authDomain: \"project-reciept-reader-id.firebaseapp.com\",\r\n  projectId: \"project-reciept-reader-id\",\r\n  storageBucket: \"project-reciept-reader-id.appspot.com\",\r\n  messagingSenderId: \"7474182423\",\r\n  appId: \"1:747418219423:web:f77288088223d55c3aa\",\r\n  measurementId: \"G-C7KLBLG2\"\r\n};\r\n\r\n// Initialize Firebase\r\nlog(\"Initializing Firebase app...\");\r\nconst app = initializeApp(firebaseConfig);\r\nlog(\"Firebase app initialized successfully\");\r\n\r\n// Initialize services\r\nconst auth = getAuth(app);\r\nlog(\"Auth service initialized\");\r\n\r\nconst db = getFirestore(app);\r\nlog(\"Firestore service initialized\");\r\n\r\n// Enable offline persistence for Firestore\r\n// This allows the app to work offline and sync data when back online.\r\n// The default cache size is 40 MB. Consider setting a specific cache size limit\r\n// based on expected data volume and device storage constraints if needed.\r\nenableIndexedDbPersistence(db)\r\n  .then(() => {\r\n    log(\"Firestore offline persistence enabled\");\r\n  })\r\n  .catch((err) => {\r\n    if (err.code == 'failed-precondition') {\r\n      // Multiple tabs open, persistence can only be enabled in one tab at a time.\r\n      log(\"Firestore persistence failed: Multiple tabs open.\");\r\n    } else if (err.code == 'unimplemented') {\r\n      // The current browser does not support all of the features required to enable persistence\r\n      log(\"Firestore persistence failed: Browser does not support persistence.\");\r\n    } else {\r\n      log(\"Firestore persistence failed:\", err);\r\n    }\r\n  });\r\n\r\n\r\nconst storage = getStorage(app);\r\nlog(\"Storage service initialized\");\r\n\r\n// Export Firebase services\r\nexport { app, auth, db, storage };\r\n"],"mappings":"AAMA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OAASC,OAAO,KAAQ,eAAe,CACvC,OAASC,YAAY,CAAEC,0BAA0B,KAAQ,oBAAoB,CAC7E,OAASC,UAAU,KAAQ,kBAAkB,CAG7C,QAAS,CAAAC,GAAGA,CAACC,OAAO,CAAE,CACpBC,OAAO,CAACF,GAAG,CAAC,cAAcC,OAAO,EAAE,CAAC,CACtC,CAIA,GAAM,CAAAE,cAAc,CAAG,CACrBC,MAAM,CAAE,uCAAuC,CAC/CC,UAAU,CAAE,2CAA2C,CACvDC,SAAS,CAAE,2BAA2B,CACtCC,aAAa,CAAE,uCAAuC,CACtDC,iBAAiB,CAAE,YAAY,CAC/BC,KAAK,CAAE,wCAAwC,CAC/CC,aAAa,CAAE,YACjB,CAAC,CAGDV,GAAG,CAAC,8BAA8B,CAAC,CACnC,GAAM,CAAAW,GAAG,CAAGhB,aAAa,CAACQ,cAAc,CAAC,CACzCH,GAAG,CAAC,uCAAuC,CAAC,CAG5C,GAAM,CAAAY,IAAI,CAAGhB,OAAO,CAACe,GAAG,CAAC,CACzBX,GAAG,CAAC,0BAA0B,CAAC,CAE/B,GAAM,CAAAa,EAAE,CAAGhB,YAAY,CAACc,GAAG,CAAC,CAC5BX,GAAG,CAAC,+BAA+B,CAAC,CAMpCF,0BAA0B,CAACe,EAAE,CAAC,CAC3BC,IAAI,CAAC,UAAM,CACVd,GAAG,CAAC,uCAAuC,CAAC,CAC9C,CAAC,CAAC,CACDe,KAAK,CAAC,SAACC,GAAG,CAAK,CACd,GAAIA,GAAG,CAACC,IAAI,EAAI,qBAAqB,CAAE,CAErCjB,GAAG,CAAC,mDAAmD,CAAC,CAC1D,CAAC,IAAM,IAAIgB,GAAG,CAACC,IAAI,EAAI,eAAe,CAAE,CAEtCjB,GAAG,CAAC,qEAAqE,CAAC,CAC5E,CAAC,IAAM,CACLA,GAAG,CAAC,+BAA+B,CAAEgB,GAAG,CAAC,CAC3C,CACF,CAAC,CAAC,CAGJ,GAAM,CAAAE,OAAO,CAAGnB,UAAU,CAACY,GAAG,CAAC,CAC/BX,GAAG,CAAC,6BAA6B,CAAC,CAGlC,OAASW,GAAG,CAAEC,IAAI,CAAEC,EAAE,CAAEK,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}