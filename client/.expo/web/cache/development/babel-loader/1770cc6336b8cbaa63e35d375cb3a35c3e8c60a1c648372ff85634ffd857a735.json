{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Tesseract from 'tesseract.js';\nvar worker = null;\nvar initializeWorker = function () {\n  var _ref = _asyncToGenerator(function* () {\n    if (!worker) {\n      console.log('Initializing Tesseract worker...');\n      worker = yield Tesseract.createWorker('eng');\n      console.log('Tesseract worker initialized.');\n    }\n    return worker;\n  });\n  return function initializeWorker() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar terminateWorker = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    if (worker) {\n      console.log('Terminating Tesseract worker...');\n      yield worker.terminate();\n      worker = null;\n      console.log('Tesseract worker terminated.');\n    }\n  });\n  return function terminateWorker() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var performOcr = function () {\n  var _ref3 = _asyncToGenerator(function* (image) {\n    var onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      var ocrWorker = yield initializeWorker();\n      ocrWorker.setProgress(function (p) {\n        onProgress(p.progress);\n      });\n      var _yield$ocrWorker$reco = yield ocrWorker.recognize(image, options),\n        _yield$ocrWorker$reco2 = _yield$ocrWorker$reco.data,\n        text = _yield$ocrWorker$reco2.text,\n        confidence = _yield$ocrWorker$reco2.confidence,\n        words = _yield$ocrWorker$reco2.words;\n      return {\n        text: text,\n        confidence: confidence,\n        words: words\n      };\n    } catch (error) {\n      console.error('Error during OCR processing:', error);\n      throw error;\n    }\n  });\n  return function performOcr(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var optimizeImageForOcr = function () {\n  var _ref4 = _asyncToGenerator(function* (imageFile) {\n    console.log('Optimizing image for OCR (placeholder)...', imageFile.name);\n    return imageFile;\n  });\n  return function optimizeImageForOcr(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Tesseract","worker","initializeWorker","_ref","_asyncToGenerator","console","log","createWorker","apply","arguments","terminateWorker","_ref2","terminate","performOcr","_ref3","image","onProgress","length","undefined","options","ocrWorker","setProgress","p","progress","_yield$ocrWorker$reco","recognize","_yield$ocrWorker$reco2","data","text","confidence","words","error","_x","optimizeImageForOcr","_ref4","imageFile","name","_x2"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/utils/ocrProcessor.js"],"sourcesContent":["// client/src/features/documents/utils/ocrProcessor.js\r\n\r\nimport Tesseract from 'tesseract.js';\r\n\r\n// Initialize Tesseract worker (can be done once and reused)\r\n// Consider creating/terminating workers based on need for performance\r\nlet worker = null;\r\n\r\nconst initializeWorker = async () => {\r\n  if (!worker) {\r\n    console.log('Initializing Tesseract worker...');\r\n    worker = await Tesseract.createWorker('eng'); // Load English language data\r\n    console.log('Tesseract worker initialized.');\r\n  }\r\n  return worker;\r\n};\r\n\r\nconst terminateWorker = async () => {\r\n  if (worker) {\r\n    console.log('Terminating Tesseract worker...');\r\n    await worker.terminate();\r\n    worker = null;\r\n    console.log('Tesseract worker terminated.');\r\n  }\r\n};\r\n\r\n/**\r\n * Performs OCR on an image using Tesseract.js.\r\n * @param {File | string} image - The image file or URL to perform OCR on.\r\n * @param {function} onProgress - Callback function for progress updates.\r\n * @param {object} options - Optional configuration for Tesseract.js.\r\n * @returns {Promise<{text: string, confidence: number, words: Array<object>}>} - Extracted text, confidence score, and word details.\r\n */\r\nexport const performOcr = async (image, onProgress = () => {}, options = {}) => {\r\n  try {\r\n    const ocrWorker = await initializeWorker();\r\n\r\n    // Set up progress tracking\r\n    ocrWorker.setProgress(p => {\r\n      onProgress(p.progress); // Report progress (0 to 1)\r\n    });\r\n\r\n    // Perform OCR\r\n    const { data: { text, confidence, words } } = await ocrWorker.recognize(image, options);\r\n\r\n    // Consider terminating the worker if it's not needed for subsequent operations\r\n    // await terminateWorker(); // Optional: terminate worker after each use\r\n\r\n    return { text, confidence, words };\r\n\r\n  } catch (error) {\r\n    console.error('Error during OCR processing:', error);\r\n    // Consider terminating the worker on error as well\r\n    // await terminateWorker(); // Optional: terminate worker on error\r\n    throw error; // Re-throw the error for handling in the service/hook\r\n  }\r\n};\r\n\r\n/**\r\n * Placeholder for image optimization before OCR.\r\n * Tesseract.js often works best with clean, high-contrast images.\r\n * @param {File} imageFile - The image file to optimize.\r\n * @returns {Promise<File>} - The optimized image file.\r\n */\r\nexport const optimizeImageForOcr = async (imageFile) => {\r\n  console.log('Optimizing image for OCR (placeholder)...', imageFile.name);\r\n  // TODO: Implement image optimization techniques here (e.g., grayscale, binarization, deskewing)\r\n  // This might involve using HTML5 Canvas or a dedicated image processing library.\r\n  return imageFile; // For now, just return the original file\r\n};\r\n\r\n// Add comments about OCR optimization techniques, performance, and cancellation\r\n// OCR optimization techniques used: Currently a placeholder (`optimizeImageForOcr`). Potential techniques include converting to grayscale, binarization (converting to black and white), deskewing (straightening tilted images), and noise reduction. These can significantly improve OCR accuracy.\r\n// Performance considerations for client-side processing: OCR can be computationally intensive, especially for large or complex images. Running it client-side can impact browser performance. Considerations include:\r\n// - Using Web Workers to run OCR in a background thread, preventing UI blocking. Tesseract.js workers already help with this.\r\n// - Optimizing images before processing to reduce the amount of data Tesseract needs to process.\r\n// - Providing progress feedback to the user.\r\n// - Implementing cancellation to allow users to stop long-running OCR operations.\r\n// Cancellation support: Tesseract.js workers support cancellation. The `performOcr` function can be extended to accept a cancellation signal or object to stop the recognition process.\r\n"],"mappings":";AAEA,OAAOA,SAAS,MAAM,cAAc;AAIpC,IAAIC,MAAM,GAAG,IAAI;AAEjB,IAAMC,gBAAgB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACnC,IAAI,CAACH,MAAM,EAAE;MACXI,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/CL,MAAM,SAASD,SAAS,CAACO,YAAY,CAAC,KAAK,CAAC;MAC5CF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C;IACA,OAAOL,MAAM;EACf,CAAC;EAAA,gBAPKC,gBAAgBA,CAAA;IAAA,OAAAC,IAAA,CAAAK,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOrB;AAED,IAAMC,eAAe;EAAA,IAAAC,KAAA,GAAAP,iBAAA,CAAG,aAAY;IAClC,IAAIH,MAAM,EAAE;MACVI,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,MAAML,MAAM,CAACW,SAAS,CAAC,CAAC;MACxBX,MAAM,GAAG,IAAI;MACbI,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C;EACF,CAAC;EAAA,gBAPKI,eAAeA,CAAA;IAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOpB;AASD,OAAO,IAAMI,UAAU;EAAA,IAAAC,KAAA,GAAAV,iBAAA,CAAG,WAAOW,KAAK,EAA0C;IAAA,IAAxCC,UAAU,GAAAP,SAAA,CAAAQ,MAAA,QAAAR,SAAA,QAAAS,SAAA,GAAAT,SAAA,MAAG,YAAM,CAAC,CAAC;IAAA,IAAEU,OAAO,GAAAV,SAAA,CAAAQ,MAAA,QAAAR,SAAA,QAAAS,SAAA,GAAAT,SAAA,MAAG,CAAC,CAAC;IACzE,IAAI;MACF,IAAMW,SAAS,SAASlB,gBAAgB,CAAC,CAAC;MAG1CkB,SAAS,CAACC,WAAW,CAAC,UAAAC,CAAC,EAAI;QACzBN,UAAU,CAACM,CAAC,CAACC,QAAQ,CAAC;MACxB,CAAC,CAAC;MAGF,IAAAC,qBAAA,SAAoDJ,SAAS,CAACK,SAAS,CAACV,KAAK,EAAEI,OAAO,CAAC;QAAAO,sBAAA,GAAAF,qBAAA,CAA/EG,IAAI;QAAIC,IAAI,GAAAF,sBAAA,CAAJE,IAAI;QAAEC,UAAU,GAAAH,sBAAA,CAAVG,UAAU;QAAEC,KAAK,GAAAJ,sBAAA,CAALI,KAAK;MAKvC,OAAO;QAAEF,IAAI,EAAJA,IAAI;QAAEC,UAAU,EAAVA,UAAU;QAAEC,KAAK,EAALA;MAAM,CAAC;IAEpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd1B,OAAO,CAAC0B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MAGpD,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBAvBYlB,UAAUA,CAAAmB,EAAA;IAAA,OAAAlB,KAAA,CAAAN,KAAA,OAAAC,SAAA;EAAA;AAAA,GAuBtB;AAQD,OAAO,IAAMwB,mBAAmB;EAAA,IAAAC,KAAA,GAAA9B,iBAAA,CAAG,WAAO+B,SAAS,EAAK;IACtD9B,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE6B,SAAS,CAACC,IAAI,CAAC;IAGxE,OAAOD,SAAS;EAClB,CAAC;EAAA,gBALYF,mBAAmBA,CAAAI,GAAA;IAAA,OAAAH,KAAA,CAAA1B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAK/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}