{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Tesseract from 'tesseract.js';\nimport { handleFirebaseError } from \"../../../utils/errorHandler\";\nexport var performOcr = function () {\n  var _ref = _asyncToGenerator(function* (imageFile) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var _options$language = options.language,\n      language = _options$language === void 0 ? 'eng' : _options$language,\n      _options$enableHeb = options.enableHeb,\n      enableHeb = _options$enableHeb === void 0 ? false : _options$enableHeb;\n    var langs = enableHeb ? 'eng+heb' : language;\n    try {\n      var _yield$Tesseract$reco = yield Tesseract.recognize(imageFile, langs, {\n          logger: function logger(m) {\n            if (onProgress) {\n              onProgress(m);\n            } else {\n              console.log('OCR Progress:', m);\n            }\n          }\n        }),\n        data = _yield$Tesseract$reco.data;\n      return {\n        text: data.text,\n        confidence: data.confidence\n      };\n    } catch (error) {\n      throw handleFirebaseError(error, 'Receipt OCR Service');\n    }\n  });\n  return function performOcr(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Tesseract","handleFirebaseError","performOcr","_ref","_asyncToGenerator","imageFile","options","arguments","length","undefined","onProgress","_options$language","language","_options$enableHeb","enableHeb","langs","_yield$Tesseract$reco","recognize","logger","m","console","log","data","text","confidence","error","_x","apply"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/receipts/services/receiptOcrService.js"],"sourcesContent":["// File: client/src/features/receipts/services/receiptOcrService.js\r\n// Date: 2025-05-10 05:05:07\r\n// Description: Client-side service for performing OCR on receipt images using Tesseract.js.\r\n// Reasoning: Migrated OCR functionality from the server to the client for cost efficiency as per work plan Task 2.2.\r\n// Potential Optimizations: Implement image preprocessing (e.g., binarization, deskewing) before OCR for better accuracy. Use the Tesseract.js WASM version for potentially better performance.\r\n\r\nimport Tesseract from 'tesseract.js';\r\nimport { handleFirebaseError } from '../../../utils/errorHandler'; // Using the centralized error handler\r\n\r\n/**\r\n * Performs OCR on a given image file using Tesseract.js.\r\n * @param {File} imageFile - The image file to perform OCR on.\r\n * @param {object} [options] - OCR configuration options (e.g., language).\r\n * @param {function} [onProgress] - Optional callback function for progress updates.\r\n * @returns {Promise<object>} - A promise that resolves with the OCR result (text, confidence, etc.).\r\n */\r\nexport const performOcr = async (imageFile, options = {}, onProgress = null) => {\r\n  const { language = 'eng', enableHeb = false } = options;\r\n  const langs = enableHeb ? 'eng+heb' : language;\r\n\r\n  try {\r\n    const { data } = await Tesseract.recognize(\r\n      imageFile,\r\n      langs,\r\n      {\r\n        logger: m => {\r\n          if (onProgress) {\r\n            // Report progress if callback is provided\r\n            onProgress(m);\r\n          } else {\r\n            // Default logging if no callback\r\n            console.log('OCR Progress:', m);\r\n          }\r\n        },\r\n        // Add other Tesseract.js configuration options here if needed\r\n        // e.g., preserve_interword_spaces: '1'\r\n      }\r\n    );\r\n\r\n    // Return relevant data from the OCR result\r\n    return {\r\n      text: data.text,\r\n      confidence: data.confidence,\r\n      // Include other data properties if needed, e.g., words, lines, blocks\r\n      // blocks: data.blocks,\r\n      // lines: data.lines,\r\n      // words: data.words,\r\n    };\r\n\r\n  } catch (error) {\r\n    // Use centralized error handler for Tesseract errors\r\n    // Tesseract errors might not be FirebaseError instances, but handleFirebaseError\r\n    // can handle general Errors as well.\r\n    throw handleFirebaseError(error, 'Receipt OCR Service');\r\n  }\r\n};\r\n\r\n// You can add other OCR-related utility functions here if needed\r\n// e.g., functions for image preprocessing before passing to Tesseract.js\r\n"],"mappings":";AAMA,OAAOA,SAAS,MAAM,cAAc;AACpC,SAASC,mBAAmB;AAS5B,OAAO,IAAMC,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,SAAS,EAAsC;IAAA,IAApCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEG,UAAU,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACzE,IAAAI,iBAAA,GAAgDL,OAAO,CAA/CM,QAAQ;MAARA,QAAQ,GAAAD,iBAAA,cAAG,KAAK,GAAAA,iBAAA;MAAAE,kBAAA,GAAwBP,OAAO,CAA7BQ,SAAS;MAATA,SAAS,GAAAD,kBAAA,cAAG,KAAK,GAAAA,kBAAA;IAC3C,IAAME,KAAK,GAAGD,SAAS,GAAG,SAAS,GAAGF,QAAQ;IAE9C,IAAI;MACF,IAAAI,qBAAA,SAAuBhB,SAAS,CAACiB,SAAS,CACxCZ,SAAS,EACTU,KAAK,EACL;UACEG,MAAM,EAAE,SAARA,MAAMA,CAAEC,CAAC,EAAI;YACX,IAAIT,UAAU,EAAE;cAEdA,UAAU,CAACS,CAAC,CAAC;YACf,CAAC,MAAM;cAELC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,CAAC,CAAC;YACjC;UACF;QAGF,CACF,CAAC;QAhBOG,IAAI,GAAAN,qBAAA,CAAJM,IAAI;MAmBZ,OAAO;QACLC,IAAI,EAAED,IAAI,CAACC,IAAI;QACfC,UAAU,EAAEF,IAAI,CAACE;MAKnB,CAAC;IAEH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAId,MAAMxB,mBAAmB,CAACwB,KAAK,EAAE,qBAAqB,CAAC;IACzD;EACF,CAAC;EAAA,gBAvCYvB,UAAUA,CAAAwB,EAAA;IAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAApB,SAAA;EAAA;AAAA,GAuCtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}