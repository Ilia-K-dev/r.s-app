{"ast":null,"code":"import { calculateSpendingByCategory, calculateMonthlySpending, calculateTopMerchants, calculateInventoryValueTrend, calculateInventoryTurnover } from \"../calculators\";\nvar mockReceipts = [{\n  id: 'receipt1',\n  userId: 'user1',\n  merchant: 'Grocery Store',\n  total: 50.25,\n  category: 'Groceries',\n  date: new Date('2023-01-15')\n}, {\n  id: 'receipt2',\n  userId: 'user1',\n  merchant: 'Restaurant',\n  total: 75.00,\n  category: 'Dining',\n  date: new Date('2023-02-10')\n}, {\n  id: 'receipt3',\n  userId: 'user1',\n  merchant: 'Grocery Store',\n  total: 35.50,\n  category: 'Groceries',\n  date: new Date('2023-03-05')\n}];\nvar mockInventory = [{\n  id: 'item1',\n  userId: 'user1',\n  name: 'Product A',\n  quantity: 10,\n  unitCost: 5.00\n}, {\n  id: 'item2',\n  userId: 'user1',\n  name: 'Product B',\n  quantity: 5,\n  unitCost: 10.00\n}];\nvar mockStockMovements = [{\n  id: 'movement1',\n  userId: 'user1',\n  inventoryId: 'item1',\n  quantity: 2,\n  type: 'remove',\n  timestamp: new Date('2023-01-10')\n}, {\n  id: 'movement2',\n  userId: 'user1',\n  inventoryId: 'item2',\n  quantity: 1,\n  type: 'remove',\n  timestamp: new Date('2023-01-15')\n}, {\n  id: 'movement3',\n  userId: 'user1',\n  inventoryId: 'item1',\n  quantity: 5,\n  type: 'add',\n  timestamp: new Date('2023-02-01')\n}];\ndescribe('Analytics Calculators', function () {\n  test('calculateSpendingByCategory groups receipts by category', function () {\n    var result = calculateSpendingByCategory(mockReceipts);\n    expect(result).toHaveLength(2);\n    var groceries = result.find(function (item) {\n      return item.category === 'Groceries';\n    });\n    expect(groceries).toBeDefined();\n    expect(groceries.amount).toBeCloseTo(85.75);\n    var dining = result.find(function (item) {\n      return item.category === 'Dining';\n    });\n    expect(dining).toBeDefined();\n    expect(dining.amount).toBeCloseTo(75.00);\n  });\n  test('calculateMonthlySpending groups receipts by month', function () {\n    var result = calculateMonthlySpending(mockReceipts);\n    expect(result).toHaveLength(12);\n    var january = result.find(function (item) {\n      return item.month === 'Jan';\n    });\n    expect(january).toBeDefined();\n    expect(january.amount).toBeCloseTo(50.25);\n    var february = result.find(function (item) {\n      return item.month === 'Feb';\n    });\n    expect(february).toBeDefined();\n    expect(february.amount).toBeCloseTo(75.00);\n    var march = result.find(function (item) {\n      return item.month === 'Mar';\n    });\n    expect(march).toBeDefined();\n    expect(march.amount).toBeCloseTo(35.50);\n  });\n  test('calculateTopMerchants ranks merchants by total spending', function () {\n    var result = calculateTopMerchants(mockReceipts, 2);\n    expect(result).toHaveLength(2);\n    expect(result[0].merchant).toBe('Grocery Store');\n    expect(result[0].total).toBeCloseTo(85.75);\n    expect(result[0].count).toBe(2);\n    expect(result[1].merchant).toBe('Restaurant');\n    expect(result[1].total).toBeCloseTo(75.00);\n    expect(result[1].count).toBe(1);\n  });\n  test('calculateInventoryTurnover calculates the turnover ratio correctly', function () {\n    var result = calculateInventoryTurnover(mockInventory, mockStockMovements);\n    expect(result.cogs).toBeCloseTo(20.00);\n    expect(result.averageInventoryValue).toBeCloseTo(100.00);\n    expect(result.turnover).toBeCloseTo(0.20);\n  });\n});","map":{"version":3,"names":["calculateSpendingByCategory","calculateMonthlySpending","calculateTopMerchants","calculateInventoryValueTrend","calculateInventoryTurnover","mockReceipts","id","userId","merchant","total","category","date","Date","mockInventory","name","quantity","unitCost","mockStockMovements","inventoryId","type","timestamp","describe","test","result","expect","toHaveLength","groceries","find","item","toBeDefined","amount","toBeCloseTo","dining","january","month","february","march","toBe","count","cogs","averageInventoryValue","turnover"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/utils/__tests__/calculators.test.js"],"sourcesContent":["import {\r\n  calculateSpendingByCategory,\r\n  calculateMonthlySpending,\r\n  calculateTopMerchants,\r\n  calculateInventoryValueTrend,\r\n  calculateInventoryTurnover\r\n} from '../calculators';\r\n\r\n// Mock receipt data\r\nconst mockReceipts = [\r\n  {\r\n    id: 'receipt1',\r\n    userId: 'user1',\r\n    merchant: 'Grocery Store',\r\n    total: 50.25,\r\n    category: 'Groceries',\r\n    date: new Date('2023-01-15')\r\n  },\r\n  {\r\n    id: 'receipt2',\r\n    userId: 'user1',\r\n    merchant: 'Restaurant',\r\n    total: 75.00,\r\n    category: 'Dining',\r\n    date: new Date('2023-02-10')\r\n  },\r\n  {\r\n    id: 'receipt3',\r\n    userId: 'user1',\r\n    merchant: 'Grocery Store',\r\n    total: 35.50,\r\n    category: 'Groceries',\r\n    date: new Date('2023-03-05')\r\n  }\r\n];\r\n\r\n// Mock inventory data\r\nconst mockInventory = [\r\n  {\r\n    id: 'item1',\r\n    userId: 'user1',\r\n    name: 'Product A',\r\n    quantity: 10,\r\n    unitCost: 5.00\r\n  },\r\n  {\r\n    id: 'item2',\r\n    userId: 'user1',\r\n    name: 'Product B',\r\n    quantity: 5,\r\n    unitCost: 10.00\r\n  }\r\n];\r\n\r\n// Mock stock movements\r\nconst mockStockMovements = [\r\n  {\r\n    id: 'movement1',\r\n    userId: 'user1',\r\n    inventoryId: 'item1',\r\n    quantity: 2,\r\n    type: 'remove',\r\n    timestamp: new Date('2023-01-10')\r\n  },\r\n  {\r\n    id: 'movement2',\r\n    userId: 'user1',\r\n    inventoryId: 'item2',\r\n    quantity: 1,\r\n    type: 'remove',\r\n    timestamp: new Date('2023-01-15')\r\n  },\r\n  {\r\n    id: 'movement3',\r\n    userId: 'user1',\r\n    inventoryId: 'item1',\r\n    quantity: 5,\r\n    type: 'add',\r\n    timestamp: new Date('2023-02-01')\r\n  }\r\n];\r\n\r\ndescribe('Analytics Calculators', () => {\r\n  test('calculateSpendingByCategory groups receipts by category', () => {\r\n    const result = calculateSpendingByCategory(mockReceipts);\r\n\r\n    // Expected: Groceries = 85.75, Dining = 75.00\r\n    expect(result).toHaveLength(2);\r\n\r\n    // Find the Groceries category\r\n    const groceries = result.find(item => item.category === 'Groceries');\r\n    expect(groceries).toBeDefined();\r\n    expect(groceries.amount).toBeCloseTo(85.75);\r\n\r\n    // Find the Dining category\r\n    const dining = result.find(item => item.category === 'Dining');\r\n    expect(dining).toBeDefined();\r\n    expect(dining.amount).toBeCloseTo(75.00);\r\n  });\r\n\r\n  test('calculateMonthlySpending groups receipts by month', () => {\r\n    const result = calculateMonthlySpending(mockReceipts);\r\n\r\n    // We should have entries for all 12 months\r\n    expect(result).toHaveLength(12);\r\n\r\n    // Check the months with expenses\r\n    const january = result.find(item => item.month === 'Jan');\r\n    expect(january).toBeDefined();\r\n    expect(january.amount).toBeCloseTo(50.25);\r\n\r\n    const february = result.find(item => item.month === 'Feb');\r\n    expect(february).toBeDefined();\r\n    expect(february.amount).toBeCloseTo(75.00);\r\n\r\n    const march = result.find(item => item.month === 'Mar');\r\n    expect(march).toBeDefined();\r\n    expect(march.amount).toBeCloseTo(35.50);\r\n  });\r\n\r\n  test('calculateTopMerchants ranks merchants by total spending', () => {\r\n    const result = calculateTopMerchants(mockReceipts, 2);\r\n\r\n    // Should have 2 merchants max (as specified by limit)\r\n    expect(result).toHaveLength(2);\r\n\r\n    // First merchant should be Grocery Store with total 85.75\r\n    expect(result[0].merchant).toBe('Grocery Store');\r\n    expect(result[0].total).toBeCloseTo(85.75);\r\n    expect(result[0].count).toBe(2);\r\n\r\n    // Second merchant should be Restaurant with total 75.00\r\n    expect(result[1].merchant).toBe('Restaurant');\r\n    expect(result[1].total).toBeCloseTo(75.00);\r\n    expect(result[1].count).toBe(1);\r\n  });\r\n\r\n  test('calculateInventoryTurnover calculates the turnover ratio correctly', () => {\r\n    const result = calculateInventoryTurnover(mockInventory, mockStockMovements);\r\n\r\n    // Calculate expected values manually\r\n    // COGS = (2 * 5.00) + (1 * 10.00) = 20.00\r\n    // Average Inventory Value = (10 * 5.00) + (5 * 10.00) = 100.00\r\n    // Turnover = 20.00 / 100.00 = 0.20\r\n\r\n    expect(result.cogs).toBeCloseTo(20.00);\r\n    expect(result.averageInventoryValue).toBeCloseTo(100.00);\r\n    expect(result.turnover).toBeCloseTo(0.20);\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}