{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport { useState, useEffect, useCallback } from 'react';\nimport { db } from \"../../../core/config/firebase\";\nimport { useAuth } from \"../../../features/auth/hooks/useAuth\";\nimport errorHandler from \"../../../shared/utils/errorHandler\";\nimport { getCache, setCache, invalidateCache } from \"../../../shared/utils/cache\";\nimport { logger } from \"../../../shared/utils/logger\";\nvar DEFAULT_SETTINGS = {\n  notifications: {\n    email: true,\n    push: false,\n    receiptUploads: true,\n    monthlyReports: true,\n    budgetAlerts: true\n  },\n  display: {\n    theme: 'light',\n    currency: 'USD',\n    dateFormat: 'MM/DD/YYYY',\n    language: 'en'\n  },\n  receipts: {\n    defaultCategory: null,\n    autoCategories: true,\n    saveImages: true,\n    parseItems: true\n  },\n  reports: {\n    defaultDateRange: '30d',\n    defaultGrouping: 'day',\n    showBudget: true,\n    charts: {\n      preferredType: 'bar',\n      colorScheme: 'default'\n    }\n  },\n  categories: {\n    showInactive: false,\n    sortBy: 'name',\n    budgetWarningThreshold: 80\n  },\n  privacy: {\n    shareAnalytics: true,\n    storageConsent: true\n  }\n};\nexport var useSettings = function useSettings() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var _useState = useState(DEFAULT_SETTINGS),\n    _useState2 = _slicedToArray(_useState, 2),\n    settings = _useState2[0],\n    setSettings = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var fetchSettings = useCallback(_asyncToGenerator(function* () {\n    if (!user) {\n      setSettings(DEFAULT_SETTINGS);\n      setLoading(false);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      var cacheKey = `settings_${user.uid}`;\n      var cachedSettings = getCache(cacheKey);\n      if (cachedSettings) {\n        setSettings(cachedSettings);\n        setLoading(false);\n        logger.info(`Fetched settings from cache for user ${user.uid}`);\n        return;\n      }\n      var settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\n      var settingsDoc = yield getDoc(settingsRef);\n      if (settingsDoc.exists()) {\n        var userSettings = settingsDoc.data();\n        setSettings(function (prevSettings) {\n          return _objectSpread(_objectSpread({}, prevSettings), userSettings);\n        });\n        setCache(cacheKey, userSettings, 30 * 60 * 1000);\n        logger.info(`Cached settings for user ${user.uid}`);\n      } else {\n        yield setDoc(settingsRef, DEFAULT_SETTINGS);\n        setSettings(DEFAULT_SETTINGS);\n        setCache(cacheKey, DEFAULT_SETTINGS, 30 * 60 * 1000);\n        logger.info(`Initialized and cached default settings for user ${user.uid}`);\n      }\n    } catch (err) {\n      var userFriendlyMessage = errorHandler(err, 'Failed to load settings.');\n      setError(userFriendlyMessage);\n      logger.error(`Error fetching settings for user ${user.uid}: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  }), [user]);\n  var updateSettings = useCallback(function () {\n    var _ref2 = _asyncToGenerator(function* (newSettings) {\n      var section = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!user) throw new Error('User not authenticated');\n      try {\n        setLoading(true);\n        setError(null);\n        var settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\n        var updatedSettings = section ? _objectSpread(_objectSpread({}, settings), {}, _defineProperty({}, section, _objectSpread(_objectSpread({}, settings[section]), newSettings))) : _objectSpread(_objectSpread({}, settings), newSettings);\n        yield updateDoc(settingsRef, updatedSettings);\n        setSettings(updatedSettings);\n        var cacheKey = `settings_${user.uid}`;\n        setCache(cacheKey, updatedSettings, 30 * 60 * 1000);\n        invalidateCache(cacheKey);\n        logger.info(`Updated and cached settings for user ${user.uid}`);\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to update settings.');\n        setError(userFriendlyMessage);\n        logger.error(`Error updating settings for user ${user.uid}: ${err.message}`);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [user, settings]);\n  var resetSettings = useCallback(_asyncToGenerator(function* () {\n    var section = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (!user) throw new Error('User not authenticated');\n    try {\n      setLoading(true);\n      setError(null);\n      var resetValues = section ? _defineProperty({}, section, DEFAULT_SETTINGS[section]) : DEFAULT_SETTINGS;\n      yield updateSettings(resetValues);\n      logger.info(`Reset settings for user ${user == null ? void 0 : user.uid}`);\n    } catch (err) {\n      var userFriendlyMessage = errorHandler(err, 'Failed to reset settings.');\n      setError(userFriendlyMessage);\n      logger.error(`Error resetting settings for user ${user == null ? void 0 : user.uid}: ${err.message}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }), [user, updateSettings]);\n  var getSetting = useCallback(function (path) {\n    try {\n      return path.split('.').reduce(function (obj, key) {\n        return obj[key];\n      }, settings);\n    } catch (err) {\n      errorHandler(err, `Failed to get setting at path: ${path}`);\n      logger.error(`Error getting setting at path ${path} for user ${user == null ? void 0 : user.uid}: ${err.message}`);\n      return null;\n    }\n  }, [settings, user]);\n  var exportSettings = useCallback(function () {\n    try {\n      var settingsJson = JSON.stringify(settings, null, 2);\n      var blob = new Blob([settingsJson], {\n        type: 'application/json'\n      });\n      var url = URL.createObjectURL(blob);\n      var link = document.createElement('a');\n      link.href = url;\n      link.download = 'receipt-scanner-settings.json';\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      URL.revokeObjectURL(url);\n      logger.info(`Settings exported for user ${user == null ? void 0 : user.uid}`);\n    } catch (err) {\n      errorHandler(err, 'Failed to export settings.');\n      logger.error(`Error exporting settings for user ${user == null ? void 0 : user.uid}: ${err.message}`);\n    }\n  }, [settings, user]);\n  var importSettings = useCallback(function () {\n    var _ref5 = _asyncToGenerator(function* (file) {\n      if (!user) throw new Error('User not authenticated');\n      try {\n        setLoading(true);\n        setError(null);\n        var reader = new FileReader();\n        reader.onload = function () {\n          var _ref6 = _asyncToGenerator(function* (e) {\n            try {\n              var importedSettings = JSON.parse(e.target.result);\n              yield updateSettings(importedSettings);\n              logger.info(`Settings imported for user ${user.uid}`);\n            } catch (err) {\n              var userFriendlyMessage = errorHandler(err, 'Invalid settings file.');\n              setError(userFriendlyMessage);\n              logger.error(`Error parsing or updating imported settings for user ${user.uid}: ${err.message}`);\n            } finally {\n              setLoading(false);\n            }\n          });\n          return function (_x3) {\n            return _ref6.apply(this, arguments);\n          };\n        }();\n        reader.onerror = function (err) {\n          var userFriendlyMessage = errorHandler(err, 'Failed to read settings file.');\n          setError(userFriendlyMessage);\n          logger.error(`Error reading imported settings file for user ${user.uid}: ${err.message}`);\n          setLoading(false);\n        };\n        reader.readAsText(file);\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to import settings.');\n        setError(userFriendlyMessage);\n        logger.error(`Error importing settings for user ${user.uid}: ${err.message}`);\n        setLoading(false);\n      }\n    });\n    return function (_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [user, updateSettings]);\n  useEffect(function () {\n    if (user) {\n      fetchSettings();\n    } else {\n      setSettings(DEFAULT_SETTINGS);\n    }\n  }, [user, fetchSettings]);\n  return {\n    settings: settings,\n    loading: loading,\n    error: error,\n    updateSettings: updateSettings,\n    resetSettings: resetSettings,\n    getSetting: getSetting,\n    exportSettings: exportSettings,\n    importSettings: importSettings\n  };\n};\nexport default useSettings;","map":{"version":3,"names":["doc","getDoc","setDoc","updateDoc","useState","useEffect","useCallback","db","useAuth","errorHandler","getCache","setCache","invalidateCache","logger","DEFAULT_SETTINGS","notifications","email","push","receiptUploads","monthlyReports","budgetAlerts","display","theme","currency","dateFormat","language","receipts","defaultCategory","autoCategories","saveImages","parseItems","reports","defaultDateRange","defaultGrouping","showBudget","charts","preferredType","colorScheme","categories","showInactive","sortBy","budgetWarningThreshold","privacy","shareAnalytics","storageConsent","useSettings","_useAuth","user","_useState","_useState2","_slicedToArray","settings","setSettings","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","fetchSettings","_asyncToGenerator","cacheKey","uid","cachedSettings","info","settingsRef","settingsDoc","exists","userSettings","data","prevSettings","_objectSpread","err","userFriendlyMessage","message","updateSettings","_ref2","newSettings","section","arguments","length","undefined","Error","updatedSettings","_defineProperty","_x","apply","resetSettings","resetValues","getSetting","path","split","reduce","obj","key","exportSettings","settingsJson","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","importSettings","_ref5","file","reader","FileReader","onload","_ref6","e","importedSettings","parse","target","result","_x3","onerror","readAsText","_x2"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/settings/hooks/useSettings.js"],"sourcesContent":["import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nimport { db } from '../../../core/config/firebase';\r\nimport { useAuth } from '../../../features/auth/hooks/useAuth';\r\nimport errorHandler from '../../../shared/utils/errorHandler'; // Import the error handler utility\r\n// import { localCache } from '../../../shared/services/storage'; // Remove localCache import\r\nimport { getCache, setCache, invalidateCache } from '../../../shared/utils/cache'; // Import cache utility\r\nimport { logger } from '../../../shared/utils/logger';\r\n\r\nconst DEFAULT_SETTINGS = {\r\n  notifications: {\r\n    email: true,\r\n    push: false,\r\n    receiptUploads: true,\r\n    monthlyReports: true,\r\n    budgetAlerts: true,\r\n  },\r\n  display: {\r\n    theme: 'light',\r\n    currency: 'USD',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    language: 'en',\r\n  },\r\n  receipts: {\r\n    defaultCategory: null,\r\n    autoCategories: true,\r\n    saveImages: true,\r\n    parseItems: true,\r\n  },\r\n  reports: {\r\n    defaultDateRange: '30d',\r\n    defaultGrouping: 'day',\r\n    showBudget: true,\r\n    charts: {\r\n      preferredType: 'bar',\r\n      colorScheme: 'default',\r\n    },\r\n  },\r\n  categories: {\r\n    showInactive: false,\r\n    sortBy: 'name',\r\n    budgetWarningThreshold: 80, // percentage\r\n  },\r\n  privacy: {\r\n    shareAnalytics: true,\r\n    storageConsent: true,\r\n  },\r\n};\r\n\r\n/**\r\n * @typedef {object} UserSettings\r\n * @property {object} notifications - Notification settings.\r\n * @property {boolean} notifications.email - Email notifications enabled.\r\n * @property {boolean} notifications.push - Push notifications enabled.\r\n * @property {boolean} notifications.receiptUploads - Receipt upload notifications enabled.\r\n * @property {boolean} notifications.monthlyReports - Monthly reports notifications enabled.\r\n * @property {boolean} notifications.budgetAlerts - Budget alerts notifications enabled.\r\n * @property {object} display - Display settings.\r\n * @property {string} display.theme - Application theme ('light' or 'dark').\r\n * @property {string} display.currency - Preferred currency.\r\n * @property {string} display.dateFormat - Preferred date format.\r\n * @property {string} display.language - Preferred language.\r\n * @property {object} receipts - Receipt settings.\r\n * @property {string|null} receipts.defaultCategory - Default category for new receipts.\r\n * @property {boolean} receipts.autoCategories - Auto-categorization enabled.\r\n * @property {boolean} receipts.saveImages - Save receipt images enabled.\r\n * @property {boolean} receipts.parseItems - Parse line items enabled.\r\n * @property {object} reports - Report settings.\r\n * @property {string} reports.defaultDateRange - Default date range for reports.\r\n * @property {string} reports.defaultGrouping - Default grouping for reports.\r\n * @property {boolean} reports.showBudget - Show budget in reports.\r\n * @property {object} reports.charts - Chart settings.\r\n * @property {string} reports.charts.preferredType - Preferred chart type.\r\n * @property {string} reports.charts.colorScheme - Preferred chart color scheme.\r\n * @property {object} categories - Category settings.\r\n * @property {boolean} categories.showInactive - Show inactive categories.\r\n * @property {string} categories.sortBy - Sort categories by.\r\n * @property {number} categories.budgetWarningThreshold - Budget warning threshold percentage.\r\n * @property {object} privacy - Privacy settings.\r\n * @property {boolean} privacy.shareAnalytics - Share analytics data.\r\n * @property {boolean} privacy.storageConsent - Storage consent given.\r\n * // Add other relevant settings properties here\r\n */\r\n\r\n/**\r\n * @typedef {object} UseSettingsReturn\r\n * @property {UserSettings} settings - User settings data.\r\n * @property {boolean} loading - Loading state.\r\n * @property {string|null} error - Error message if fetching/mutating failed.\r\n * @property {function(): Promise<void>} updateSettings - Function to update settings.\r\n * @property {function(): Promise<void>} resetSettings - Function to reset settings to default.\r\n * @property {function(string): any} getSetting - Function to get a specific setting value by path.\r\n * @property {function(): void} exportSettings - Function to export settings to a JSON file.\r\n * @property {function(File): Promise<void>} importSettings - Function to import settings from a JSON file.\r\n */\r\n\r\n/**\r\n * @desc Custom hook for fetching, updating, resetting, exporting, and importing user settings.\r\n * Manages loading, error, and settings state. Uses client-side caching.\r\n * @returns {UseSettingsReturn} - Object containing settings data, state, and functions.\r\n */\r\nexport const useSettings = () => {\r\n  const { user } = useAuth();\r\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch user settings\r\n  /**\r\n   * @desc Fetches user settings from Firestore or cache.\r\n   * Initializes default settings if no user settings are found.\r\n   * Updates settings state.\r\n   * @returns {Promise<void>}\r\n   */\r\n  const fetchSettings = useCallback(async () => {\r\n    if (!user) {\r\n      setSettings(DEFAULT_SETTINGS); // Reset to default if user logs out\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Check cache first\r\n      const cacheKey = `settings_${user.uid}`;\r\n      const cachedSettings = getCache(cacheKey); // Use getCache\r\n\r\n      if (cachedSettings) {\r\n        setSettings(cachedSettings);\r\n        setLoading(false);\r\n        logger.info(`Fetched settings from cache for user ${user.uid}`); // Add logging\r\n        return;\r\n      }\r\n\r\n      // Fetch from Firestore\r\n      const settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\r\n      const settingsDoc = await getDoc(settingsRef);\r\n\r\n      if (settingsDoc.exists()) {\r\n        const userSettings = settingsDoc.data();\r\n        setSettings(prevSettings => ({\r\n          ...prevSettings,\r\n          ...userSettings,\r\n        }));\r\n\r\n        // Cache the settings\r\n        setCache(cacheKey, userSettings, 30 * 60 * 1000); // Use setCache (cache for 30 minutes)\r\n        logger.info(`Cached settings for user ${user.uid}`); // Add logging\r\n      } else {\r\n        // Initialize default settings for new user\r\n        await setDoc(settingsRef, DEFAULT_SETTINGS);\r\n        setSettings(DEFAULT_SETTINGS); // Set default settings in state\r\n        setCache(cacheKey, DEFAULT_SETTINGS, 30 * 60 * 1000); // Cache default settings\r\n        logger.info(`Initialized and cached default settings for user ${user.uid}`); // Add logging\r\n      }\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to load settings.');\r\n      setError(userFriendlyMessage);\r\n      logger.error(`Error fetching settings for user ${user.uid}: ${err.message}`); // Add logging\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]); // Dependency on user\r\n\r\n  // Update settings\r\n  /**\r\n   * @desc Updates user settings in Firestore and local state.\r\n   * Invalidates and updates the cache.\r\n   * @param {object} newSettings - Object containing the new settings values to merge.\r\n   * @param {string} [section=null] - Optional section key to update only a specific part of settings.\r\n   * @returns {Promise<void>}\r\n   * @throws {Error} - Throws an error if the update fails.\r\n   */\r\n  const updateSettings = useCallback(async (newSettings, section = null) => { // Wrap in useCallback\r\n    if (!user) throw new Error('User not authenticated'); // Add auth check\r\n\r\n    try {\r\n      setLoading(true); // Set loading for update operations\r\n      setError(null); // Clear previous errors\r\n\r\n      const settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\r\n      const updatedSettings = section\r\n        ? {\r\n            ...settings,\r\n            [section]: {\r\n              ...settings[section],\r\n              ...newSettings,\r\n            },\r\n          }\r\n        : {\r\n            ...settings,\r\n            ...newSettings,\r\n          };\r\n\r\n      await updateDoc(settingsRef, updatedSettings);\r\n      setSettings(updatedSettings);\r\n\r\n      // Update cache and invalidate to ensure next fetch gets fresh data\r\n      const cacheKey = `settings_${user.uid}`;\r\n      setCache(cacheKey, updatedSettings, 30 * 60 * 1000); // Use setCache\r\n      invalidateCache(cacheKey); // Invalidate cache\r\n      logger.info(`Updated and cached settings for user ${user.uid}`); // Add logging\r\n\r\n      // showToast('Settings updated successfully', 'success'); // errorHandler handles toast\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to update settings.');\r\n      setError(userFriendlyMessage);\r\n      logger.error(`Error updating settings for user ${user.uid}: ${err.message}`); // Add logging\r\n      throw err; // Re-throw for components that might need to catch\r\n    } finally {\r\n      setLoading(false); // Reset loading\r\n    }\r\n  }, [user, settings]); // Dependencies on user and settings state\r\n\r\n  // Reset settings to default\r\n  /**\r\n   * @desc Resets user settings to default values in Firestore and local state.\r\n   * @param {string} [section=null] - Optional section key to reset only a specific part of settings.\r\n   * @returns {Promise<void>}\r\n   * @throws {Error} - Throws an error if the reset fails.\r\n   */\r\n  const resetSettings = useCallback(async (section = null) => { // Wrap in useCallback\r\n    if (!user) throw new Error('User not authenticated'); // Add auth check\r\n\r\n    try {\r\n      setLoading(true); // Set loading for reset operations\r\n      setError(null); // Clear previous errors\r\n\r\n      const resetValues = section ? { [section]: DEFAULT_SETTINGS[section] } : DEFAULT_SETTINGS;\r\n\r\n      // Use updateSettings to handle the actual Firestore update and state/cache update\r\n      await updateSettings(resetValues);\r\n      // showToast('Settings reset successfully', 'success'); // errorHandler handles toast\r\n      logger.info(`Reset settings for user ${user?.uid}`); // Add logging\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to reset settings.');\r\n      setError(userFriendlyMessage);\r\n      logger.error(`Error resetting settings for user ${user?.uid}: ${err.message}`); // Add logging\r\n      throw err;\r\n    } finally {\r\n      setLoading(false); // Reset loading\r\n    }\r\n  }, [user, updateSettings]); // Dependencies on user and updateSettings\r\n\r\n  // Get a specific setting value\r\n  /**\r\n   * @desc Gets a specific setting value from the current settings state by dot notation path.\r\n   * @param {string} path - The dot notation path to the setting (e.g., 'notifications.email').\r\n   * @returns {any} - The value of the setting, or null if not found.\r\n   */\r\n  const getSetting = useCallback(path => { // Wrap in useCallback\r\n    try {\r\n      return path.split('.').reduce((obj, key) => obj[key], settings);\r\n    } catch (err) {\r\n      // This is a client-side error, use errorHandler directly\r\n      errorHandler(err, `Failed to get setting at path: ${path}`);\r\n      logger.error(`Error getting setting at path ${path} for user ${user?.uid}: ${err.message}`); // Add logging\r\n      return null;\r\n    }\r\n  }, [settings, user]); // Dependencies on settings state and user\r\n\r\n  // Export settings\r\n  /**\r\n   * @desc Exports the current user settings to a JSON file.\r\n   * @returns {void}\r\n   */\r\n  const exportSettings = useCallback(() => { // Wrap in useCallback\r\n    try {\r\n      const settingsJson = JSON.stringify(settings, null, 2);\r\n      const blob = new Blob([settingsJson], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'receipt-scanner-settings.json';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n      URL.revokeObjectURL(url);\r\n      // showToast('Settings exported successfully', 'success'); // errorHandler handles toast\r\n      logger.info(`Settings exported for user ${user?.uid}`); // Add logging\r\n    } catch (err) {\r\n      errorHandler(err, 'Failed to export settings.');\r\n      logger.error(`Error exporting settings for user ${user?.uid}: ${err.message}`); // Add logging\r\n    }\r\n  }, [settings, user]); // Dependencies on settings state and user\r\n\r\n  // Import settings\r\n  /**\r\n   * @desc Imports settings from a JSON file and updates user settings in Firestore.\r\n   * @param {File} file - The JSON file containing the settings to import.\r\n   * @returns {Promise<void>}\r\n   * @throws {Error} - Throws an error if the import fails (file reading or update).\r\n   */\r\n  const importSettings = useCallback(async file => { // Wrap in useCallback\r\n    if (!user) throw new Error('User not authenticated'); // Add auth check\r\n\r\n    try {\r\n      setLoading(true); // Set loading for import operations\r\n      setError(null); // Clear previous errors\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = async e => {\r\n        try {\r\n          const importedSettings = JSON.parse(e.target.result);\r\n          // Use updateSettings to handle the actual Firestore update and state/cache update\r\n          await updateSettings(importedSettings);\r\n          // showToast('Settings imported successfully', 'success'); // errorHandler handles toast\r\n          logger.info(`Settings imported for user ${user.uid}`); // Add logging\r\n        } catch (err) {\r\n          // Handle parsing errors specifically\r\n          const userFriendlyMessage = errorHandler(err, 'Invalid settings file.');\r\n          setError(userFriendlyMessage);\r\n          logger.error(`Error parsing or updating imported settings for user ${user.uid}: ${err.message}`); // Add logging\r\n          // No need to re-throw here as updateSettings already throws\r\n        } finally {\r\n           setLoading(false); // Reset loading after import process\r\n        }\r\n      };\r\n      reader.onerror = (err) => {\r\n         const userFriendlyMessage = errorHandler(err, 'Failed to read settings file.');\r\n         setError(userFriendlyMessage);\r\n         logger.error(`Error reading imported settings file for user ${user.uid}: ${err.message}`); // Add logging\r\n         setLoading(false); // Reset loading on file read error\r\n      };\r\n      reader.readAsText(file);\r\n    } catch (err) {\r\n      // This catch block might catch errors from readAsText or initial checks\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to import settings.');\r\n      setError(userFriendlyMessage);\r\n      logger.error(`Error importing settings for user ${user.uid}: ${err.message}`); // Add logging\r\n      setLoading(false); // Reset loading on initial import error\r\n    }\r\n  }, [user, updateSettings]); // Dependencies on user and updateSettings\r\n\r\n\r\n  // Load settings on mount and when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchSettings();\r\n    } else {\r\n      setSettings(DEFAULT_SETTINGS); // Reset to default if user logs out\r\n    }\r\n  }, [user, fetchSettings]); // Dependency on user and fetchSettings\r\n\r\n  return {\r\n    settings,\r\n    loading,\r\n    error,\r\n    updateSettings,\r\n    resetSettings,\r\n    getSetting,\r\n    exportSettings,\r\n    importSettings,\r\n  };\r\n};\r\n\r\nexport default useSettings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}