{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { db } from \"../../../core/config/firebase\";\nimport { collection, query, where, orderBy, limit, getDocs, Timestamp } from 'firebase/firestore';\nimport { errorHandler } from \"../../../utils/errorHandler\";\nvar getDateRange = function getDateRange(period) {\n  var now = new Date();\n  var startDate;\n  switch (period) {\n    case 'week':\n      startDate = new Date(now);\n      startDate.setDate(now.getDate() - 7);\n      break;\n    case 'month':\n      startDate = new Date(now);\n      startDate.setMonth(now.getMonth() - 1);\n      break;\n    case 'quarter':\n      startDate = new Date(now);\n      startDate.setMonth(now.getMonth() - 3);\n      break;\n    case 'year':\n      startDate = new Date(now);\n      startDate.setFullYear(now.getFullYear() - 1);\n      break;\n    default:\n      startDate = new Date(now);\n      startDate.setMonth(now.getMonth() - 1);\n  }\n  return {\n    start: Timestamp.fromDate(startDate),\n    end: Timestamp.fromDate(now)\n  };\n};\nexport var fetchUserReceipts = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'month';\n    try {\n      var receiptsRef = collection(db, 'receipts');\n      var dateRange = getDateRange(period);\n      var q = query(receiptsRef, where('userId', '==', userId), where('date', '>=', dateRange.start), where('date', '<=', dateRange.end), orderBy('date', 'desc'));\n      var querySnapshot = yield getDocs(q);\n      var receipts = [];\n      querySnapshot.forEach(function (doc) {\n        receipts.push(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      });\n      return receipts;\n    } catch (error) {\n      throw errorHandler(error, 'Error fetching user receipts for analytics');\n    }\n  });\n  return function fetchUserReceipts(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchReceiptsByYear = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, year) {\n    try {\n      var startDate = Timestamp.fromDate(new Date(`${year}-01-01`));\n      var endDate = Timestamp.fromDate(new Date(`${year + 1}-01-01`));\n      var receiptsRef = collection(db, 'receipts');\n      var q = query(receiptsRef, where('userId', '==', userId), where('date', '>=', startDate), where('date', '<', endDate), orderBy('date', 'desc'));\n      var querySnapshot = yield getDocs(q);\n      var receipts = [];\n      querySnapshot.forEach(function (doc) {\n        receipts.push(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      });\n      return receipts;\n    } catch (error) {\n      throw errorHandler(error, 'Error fetching receipts by year');\n    }\n  });\n  return function fetchReceiptsByYear(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchUserInventory = function () {\n  var _ref3 = _asyncToGenerator(function* (userId) {\n    try {\n      var inventoryRef = collection(db, 'inventory');\n      var q = query(inventoryRef, where('userId', '==', userId));\n      var querySnapshot = yield getDocs(q);\n      var inventoryItems = [];\n      querySnapshot.forEach(function (doc) {\n        inventoryItems.push(_objectSpread({\n          id: doc.id\n        }, doc.data()));\n      });\n      return inventoryItems;\n    } catch (error) {\n      throw errorHandler(error, 'Error fetching user inventory for analytics');\n    }\n  });\n  return function fetchUserInventory(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchStockMovements = function () {\n  var _ref4 = _asyncToGenerator(function* (userId) {\n    var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'month';\n    try {\n      var dateRange = getDateRange(period);\n      var movementsRef = collection(db, 'stockMovements');\n      var q = query(movementsRef, where('userId', '==', userId), where('timestamp', '>=', dateRange.start), where('timestamp', '<=', dateRange.end), orderBy('timestamp', 'desc'));\n      var querySnapshot = yield getDocs(q);\n      var movements = [];\n      querySnapshot.forEach(function (doc) {\n        var data = doc.data();\n        movements.push({\n          id: doc.id,\n          inventoryId: data.inventoryId,\n          quantity: data.quantity,\n          type: data.type,\n          timestamp: data.timestamp\n        });\n      });\n      return movements;\n    } catch (error) {\n      throw errorHandler(error, 'Error fetching stock movements for analytics');\n    }\n  });\n  return function fetchStockMovements(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["db","collection","query","where","orderBy","limit","getDocs","Timestamp","errorHandler","getDateRange","period","now","Date","startDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","start","fromDate","end","fetchUserReceipts","_ref","_asyncToGenerator","userId","arguments","length","undefined","receiptsRef","dateRange","q","querySnapshot","receipts","forEach","doc","push","_objectSpread","id","data","error","_x","apply","fetchReceiptsByYear","_ref2","year","endDate","_x2","_x3","fetchUserInventory","_ref3","inventoryRef","inventoryItems","_x4","fetchStockMovements","_ref4","movementsRef","movements","inventoryId","quantity","type","timestamp","_x5"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/utils/dataFetchers.js"],"sourcesContent":["import { db } from '../../../core/config/firebase';\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  limit,\r\n  getDocs,\r\n  Timestamp\r\n} from 'firebase/firestore';\r\nimport { errorHandler } from '../../../utils/errorHandler';\r\n\r\n// Helper to generate date ranges based on period\r\nconst getDateRange = (period) => {\r\n  const now = new Date();\r\n  let startDate;\r\n\r\n  switch(period) {\r\n    case 'week':\r\n      startDate = new Date(now);\r\n      startDate.setDate(now.getDate() - 7);\r\n      break;\r\n    case 'month':\r\n      startDate = new Date(now);\r\n      startDate.setMonth(now.getMonth() - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = new Date(now);\r\n      startDate.setMonth(now.getMonth() - 3);\r\n      break;\r\n    case 'year':\r\n      startDate = new Date(now);\r\n      startDate.setFullYear(now.getFullYear() - 1);\r\n      break;\r\n    default:\r\n      startDate = new Date(now);\r\n      startDate.setMonth(now.getMonth() - 1); // Default to month\r\n  }\r\n\r\n  return {\r\n    start: Timestamp.fromDate(startDate),\r\n    end: Timestamp.fromDate(now)\r\n  };\r\n};\r\n\r\n// Fetch user receipts for analytics\r\nexport const fetchUserReceipts = async (userId, period = 'month') => {\r\n  try {\r\n    const receiptsRef = collection(db, 'receipts');\r\n    const dateRange = getDateRange(period);\r\n\r\n    const q = query(\r\n      receiptsRef,\r\n      where('userId', '==', userId),\r\n      where('date', '>=', dateRange.start),\r\n      where('date', '<=', dateRange.end),\r\n      orderBy('date', 'desc')\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const receipts = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      receipts.push({ id: doc.id, ...doc.data() });\r\n    });\r\n\r\n    return receipts;\r\n  } catch (error) {\r\n    throw errorHandler(error, 'Error fetching user receipts for analytics');\r\n  }\r\n};\r\n\r\n// Fetch user receipts by year\r\nexport const fetchReceiptsByYear = async (userId, year) => {\r\n  try {\r\n    const startDate = Timestamp.fromDate(new Date(`${year}-01-01`));\r\n    const endDate = Timestamp.fromDate(new Date(`${year + 1}-01-01`));\r\n\r\n    const receiptsRef = collection(db, 'receipts');\r\n    const q = query(\r\n      receiptsRef,\r\n      where('userId', '==', userId),\r\n      where('date', '>=', startDate),\r\n      where('date', '<', endDate),\r\n      orderBy('date', 'desc')\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const receipts = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      receipts.push({ id: doc.id, ...doc.data() });\r\n    });\r\n\r\n    return receipts;\r\n  } catch (error) {\r\n    throw errorHandler(error, 'Error fetching receipts by year');\r\n  }\r\n};\r\n\r\n// Fetch user inventory items\r\nexport const fetchUserInventory = async (userId) => {\r\n  try {\r\n    const inventoryRef = collection(db, 'inventory');\r\n    const q = query(\r\n      inventoryRef,\r\n      where('userId', '==', userId)\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const inventoryItems = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      inventoryItems.push({ id: doc.id, ...doc.data() });\r\n    });\r\n\r\n    return inventoryItems;\r\n  } catch (error) {\r\n    throw errorHandler(error, 'Error fetching user inventory for analytics');\r\n  }\r\n};\r\n\r\n// Fetch stock movements for inventory analytics\r\nexport const fetchStockMovements = async (userId, period = 'month') => {\r\n  try {\r\n    const dateRange = getDateRange(period);\r\n    const movementsRef = collection(db, 'stockMovements');\r\n\r\n    const q = query(\r\n      movementsRef,\r\n      where('userId', '==', userId),\r\n      where('timestamp', '>=', dateRange.start),\r\n      where('timestamp', '<=', dateRange.end),\r\n      orderBy('timestamp', 'desc')\r\n      // Select only necessary fields for analytics calculations\r\n      // .select('inventoryId', 'quantity', 'type', 'timestamp') // Firestore Web SDK does not support select() in query()\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const movements = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      // Manually select fields as select() is not supported in query() for Web SDK\r\n      const data = doc.data();\r\n      movements.push({\r\n        id: doc.id,\r\n        inventoryId: data.inventoryId,\r\n        quantity: data.quantity,\r\n        type: data.type,\r\n        timestamp: data.timestamp,\r\n      });\r\n    });\r\n\r\n    return movements;\r\n  } catch (error) {\r\n    throw errorHandler(error, 'Error fetching stock movements for analytics');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}