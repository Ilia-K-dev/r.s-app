{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { collection, addDoc, updateDoc, deleteDoc, doc, query, where, getDocs } from 'firebase/firestore';\nimport { db } from \"../../../core/config/firebase\";\nexport var categoriesApi = {\n  getCategories: function () {\n    var _getCategories = _asyncToGenerator(function* (userId) {\n      try {\n        var categoriesRef = collection(db, 'categories');\n        var q = query(categoriesRef, where('userId', '==', userId));\n        var snapshot = yield getDocs(q);\n        return snapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n      } catch (error) {\n        throw new Error('Failed to fetch categories');\n      }\n    });\n    function getCategories(_x) {\n      return _getCategories.apply(this, arguments);\n    }\n    return getCategories;\n  }(),\n  addCategory: function () {\n    var _addCategory = _asyncToGenerator(function* (userId, categoryData) {\n      try {\n        var categoriesRef = collection(db, 'categories');\n        var newCategory = _objectSpread(_objectSpread({}, categoryData), {}, {\n          userId: userId,\n          createdAt: new Date().toISOString()\n        });\n        var docRef = yield addDoc(categoriesRef, newCategory);\n        return _objectSpread({\n          id: docRef.id\n        }, newCategory);\n      } catch (error) {\n        throw new Error('Failed to create category');\n      }\n    });\n    function addCategory(_x2, _x3) {\n      return _addCategory.apply(this, arguments);\n    }\n    return addCategory;\n  }(),\n  updateCategory: function () {\n    var _updateCategory = _asyncToGenerator(function* (categoryId, categoryData) {\n      try {\n        var categoryRef = doc(db, 'categories', categoryId);\n        yield updateDoc(categoryRef, _objectSpread(_objectSpread({}, categoryData), {}, {\n          updatedAt: new Date().toISOString()\n        }));\n      } catch (error) {\n        throw new Error('Failed to update category');\n      }\n    });\n    function updateCategory(_x4, _x5) {\n      return _updateCategory.apply(this, arguments);\n    }\n    return updateCategory;\n  }(),\n  deleteCategory: function () {\n    var _deleteCategory = _asyncToGenerator(function* (categoryId) {\n      try {\n        var categoryRef = doc(db, 'categories', categoryId);\n        yield deleteDoc(categoryRef);\n      } catch (error) {\n        throw new Error('Failed to delete category');\n      }\n    });\n    function deleteCategory(_x6) {\n      return _deleteCategory.apply(this, arguments);\n    }\n    return deleteCategory;\n  }()\n};","map":{"version":3,"names":["collection","addDoc","updateDoc","deleteDoc","doc","query","where","getDocs","db","categoriesApi","getCategories","_getCategories","_asyncToGenerator","userId","categoriesRef","q","snapshot","docs","map","_objectSpread","id","data","error","Error","_x","apply","arguments","addCategory","_addCategory","categoryData","newCategory","createdAt","Date","toISOString","docRef","_x2","_x3","updateCategory","_updateCategory","categoryId","categoryRef","updatedAt","_x4","_x5","deleteCategory","_deleteCategory","_x6"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/categories/services/categories.js"],"sourcesContent":["import {\r\n  collection,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  doc,\r\n  query,\r\n  where,\r\n  getDocs,\r\n} from 'firebase/firestore'; //correct\n\r\nimport { db } from '../../../core/config/firebase'; //correct\r\n\r\nexport const categoriesApi = {\r\n  getCategories: async userId => {\r\n    try {\r\n      const categoriesRef = collection(db, 'categories');\r\n      const q = query(categoriesRef, where('userId', '==', userId));\r\n      const snapshot = await getDocs(q);\r\n\r\n      return snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch categories');\r\n    }\r\n  },\r\n\r\n  addCategory: async (userId, categoryData) => {\r\n    try {\r\n      const categoriesRef = collection(db, 'categories');\r\n      const newCategory = {\r\n        ...categoryData,\r\n        userId,\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n\r\n      const docRef = await addDoc(categoriesRef, newCategory);\r\n      return {\r\n        id: docRef.id,\r\n        ...newCategory,\r\n      };\r\n    } catch (error) {\r\n      throw new Error('Failed to create category');\r\n    }\r\n  },\r\n\r\n  updateCategory: async (categoryId, categoryData) => {\r\n    try {\r\n      const categoryRef = doc(db, 'categories', categoryId);\r\n      await updateDoc(categoryRef, {\r\n        ...categoryData,\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n    } catch (error) {\r\n      throw new Error('Failed to update category');\r\n    }\r\n  },\r\n\r\n  deleteCategory: async categoryId => {\r\n    try {\r\n      const categoryRef = doc(db, 'categories', categoryId);\r\n      await deleteDoc(categoryRef);\r\n    } catch (error) {\r\n      throw new Error('Failed to delete category');\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}