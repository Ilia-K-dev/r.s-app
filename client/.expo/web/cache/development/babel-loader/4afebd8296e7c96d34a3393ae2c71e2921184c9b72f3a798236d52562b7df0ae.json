{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport var formatCurrency = function formatCurrency(amount) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  if (typeof amount !== 'number') {\n    amount = parseFloat(amount) || 0;\n  }\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\nexport var parseCurrencyInput = function parseCurrencyInput(value) {\n  var cleanValue = value.replace(/[^\\d.]/g, '');\n  var parts = cleanValue.split('.');\n  if (parts.length > 2) {\n    return parts[0] + '.' + parts[1];\n  }\n  if (parts.length === 2) {\n    return parts[0] + '.' + parts[1].slice(0, 2);\n  }\n  return cleanValue;\n};\nexport var calculateTotal = function calculateTotal() {\n  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return items.reduce(function (sum, item) {\n    var amount = parseFloat(item.amount) || 0;\n    var quantity = parseFloat(item.quantity) || 1;\n    return sum + amount * quantity;\n  }, 0);\n};\nexport var calculateTax = function calculateTax(amount) {\n  var taxRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return amount * (taxRate / 100);\n};\nexport var roundToDecimals = function roundToDecimals(number) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var factor = Math.pow(10, decimals);\n  return Math.round((number + Number.EPSILON) * factor) / factor;\n};\nexport var formatUnitPrice = function formatUnitPrice(price, unit) {\n  var currency = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'USD';\n  return `${formatCurrency(price, currency)}/${unit}`;\n};\nexport var calculateItemTotal = function calculateItemTotal(price) {\n  var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var discountPercent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var baseTotal = price * quantity;\n  var discount = baseTotal * (discountPercent / 100);\n  return roundToDecimals(baseTotal - discount);\n};\nexport var parsePrice = function parsePrice(priceString) {\n  var cleaned = priceString.replace(/[^\\d.,]/g, '');\n  return parseFloat(cleaned.replace(',', '.')) || 0;\n};\nexport var calculateDiscount = function calculateDiscount(amount, discountPercent) {\n  return roundToDecimals(amount * (discountPercent / 100));\n};\nexport var formatGridCurrency = function formatGridCurrency(amount) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  return {\n    raw: amount,\n    formatted: formatCurrency(amount, currency),\n    currency: currency\n  };\n};\nexport var calculateSubtotal = function calculateSubtotal() {\n  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return items.reduce(function (sum, item) {\n    var price = parseFloat(item.price) || 0;\n    var quantity = parseFloat(item.quantity) || 1;\n    var discount = parseFloat(item.discountPercent) || 0;\n    return sum + calculateItemTotal(price, quantity, discount);\n  }, 0);\n};\nexport var calculateTotalWithTax = function calculateTotalWithTax(subtotal) {\n  var taxRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var tax = calculateTax(subtotal, taxRate);\n  return roundToDecimals(subtotal + tax);\n};\nexport var formatPercentage = function formatPercentage(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return `${roundToDecimals(value, decimals)}%`;\n};\nexport var calculatePricePerUnit = function calculatePricePerUnit(price, quantity) {\n  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  if (quantity <= 0) return null;\n  var unitPrice = roundToDecimals(price / quantity);\n  return {\n    amount: unitPrice,\n    formatted: formatUnitPrice(unitPrice, unit)\n  };\n};\nexport var formatLargeCurrency = function formatLargeCurrency(amount) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  var absAmount = Math.abs(amount);\n  if (absAmount >= 1e9) {\n    return `${formatCurrency(amount / 1e9, currency)}B`;\n  }\n  if (absAmount >= 1e6) {\n    return `${formatCurrency(amount / 1e6, currency)}M`;\n  }\n  if (absAmount >= 1e3) {\n    return `${formatCurrency(amount / 1e3, currency)}K`;\n  }\n  return formatCurrency(amount, currency);\n};\nexport var calculateRunningTotal = function calculateRunningTotal() {\n  var transactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var total = 0;\n  return transactions.map(function (transaction) {\n    total += parseFloat(transaction.amount) || 0;\n    return _objectSpread(_objectSpread({}, transaction), {}, {\n      runningTotal: roundToDecimals(total)\n    });\n  });\n};\nexport var formatCurrencyDifference = function formatCurrencyDifference(amount) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  var prefix = amount >= 0 ? '+' : '';\n  return `${prefix}${formatCurrency(amount, currency)}`;\n};\nexport var calculateWeightedAverage = function calculateWeightedAverage() {\n  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var totalValue = items.reduce(function (sum, item) {\n    return sum + item.price * item.quantity;\n  }, 0);\n  var totalQuantity = items.reduce(function (sum, item) {\n    return sum + item.quantity;\n  }, 0);\n  if (totalQuantity === 0) return 0;\n  return roundToDecimals(totalValue / totalQuantity);\n};\nexport var formatMoneyRange = function formatMoneyRange(min, max) {\n  var currency = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'USD';\n  if (min === max) {\n    return formatCurrency(min, currency);\n  }\n  return `${formatCurrency(min, currency)} - ${formatCurrency(max, currency)}`;\n};\nexport var calculateCostBasis = function calculateCostBasis() {\n  var purchases = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return purchases.reduce(function (total, purchase) {\n    var cost = parseFloat(purchase.price) || 0;\n    var quantity = parseFloat(purchase.quantity) || 0;\n    return total + cost * quantity;\n  }, 0);\n};\nexport var formatCurrencyForExport = function formatCurrencyForExport(amount) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  return {\n    amount: roundToDecimals(amount),\n    formatted: formatCurrency(amount, currency),\n    currency: currency,\n    raw: amount\n  };\n};\nexport var calculateProfitMargin = function calculateProfitMargin(revenue, cost) {\n  if (revenue === 0) return 0;\n  return roundToDecimals((revenue - cost) / revenue * 100);\n};\nexport var calculateMarkup = function calculateMarkup(sellingPrice, cost) {\n  if (cost === 0) return 0;\n  return roundToDecimals((sellingPrice - cost) / cost * 100);\n};","map":{"version":3,"names":["formatCurrency","amount","currency","arguments","length","undefined","locale","parseFloat","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","parseCurrencyInput","value","cleanValue","replace","parts","split","slice","calculateTotal","items","reduce","sum","item","quantity","calculateTax","taxRate","roundToDecimals","number","decimals","factor","Math","pow","round","Number","EPSILON","formatUnitPrice","price","unit","calculateItemTotal","discountPercent","baseTotal","discount","parsePrice","priceString","cleaned","calculateDiscount","formatGridCurrency","raw","formatted","calculateSubtotal","calculateTotalWithTax","subtotal","tax","formatPercentage","calculatePricePerUnit","unitPrice","formatLargeCurrency","absAmount","abs","calculateRunningTotal","transactions","total","map","transaction","_objectSpread","runningTotal","formatCurrencyDifference","prefix","calculateWeightedAverage","totalValue","totalQuantity","formatMoneyRange","min","max","calculateCostBasis","purchases","purchase","cost","formatCurrencyForExport","calculateProfitMargin","revenue","calculateMarkup","sellingPrice"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/currency.js"],"sourcesContent":["/**\r\n * Comprehensive currency utilities for receipt scanning and inventory management\r\n */\r\n\r\n/**\r\n * Basic currency formatting with locale support\r\n */\r\nexport const formatCurrency = (amount, currency = 'USD', locale = 'en-US') => {\r\n  if (typeof amount !== 'number') {\r\n    amount = parseFloat(amount) || 0;\r\n  }\r\n\r\n  return new Intl.NumberFormat(locale, {\r\n    style: 'currency',\r\n    currency,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  }).format(amount);\r\n};\r\n\r\n/**\r\n * Parse currency input, cleaning and validating the value\r\n */\r\nexport const parseCurrencyInput = value => {\r\n  // Remove all non-digit characters except decimal point\r\n  const cleanValue = value.replace(/[^\\d.]/g, '');\r\n\r\n  // Ensure only one decimal point\r\n  const parts = cleanValue.split('.');\r\n  if (parts.length > 2) {\r\n    return parts[0] + '.' + parts[1];\r\n  }\r\n\r\n  // Limit to 2 decimal places\r\n  if (parts.length === 2) {\r\n    return parts[0] + '.' + parts[1].slice(0, 2);\r\n  }\r\n\r\n  return cleanValue;\r\n};\r\n\r\n/**\r\n * Calculate total from array of items\r\n */\r\nexport const calculateTotal = (items = []) => items.reduce((sum, item) => {\r\n    const amount = parseFloat(item.amount) || 0;\r\n    const quantity = parseFloat(item.quantity) || 1;\r\n    return sum + amount * quantity;\r\n  }, 0);\r\n\r\n/**\r\n * Calculate tax amount based on base amount and tax rate\r\n */\r\nexport const calculateTax = (amount, taxRate = 0) => amount * (taxRate / 100);\r\n\r\n/**\r\n * Round number to specified decimal places\r\n */\r\nexport const roundToDecimals = (number, decimals = 2) => {\r\n  const factor = Math.pow(10, decimals);\r\n  return Math.round((number + Number.EPSILON) * factor) / factor;\r\n};\r\n\r\n/**\r\n * Format unit price with proper currency and unit\r\n */\r\nexport const formatUnitPrice = (price, unit, currency = 'USD') => `${formatCurrency(price, currency)}/${unit}`;\r\n\r\n/**\r\n * Calculate total price with quantity\r\n */\r\nexport const calculateItemTotal = (price, quantity = 1, discountPercent = 0) => {\r\n  const baseTotal = price * quantity;\r\n  const discount = baseTotal * (discountPercent / 100);\r\n  return roundToDecimals(baseTotal - discount);\r\n};\r\n\r\n/**\r\n * Parse price string to number\r\n */\r\nexport const parsePrice = priceString => {\r\n  const cleaned = priceString.replace(/[^\\d.,]/g, '');\r\n  return parseFloat(cleaned.replace(',', '.')) || 0;\r\n};\r\n\r\n/**\r\n * Calculate discount amount\r\n */\r\nexport const calculateDiscount = (amount, discountPercent) => roundToDecimals(amount * (discountPercent / 100));\r\n\r\n/**\r\n * Format currency for display in grid/table\r\n */\r\nexport const formatGridCurrency = (amount, currency = 'USD') => ({\r\n    raw: amount,\r\n    formatted: formatCurrency(amount, currency),\r\n    currency,\r\n  });\r\n\r\n/**\r\n * Calculate subtotal before tax\r\n */\r\nexport const calculateSubtotal = (items = []) => items.reduce((sum, item) => {\r\n    const price = parseFloat(item.price) || 0;\r\n    const quantity = parseFloat(item.quantity) || 1;\r\n    const discount = parseFloat(item.discountPercent) || 0;\r\n    return sum + calculateItemTotal(price, quantity, discount);\r\n  }, 0);\r\n\r\n/**\r\n * Calculate total with tax\r\n */\r\nexport const calculateTotalWithTax = (subtotal, taxRate = 0) => {\r\n  const tax = calculateTax(subtotal, taxRate);\r\n  return roundToDecimals(subtotal + tax);\r\n};\r\n\r\n/**\r\n * Format percentage for display\r\n */\r\nexport const formatPercentage = (value, decimals = 2) => `${roundToDecimals(value, decimals)}%`;\r\n\r\n/**\r\n * Calculate price per unit\r\n */\r\nexport const calculatePricePerUnit = (price, quantity, unit = '') => {\r\n  if (quantity <= 0) return null;\r\n  const unitPrice = roundToDecimals(price / quantity);\r\n  return {\r\n    amount: unitPrice,\r\n    formatted: formatUnitPrice(unitPrice, unit),\r\n  };\r\n};\r\n\r\n/**\r\n * Format large currency amounts with K/M/B\r\n */\r\nexport const formatLargeCurrency = (amount, currency = 'USD') => {\r\n  const absAmount = Math.abs(amount);\r\n  if (absAmount >= 1e9) {\r\n    return `${formatCurrency(amount / 1e9, currency)}B`;\r\n  }\r\n  if (absAmount >= 1e6) {\r\n    return `${formatCurrency(amount / 1e6, currency)}M`;\r\n  }\r\n  if (absAmount >= 1e3) {\r\n    return `${formatCurrency(amount / 1e3, currency)}K`;\r\n  }\r\n  return formatCurrency(amount, currency);\r\n};\r\n\r\n/**\r\n * Calculate running total\r\n */\r\nexport const calculateRunningTotal = (transactions = []) => {\r\n  let total = 0;\r\n  return transactions.map(transaction => {\r\n    total += parseFloat(transaction.amount) || 0;\r\n    return {\r\n      ...transaction,\r\n      runningTotal: roundToDecimals(total),\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * Format currency difference (for profit/loss)\r\n */\r\nexport const formatCurrencyDifference = (amount, currency = 'USD') => {\r\n  const prefix = amount >= 0 ? '+' : '';\r\n  return `${prefix}${formatCurrency(amount, currency)}`;\r\n};\r\n\r\n/**\r\n * Calculate weighted average price\r\n */\r\nexport const calculateWeightedAverage = (items = []) => {\r\n  const totalValue = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n\r\n  const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);\r\n\r\n  if (totalQuantity === 0) return 0;\r\n  return roundToDecimals(totalValue / totalQuantity);\r\n};\r\n\r\n/**\r\n * Format money range\r\n */\r\nexport const formatMoneyRange = (min, max, currency = 'USD') => {\r\n  if (min === max) {\r\n    return formatCurrency(min, currency);\r\n  }\r\n  return `${formatCurrency(min, currency)} - ${formatCurrency(max, currency)}`;\r\n};\r\n\r\n/**\r\n * Calculate cost basis\r\n */\r\nexport const calculateCostBasis = (purchases = []) => purchases.reduce((total, purchase) => {\r\n    const cost = parseFloat(purchase.price) || 0;\r\n    const quantity = parseFloat(purchase.quantity) || 0;\r\n    return total + cost * quantity;\r\n  }, 0);\r\n\r\n/**\r\n * Format currency for CSV export\r\n */\r\nexport const formatCurrencyForExport = (amount, currency = 'USD') => ({\r\n    amount: roundToDecimals(amount),\r\n    formatted: formatCurrency(amount, currency),\r\n    currency,\r\n    raw: amount,\r\n  });\r\n\r\n/**\r\n * Calculate profit margin\r\n */\r\nexport const calculateProfitMargin = (revenue, cost) => {\r\n  if (revenue === 0) return 0;\r\n  return roundToDecimals(((revenue - cost) / revenue) * 100);\r\n};\r\n\r\n/**\r\n * Calculate markup percentage\r\n */\r\nexport const calculateMarkup = (sellingPrice, cost) => {\r\n  if (cost === 0) return 0;\r\n  return roundToDecimals(((sellingPrice - cost) / cost) * 100);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}