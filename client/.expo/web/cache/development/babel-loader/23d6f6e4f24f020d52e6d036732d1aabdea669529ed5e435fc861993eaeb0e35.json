{"ast":null,"code":"import { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nfunction logFirebaseStatus(message) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(`[Firebase] ${message}`, data);\n}\nvar getEnvVar = function getEnvVar(key) {\n  var value;\n  var source = 'not found';\n  try {\n    if (typeof process !== 'undefined' && process.env && process.env[key]) {\n      value = process.env[key];\n      source = 'process.env';\n    } else if (typeof window !== 'undefined' && window.__FIREBASE_CONFIG__ && window.__FIREBASE_CONFIG__[key.replace('REACT_APP_FIREBASE_', '').replace('_', '')]) {\n      var windowKey = key.replace('REACT_APP_FIREBASE_', '').replace('_', '');\n      value = window.__FIREBASE_CONFIG__[windowKey];\n      source = 'window.__FIREBASE_CONFIG__';\n    }\n    if (value) {\n      if (key.includes('API_KEY') || key.includes('APP_ID')) {\n        var masked = value.length > 6 ? `${value.substring(0, 3)}...${value.substring(value.length - 3)}` : '***';\n        console.log(`[Firebase] ${key}: ${masked} (from ${source})`);\n      } else {\n        console.log(`[Firebase] ${key}: Value found (from ${source})`);\n      }\n    } else {\n      console.warn(`[Firebase] ${key}: No value found (from ${source})`);\n    }\n    return value;\n  } catch (error) {\n    console.error(`[Firebase] Error accessing environment variable ${key}:`, error);\n    return undefined;\n  }\n};\nvar hardcodedDevConfig = {};\nlogFirebaseStatus(\"Collecting Firebase configuration from environment variables\");\nvar firebaseConfig = {\n  apiKey: getEnvVar('REACT_APP_FIREBASE_API_KEY') || hardcodedDevConfig.apiKey,\n  authDomain: getEnvVar('REACT_APP_FIREBASE_AUTH_DOMAIN') || hardcodedDevConfig.authDomain,\n  projectId: getEnvVar('REACT_APP_FIREBASE_PROJECT_ID') || hardcodedDevConfig.projectId,\n  storageBucket: getEnvVar('REACT_APP_FIREBASE_STORAGE_BUCKET') || hardcodedDevConfig.storageBucket,\n  messagingSenderId: getEnvVar('REACT_APP_FIREBASE_MESSAGING_SENDER_ID') || hardcodedDevConfig.messagingSenderId,\n  appId: getEnvVar('REACT_APP_FIREBASE_APP_ID') || hardcodedDevConfig.appId,\n  measurementId: getEnvVar('REACT_APP_FIREBASE_MEASUREMENT_ID') || hardcodedDevConfig.measurementId\n};\nvar hasMinConfig = firebaseConfig.apiKey && firebaseConfig.authDomain && firebaseConfig.projectId;\nif (!hasMinConfig) {\n  logFirebaseStatus(\"WARNING: Missing required Firebase configuration. Check environment variables and webpack configuration\");\n  var missingKeys = Object.keys(firebaseConfig).filter(function (key) {\n    return !firebaseConfig[key];\n  }).map(function (key) {\n    return key === 'apiKey' ? 'REACT_APP_FIREBASE_API_KEY' : key === 'authDomain' ? 'REACT_APP_FIREBASE_AUTH_DOMAIN' : key === 'projectId' ? 'REACT_APP_FIREBASE_PROJECT_ID' : key === 'storageBucket' ? 'REACT_APP_FIREBASE_STORAGE_BUCKET' : key === 'messagingSenderId' ? 'REACT_APP_FIREBASE_MESSAGING_SENDER_ID' : key === 'appId' ? 'REACT_APP_FIREBASE_APP_ID' : key === 'measurementId' ? 'REACT_APP_FIREBASE_MEASUREMENT_ID' : key;\n  });\n  logFirebaseStatus(`Missing environment variables: ${missingKeys.join(', ')}`);\n}\nvar app;\nvar auth;\nvar db;\nvar storage;\ntry {\n  logFirebaseStatus(\"Initializing Firebase app...\");\n  if (!hasMinConfig) {\n    throw new Error('Cannot initialize Firebase: missing required configuration');\n  }\n  if (!getApps().length) {\n    app = initializeApp(firebaseConfig);\n    logFirebaseStatus(\"Firebase app initialized successfully\");\n  } else {\n    logFirebaseStatus(\"Firebase app already initialized\");\n    app = getApps()[0];\n  }\n  try {\n    auth = getAuth(app);\n    logFirebaseStatus(\"Auth service initialized\");\n  } catch (authError) {\n    console.error('[Firebase] Auth service initialization failed:', authError);\n    if (authError.code === 'auth/invalid-api-key') {\n      console.error('[Firebase] Invalid API key. Please check REACT_APP_FIREBASE_API_KEY environment variable');\n    }\n  }\n  try {\n    db = getFirestore(app);\n    logFirebaseStatus(\"Firestore service initialized\");\n  } catch (dbError) {\n    console.error('[Firebase] Firestore service initialization failed:', dbError);\n  }\n  try {\n    storage = getStorage(app);\n    logFirebaseStatus(\"Storage service initialized\");\n  } catch (storageError) {\n    console.error('[Firebase] Storage service initialization failed:', storageError);\n  }\n  logFirebaseStatus(\"Firebase initialization process completed\");\n} catch (error) {\n  console.error('CRITICAL ERROR: Firebase initialization failed', error);\n  console.error('[Firebase] Initialization error details:', error);\n  if (process.env.NODE_ENV === 'development') {\n    console.warn('[Firebase] Using mock implementations for development');\n  }\n}\nexport { app, auth, db, storage };","map":{"version":3,"names":["initializeApp","getApps","getAuth","getFirestore","getStorage","logFirebaseStatus","message","data","arguments","length","undefined","console","log","getEnvVar","key","value","source","process","env","window","__FIREBASE_CONFIG__","replace","windowKey","includes","masked","substring","warn","error","hardcodedDevConfig","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","hasMinConfig","missingKeys","Object","keys","filter","map","join","app","auth","db","storage","Error","authError","code","dbError","storageError","NODE_ENV"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/config/firebase.js"],"sourcesContent":["// Modified as part of build error fix task on 2025-05-08, 3:26:04 AM\r\n// Implemented safe environment variable access mechanism to prevent \"process is not defined\" errors.\r\n// Enhanced logging and error handling for Firebase initialization.\r\n\r\nimport { initializeApp, getApps } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\n\r\n// --- Diagnostic Logging Function ---\r\nfunction logFirebaseStatus(message, data = {}) {\r\n  console.log(`[Firebase] ${message}`, data);\r\n}\r\n\r\n// --- Safe Environment Variable Access ---\r\n// This function safely accesses environment variables in both Node.js and browser contexts.\r\n// It checks if 'process' and 'process.env' are defined before accessing keys.\r\nconst getEnvVar = (key) => {\r\n  let value;\r\n  let source = 'not found';\r\n  \r\n  try {\r\n    // Safely check if process and process.env are defined\r\n    if (typeof process !== 'undefined' && process.env && process.env[key]) {\r\n      value = process.env[key];\r\n      source = 'process.env';\r\n    } else if (typeof window !== 'undefined' && window.__FIREBASE_CONFIG__ && window.__FIREBASE_CONFIG__[key.replace('REACT_APP_FIREBASE_', '').replace('_', '')]) {\r\n       // Try window.__FIREBASE_CONFIG__ as a fallback if needed (adjust key mapping if necessary)\r\n       const windowKey = key.replace('REACT_APP_FIREBASE_', '').replace('_', '');\r\n       value = window.__FIREBASE_CONFIG__[windowKey];\r\n       source = 'window.__FIREBASE_CONFIG__';\r\n    }\r\n    \r\n    // Log the environment variable (safely masked for sensitive values)\r\n    if (value) {\r\n      if (key.includes('API_KEY') || key.includes('APP_ID')) {\r\n        // Mask sensitive values in logs\r\n        const masked = value.length > 6 \r\n          ? `${value.substring(0, 3)}...${value.substring(value.length - 3)}`\r\n          : '***';\r\n        console.log(`[Firebase] ${key}: ${masked} (from ${source})`);\r\n      } else {\r\n        console.log(`[Firebase] ${key}: Value found (from ${source})`);\r\n      }\r\n    } else {\r\n      console.warn(`[Firebase] ${key}: No value found (from ${source})`);\r\n    }\r\n    \r\n    return value;\r\n  } catch (error) {\r\n    // If any error occurs during access, log it and return undefined\r\n    console.error(`[Firebase] Error accessing environment variable ${key}:`, error);\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// Explicit hardcoded configuration as absolute fallback (get from Firebase console)\r\n// ONLY USE THIS IN DEVELOPMENT, AND DO NOT COMMIT API KEYS TO VERSION CONTROL\r\nconst hardcodedDevConfig = {\r\n  // apiKey: \"YOUR_FIREBASE_API_KEY\",\r\n  // authDomain: \"YOUR_FIREBASE_AUTH_DOMAIN\",\r\n  // projectId: \"YOUR_FIREBASE_PROJECT_ID\",\r\n  // storageBucket: \"YOUR_FIREBASE_STORAGE_BUCKET\",\r\n  // messagingSenderId: \"YOUR_FIREBASE_MESSAGING_SENDER_ID\",\r\n  // appId: \"YOUR_FIREBASE_APP_ID\",\r\n  // measurementId: \"YOUR_FIREBASE_MEASUREMENT_ID\"\r\n};\r\n\r\n// --- Initialize Firebase Configuration ---\r\n// Extract configuration from environment variables using the safe access function\r\nlogFirebaseStatus(\"Collecting Firebase configuration from environment variables\");\r\n\r\nconst firebaseConfig = {\r\n  apiKey: getEnvVar('REACT_APP_FIREBASE_API_KEY') || hardcodedDevConfig.apiKey,\r\n  authDomain: getEnvVar('REACT_APP_FIREBASE_AUTH_DOMAIN') || hardcodedDevConfig.authDomain,\r\n  projectId: getEnvVar('REACT_APP_FIREBASE_PROJECT_ID') || hardcodedDevConfig.projectId,\r\n  storageBucket: getEnvVar('REACT_APP_FIREBASE_STORAGE_BUCKET') || hardcodedDevConfig.storageBucket,\r\n  messagingSenderId: getEnvVar('REACT_APP_FIREBASE_MESSAGING_SENDER_ID') || hardcodedDevConfig.messagingSenderId,\r\n  appId: getEnvVar('REACT_APP_FIREBASE_APP_ID') || hardcodedDevConfig.appId,\r\n  measurementId: getEnvVar('REACT_APP_FIREBASE_MEASUREMENT_ID') || hardcodedDevConfig.measurementId\r\n};\r\n\r\n// Check if we have minimum required configuration\r\nconst hasMinConfig = firebaseConfig.apiKey && \r\n                     firebaseConfig.authDomain && \r\n                     firebaseConfig.projectId;\r\n\r\nif (!hasMinConfig) {\r\n  logFirebaseStatus(\"WARNING: Missing required Firebase configuration. Check environment variables and webpack configuration\");\r\n  \r\n  // Log which specific values are missing to help with debugging\r\n  const missingKeys = Object.keys(firebaseConfig)\r\n    .filter(key => !firebaseConfig[key])\r\n    .map(key => key === 'apiKey' ? 'REACT_APP_FIREBASE_API_KEY' : \r\n                key === 'authDomain' ? 'REACT_APP_FIREBASE_AUTH_DOMAIN' : \r\n                key === 'projectId' ? 'REACT_APP_FIREBASE_PROJECT_ID' : \r\n                key === 'storageBucket' ? 'REACT_APP_FIREBASE_STORAGE_BUCKET' : \r\n                key === 'messagingSenderId' ? 'REACT_APP_FIREBASE_MESSAGING_SENDER_ID' : \r\n                key === 'appId' ? 'REACT_APP_FIREBASE_APP_ID' : \r\n                key === 'measurementId' ? 'REACT_APP_FIREBASE_MEASUREMENT_ID' : key);\r\n  \r\n  logFirebaseStatus(`Missing environment variables: ${missingKeys.join(', ')}`);\r\n}\r\n\r\n// --- Initialize Firebase Services ---\r\nlet app;\r\nlet auth;\r\nlet db;\r\nlet storage;\r\n\r\ntry {\r\n  logFirebaseStatus(\"Initializing Firebase app...\");\r\n  \r\n  if (!hasMinConfig) {\r\n    throw new Error('Cannot initialize Firebase: missing required configuration');\r\n  }\r\n  \r\n  // Check if Firebase is already initialized\r\n  if (!getApps().length) {\r\n    app = initializeApp(firebaseConfig);\r\n    logFirebaseStatus(\"Firebase app initialized successfully\");\r\n  } else {\r\n    logFirebaseStatus(\"Firebase app already initialized\");\r\n    app = getApps()[0];\r\n  }\r\n\r\n  // Initialize services with individual error handling\r\n  try {\r\n    auth = getAuth(app);\r\n    logFirebaseStatus(\"Auth service initialized\");\r\n  } catch (authError) {\r\n    console.error('[Firebase] Auth service initialization failed:', authError);\r\n    // Provide more details about the error\r\n    if (authError.code === 'auth/invalid-api-key') {\r\n      console.error('[Firebase] Invalid API key. Please check REACT_APP_FIREBASE_API_KEY environment variable');\r\n    }\r\n  }\r\n\r\n  try {\r\n    db = getFirestore(app);\r\n    logFirebaseStatus(\"Firestore service initialized\");\r\n  } catch (dbError) {\r\n    console.error('[Firebase] Firestore service initialization failed:', dbError);\r\n  }\r\n\r\n  try {\r\n    storage = getStorage(app);\r\n    logFirebaseStatus(\"Storage service initialized\");\r\n  } catch (storageError) {\r\n    console.error('[Firebase] Storage service initialization failed:', storageError);\r\n  }\r\n\r\n  logFirebaseStatus(\"Firebase initialization process completed\");\r\n\r\n} catch (error) {\r\n  console.error('CRITICAL ERROR: Firebase initialization failed', error);\r\n  console.error('[Firebase] Initialization error details:', error);\r\n  \r\n  // Optional: Set up mock implementations for development if Firebase fails\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.warn('[Firebase] Using mock implementations for development');\r\n    // Set up mock implementations here if needed\r\n    // Example: auth = { currentUser: null, onAuthStateChanged: () => () => {} };\r\n  }\r\n  // Re-throw the error to halt the application if initialization is critical\r\n  // throw error;\r\n}\r\n\r\n// Export Firebase services\r\nexport { app, auth, db, storage };\r\n// Export default for backward compatibility (optional, depending on usage)\r\n// export default firebaseConfig; // Removed as config is now accessed via getEnvVar and firebaseConfig object is internal\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}