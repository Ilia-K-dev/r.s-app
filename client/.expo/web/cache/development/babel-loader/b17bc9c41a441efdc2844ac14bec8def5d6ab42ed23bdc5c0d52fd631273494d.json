{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport { testComponent, displayTestResults } from \"./componentTester\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var runComponentTest = function runComponentTest(Component) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  console.log(`Testing component ${Component.name || 'Unknown'}`);\n  var _testComponent = testComponent(Component, props),\n    TestWrapper = _testComponent.TestWrapper,\n    getResults = _testComponent.getResults;\n  try {\n    var element = _jsx(TestWrapper, {});\n    var results = getResults();\n    if (options.logResults !== false) {\n      displayTestResults(results);\n    }\n    return _objectSpread(_objectSpread({}, results), {}, {\n      componentName: Component.name || 'Unknown'\n    });\n  } catch (error) {\n    console.error('Error in test runner:', error);\n    return {\n      passed: false,\n      errors: [error.message],\n      warnings: [],\n      log: [],\n      componentName: Component.name || 'Unknown'\n    };\n  }\n};\nexport var runTestSuite = function runTestSuite(componentMap) {\n  var propsMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var results = {\n    total: Object.keys(componentMap).length,\n    passed: 0,\n    failed: 0,\n    componentResults: {}\n  };\n  console.log(`Running test suite with ${results.total} components`);\n  Object.entries(componentMap).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      Component = _ref2[1];\n    var props = propsMap[name] || {};\n    var componentResult = runComponentTest(Component, props, {\n      logResults: false\n    });\n    results.componentResults[name] = componentResult;\n    if (componentResult.passed) {\n      results.passed += 1;\n    } else {\n      results.failed += 1;\n    }\n  });\n  console.log(`=== TEST SUITE RESULTS ===`);\n  console.log(`Total components: ${results.total}`);\n  console.log(`Passed: ${results.passed}`);\n  console.log(`Failed: ${results.failed}`);\n  if (results.failed > 0) {\n    console.log(`\\nFailed components:`);\n    Object.entries(results.componentResults).filter(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        _ = _ref4[0],\n        result = _ref4[1];\n      return !result.passed;\n    }).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        name = _ref6[0],\n        result = _ref6[1];\n      console.log(`- ${name}: ${result.errors.length} errors`);\n    });\n  }\n  return results;\n};\nwindow.testComponent = function (componentPath) {\n  try {\n    import(`../../../${componentPath}`).then(function (module) {\n      var Component = module.default;\n      runComponentTest(Component);\n    }).catch(function (error) {\n      console.error(`Failed to import component from path: ${componentPath}`, error);\n    });\n  } catch (error) {\n    console.error(`Error testing component: ${error.message}`);\n  }\n};","map":{"version":3,"names":["React","testComponent","displayTestResults","jsx","_jsx","runComponentTest","Component","props","arguments","length","undefined","options","console","log","name","_testComponent","TestWrapper","getResults","element","results","logResults","_objectSpread","componentName","error","passed","errors","message","warnings","runTestSuite","componentMap","propsMap","total","Object","keys","failed","componentResults","entries","forEach","_ref","_ref2","_slicedToArray","componentResult","filter","_ref3","_ref4","_","result","_ref5","_ref6","window","componentPath","then","module","default","catch"],"sources":["C:/Users/user/Documents/app.v3/client/src/utils/testing/testRunner.js"],"sourcesContent":["/**\r\n * testRunner.js\r\n * Last Modified: 5/22/2025 12:34 AM\r\n * Modified By: Cline\r\n * \r\n * Purpose: Provides functions to test components programmatically\r\n * Changes Made: Created new test runner utility\r\n * Reasoning: To enable component testing without deployment\r\n */\r\n\r\nimport React from 'react';\r\nimport { testComponent, displayTestResults } from './componentTester';\r\n\r\n/**\r\n * Tests a component and returns results\r\n * @param {React.Component} Component - Component to test\r\n * @param {Object} props - Props to pass to component\r\n * @param {Object} options - Test options\r\n * @returns {Object} - Test results\r\n */\r\nexport const runComponentTest = (Component, props = {}, options = {}) => {\r\n  console.log(`Testing component ${Component.name || 'Unknown'}`);\r\n  \r\n  const { TestWrapper, getResults } = testComponent(Component, props);\r\n  \r\n  try {\r\n    // Create component (doesn't actually render to DOM)\r\n    const element = <TestWrapper />;\r\n    const results = getResults();\r\n    \r\n    // Display results to console if requested\r\n    if (options.logResults !== false) {\r\n      displayTestResults(results);\r\n    }\r\n    \r\n    return {\r\n      ...results,\r\n      componentName: Component.name || 'Unknown'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in test runner:', error);\r\n    return {\r\n      passed: false,\r\n      errors: [error.message],\r\n      warnings: [],\r\n      log: [],\r\n      componentName: Component.name || 'Unknown'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Tests multiple components and aggregates results\r\n * @param {Object} componentMap - Map of component names to components\r\n * @param {Object} propsMap - Map of component names to props\r\n * @returns {Object} - Aggregated test results\r\n */\r\nexport const runTestSuite = (componentMap, propsMap = {}) => {\r\n  const results = {\r\n    total: Object.keys(componentMap).length,\r\n    passed: 0,\r\n    failed: 0,\r\n    componentResults: {}\r\n  };\r\n  \r\n  console.log(`Running test suite with ${results.total} components`);\r\n  \r\n  Object.entries(componentMap).forEach(([name, Component]) => {\r\n    const props = propsMap[name] || {};\r\n    const componentResult = runComponentTest(Component, props, { logResults: false });\r\n    \r\n    results.componentResults[name] = componentResult;\r\n    \r\n    if (componentResult.passed) {\r\n      results.passed += 1;\r\n    } else {\r\n      results.failed += 1;\r\n    }\r\n  });\r\n  \r\n  // Log summary\r\n  console.log(`=== TEST SUITE RESULTS ===`);\r\n  console.log(`Total components: ${results.total}`);\r\n  console.log(`Passed: ${results.passed}`);\r\n  console.log(`Failed: ${results.failed}`);\r\n  \r\n  if (results.failed > 0) {\r\n    console.log(`\\nFailed components:`);\r\n    Object.entries(results.componentResults)\r\n      .filter(([_, result]) => !result.passed)\r\n      .forEach(([name, result]) => {\r\n        console.log(`- ${name}: ${result.errors.length} errors`);\r\n      });\r\n  }\r\n  \r\n  return results;\r\n};\r\n\r\n// Export a simple testing function that can be used directly in the console\r\nwindow.testComponent = (componentPath) => {\r\n  try {\r\n    // Dynamic import - note this will only work for components exported as default\r\n    import(`../../../${componentPath}`)\r\n      .then(module => {\r\n        const Component = module.default;\r\n        runComponentTest(Component);\r\n      })\r\n      .catch(error => {\r\n        console.error(`Failed to import component from path: ${componentPath}`, error);\r\n      });\r\n  } catch (error) {\r\n    console.error(`Error testing component: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}