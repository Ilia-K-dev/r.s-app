{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { collection, query, where, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc, orderBy, limit, startAfter } from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\nimport { db, storage, auth } from \"../../../core/config/firebase\";\nimport { handleError } from \"../../../utils/errorHandler\";\nimport { isFeatureEnabled, startPerformanceTimer, stopPerformanceTimer } from \"../../../core/config/featureFlags\";\nvar FIREBASE_DIRECT_INTEGRATION_FLAG = 'firebaseDirectIntegration';\nvar getCurrentUserId = function getCurrentUserId() {\n  var user = auth.currentUser;\n  if (!user) {\n    throw handleError(new Error('User not authenticated'), 'Receipt Service');\n  }\n  return user.uid;\n};\nvar getReceiptsApi = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    console.log('Calling API for getReceipts', {\n      userId: userId,\n      options: options\n    });\n    startPerformanceTimer(`getReceiptsApi`);\n    try {\n      var result = {\n        receipts: [],\n        lastVisible: null\n      };\n      stopPerformanceTimer(`getReceiptsApi`);\n      return result;\n    } catch (error) {\n      stopPerformanceTimer(`getReceiptsApi`);\n      throw error;\n    }\n  });\n  return function getReceiptsApi(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getReceiptByIdApi = function () {\n  var _ref2 = _asyncToGenerator(function* (userId, id) {\n    console.log('Calling API for getReceiptById', {\n      userId: userId,\n      id: id\n    });\n    startPerformanceTimer(`getReceiptByIdApi`);\n    try {\n      var result = null;\n      stopPerformanceTimer(`getReceiptByIdApi`);\n      return result;\n    } catch (error) {\n      stopPerformanceTimer(`getReceiptByIdApi`);\n      throw error;\n    }\n  });\n  return function getReceiptByIdApi(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar createReceiptApi = function () {\n  var _ref3 = _asyncToGenerator(function* (userId, receiptData) {\n    var imageFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    console.log('Calling API for createReceipt', {\n      userId: userId,\n      receiptData: receiptData,\n      imageFile: imageFile\n    });\n    startPerformanceTimer(`createReceiptApi`);\n    try {\n      var result = _objectSpread({\n        id: 'dummy-api-id'\n      }, receiptData);\n      stopPerformanceTimer(`createReceiptApi`);\n      return result;\n    } catch (error) {\n      stopPerformanceTimer(`createReceiptApi`);\n      throw error;\n    }\n  });\n  return function createReceiptApi(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar updateReceiptApi = function () {\n  var _ref4 = _asyncToGenerator(function* (userId, receiptId, updateData) {\n    var newImageFile = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    console.log('Calling API for updateReceipt', {\n      userId: userId,\n      receiptId: receiptId,\n      updateData: updateData,\n      newImageFile: newImageFile\n    });\n    startPerformanceTimer(`updateReceiptApi`);\n    try {\n      stopPerformanceTimer(`updateReceiptApi`);\n    } catch (error) {\n      stopPerformanceTimer(`updateReceiptApi`);\n      throw error;\n    }\n  });\n  return function updateReceiptApi(_x6, _x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar deleteReceiptApi = function () {\n  var _ref5 = _asyncToGenerator(function* (userId, receiptId) {\n    console.log('Calling API for deleteReceipt', {\n      userId: userId,\n      receiptId: receiptId\n    });\n    startPerformanceTimer(`deleteReceiptApi`);\n    try {\n      stopPerformanceTimer(`deleteReceiptApi`);\n    } catch (error) {\n      stopPerformanceTimer(`deleteReceiptApi`);\n      throw error;\n    }\n  });\n  return function deleteReceiptApi(_x9, _x0) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar correctReceiptApi = function () {\n  var _ref6 = _asyncToGenerator(function* (userId, receiptId, correctedData) {\n    console.log('Calling API for correctReceipt', {\n      userId: userId,\n      receiptId: receiptId,\n      correctedData: correctedData\n    });\n    startPerformanceTimer(`correctReceiptApi`);\n    try {\n      stopPerformanceTimer(`correctReceiptApi`);\n    } catch (error) {\n      stopPerformanceTimer(`correctReceiptApi`);\n      throw error;\n    }\n  });\n  return function correctReceiptApi(_x1, _x10, _x11) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var receiptApi = {\n  getReceipts: function () {\n    var _getReceipts = _asyncToGenerator(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var userId = getCurrentUserId();\n      if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n        startPerformanceTimer(`getReceipts_Firebase`);\n        try {\n          console.log('Attempting Firebase for getReceipts');\n          var receiptsCollection = collection(db, 'receipts');\n          var q = query(receiptsCollection, where('userId', '==', userId));\n          if (options.category) {\n            q = query(q, where('category', '==', options.category));\n          }\n          if (options.dateRange) {\n            q = query(q, where('date', '>=', options.dateRange.start), where('date', '<=', options.dateRange.end));\n          }\n          q = query(q, orderBy('date', 'desc'));\n          if (options.limit) {\n            q = query(q, limit(options.limit));\n          }\n          if (options.startAfterDoc) {\n            q = query(q, startAfter(options.startAfterDoc));\n          }\n          var querySnapshot = yield getDocs(q);\n          var receipts = querySnapshot.docs.map(function (doc) {\n            return _objectSpread({\n              id: doc.id\n            }, doc.data());\n          });\n          var lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1];\n          stopPerformanceTimer(`getReceipts_Firebase`);\n          return {\n            receipts: receipts,\n            lastVisible: lastVisible\n          };\n        } catch (error) {\n          console.warn('Firebase operation failed for getReceipts. Attempting API fallback.', error);\n          stopPerformanceTimer(`getReceipts_Firebase`);\n          handleError(error, 'Receipt Service - getReceipts', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          return getReceiptsApi(userId, options);\n        }\n      } else {\n        console.log('Firebase direct integration disabled. Calling API for getReceipts.');\n        return getReceiptsApi(userId, options);\n      }\n    });\n    function getReceipts() {\n      return _getReceipts.apply(this, arguments);\n    }\n    return getReceipts;\n  }(),\n  getReceiptById: function () {\n    var _getReceiptById = _asyncToGenerator(function* (id) {\n      var userId = getCurrentUserId();\n      if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n        startPerformanceTimer(`getReceiptById_Firebase`);\n        try {\n          console.log('Attempting Firebase for getReceiptById');\n          var receiptDocRef = doc(db, 'receipts', id);\n          var docSnapshot = yield getDoc(receiptDocRef);\n          if (docSnapshot.exists() && docSnapshot.data().userId === userId) {\n            stopPerformanceTimer(`getReceiptById_Firebase`);\n            return _objectSpread({\n              id: docSnapshot.id\n            }, docSnapshot.data());\n          } else {\n            stopPerformanceTimer(`getReceiptById_Firebase`);\n            return null;\n          }\n        } catch (error) {\n          console.warn('Firebase operation failed for getReceiptById. Attempting API fallback.', error);\n          stopPerformanceTimer(`getReceiptById_Firebase`);\n          handleError(error, 'Receipt Service - getReceiptById', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          return getReceiptByIdApi(userId, id);\n        }\n      } else {\n        console.log('Firebase direct integration disabled. Calling API for getReceiptById.');\n        return getReceiptByIdApi(userId, id);\n      }\n    });\n    function getReceiptById(_x12) {\n      return _getReceiptById.apply(this, arguments);\n    }\n    return getReceiptById;\n  }(),\n  createReceipt: function () {\n    var _createReceipt = _asyncToGenerator(function* (receiptData) {\n      var imageFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var userId = getCurrentUserId();\n      if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n        startPerformanceTimer(`createReceipt_Firebase`);\n        try {\n          console.log('Attempting Firebase for createReceipt');\n          var receiptsCollection = collection(db, 'receipts');\n          var dataToSave = _objectSpread(_objectSpread({}, receiptData), {}, {\n            userId: userId,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n          var newReceiptRef = yield addDoc(receiptsCollection, dataToSave);\n          var newReceiptId = newReceiptRef.id;\n          var imageUrl = null;\n          if (imageFile) {\n            var storageRef = ref(storage, `receipts/${userId}/${newReceiptId}/${imageFile.name}`);\n            var uploadTask = yield uploadBytes(storageRef, imageFile);\n            imageUrl = yield getDownloadURL(uploadTask.ref);\n            yield updateDoc(newReceiptRef, {\n              imageUrl: imageUrl\n            });\n          }\n          var createdDoc = yield getDoc(newReceiptRef);\n          stopPerformanceTimer(`createReceipt_Firebase`);\n          return _objectSpread({\n            id: createdDoc.id\n          }, createdDoc.data());\n        } catch (error) {\n          console.warn('Firebase operation failed for createReceipt. Attempting API fallback.', error);\n          stopPerformanceTimer(`createReceipt_Firebase`);\n          handleError(error, 'Receipt Service - createReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          return createReceiptApi(userId, receiptData, imageFile);\n        }\n      } else {\n        console.log('Firebase direct integration disabled. Calling API for createReceipt.');\n        return createReceiptApi(userId, receiptData, imageFile);\n      }\n    });\n    function createReceipt(_x13) {\n      return _createReceipt.apply(this, arguments);\n    }\n    return createReceipt;\n  }(),\n  updateReceipt: function () {\n    var _updateReceipt = _asyncToGenerator(function* (receiptId, updateData) {\n      var newImageFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var userId = getCurrentUserId();\n      if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n        startPerformanceTimer(`updateReceipt_Firebase`);\n        try {\n          console.log('Attempting Firebase for updateReceipt');\n          var receiptDocRef = doc(db, 'receipts', receiptId);\n          var docSnapshot = yield getDoc(receiptDocRef);\n          if (!docSnapshot.exists() || docSnapshot.data().userId !== userId) {\n            throw handleError(new Error('Receipt not found or unauthorized'), 'Receipt Service - updateReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          }\n          var dataToUpdate = _objectSpread(_objectSpread({}, updateData), {}, {\n            updatedAt: new Date()\n          });\n          var imageUrl = updateData.imageUrl;\n          if (newImageFile) {\n            if (docSnapshot.data().imageUrl) {\n              try {\n                var oldImageUrl = docSnapshot.data().imageUrl;\n                var oldImageRef = ref(storage, oldImageUrl);\n                yield deleteObject(oldImageRef);\n                console.log('Old image deleted successfully');\n              } catch (deleteError) {\n                console.warn('Failed to delete old image:', deleteError);\n                handleError(deleteError, 'Receipt Service - updateReceipt (delete old image)');\n              }\n            }\n            var storageRef = ref(storage, `receipts/${userId}/${receiptId}/${newImageFile.name}`);\n            var uploadTask = yield uploadBytes(storageRef, newImageFile);\n            imageUrl = yield getDownloadURL(uploadTask.ref);\n            dataToUpdate.imageUrl = imageUrl;\n          } else if (updateData.imageUrl === null) {\n            if (docSnapshot.data().imageUrl) {\n              try {\n                var _oldImageUrl = docSnapshot.data().imageUrl;\n                var _oldImageRef = ref(storage, _oldImageUrl);\n                yield deleteObject(_oldImageRef);\n                console.log('Image deleted successfully');\n              } catch (deleteError) {\n                console.warn('Failed to delete image:', deleteError);\n                handleError(deleteError, 'Receipt Service - updateReceipt (delete image)');\n              }\n            }\n            dataToUpdate.imageUrl = null;\n          }\n          yield updateDoc(receiptDocRef, dataToUpdate);\n          stopPerformanceTimer(`updateReceipt_Firebase`);\n        } catch (error) {\n          console.warn('Firebase operation failed for updateReceipt. Attempting API fallback.', error);\n          stopPerformanceTimer(`updateReceipt_Firebase`);\n          handleError(error, 'Receipt Service - updateReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          return updateReceiptApi(userId, receiptId, updateData, newImageFile);\n        }\n      } else {\n        console.log('Firebase direct integration disabled. Calling API for updateReceipt.');\n        return updateReceiptApi(userId, receiptId, updateData, newImageFile);\n      }\n    });\n    function updateReceipt(_x14, _x15) {\n      return _updateReceipt.apply(this, arguments);\n    }\n    return updateReceipt;\n  }(),\n  deleteReceipt: function () {\n    var _deleteReceipt = _asyncToGenerator(function* (receiptId) {\n      var userId = getCurrentUserId();\n      if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n        startPerformanceTimer(`deleteReceipt_Firebase`);\n        try {\n          console.log('Attempting Firebase for deleteReceipt');\n          var receiptDocRef = doc(db, 'receipts', receiptId);\n          var docSnapshot = yield getDoc(receiptDocRef);\n          if (!docSnapshot.exists() || docSnapshot.data().userId !== userId) {\n            throw handleError(new Error('Receipt not found or unauthorized'), 'Receipt Service - deleteReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          }\n          var imageUrl = docSnapshot.data().imageUrl;\n          yield deleteDoc(receiptDocRef);\n          if (imageUrl) {\n            try {\n              var imageRef = ref(storage, imageUrl);\n              yield deleteObject(imageRef);\n              console.log('Associated image deleted successfully');\n            } catch (storageError) {\n              console.warn('Failed to delete associated image from Storage:', storageError);\n              handleError(storageError, 'Receipt Service - deleteReceipt (delete image)');\n            }\n          }\n          stopPerformanceTimer(`deleteReceipt_Firebase`);\n        } catch (error) {\n          console.warn('Firebase operation failed for deleteReceipt. Attempting API fallback.', error);\n          stopPerformanceTimer(`deleteReceipt_Firebase`);\n          handleError(error, 'Receipt Service - deleteReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          return deleteReceiptApi(userId, receiptId);\n        }\n      } else {\n        console.log('Firebase direct integration disabled. Calling API for deleteReceipt.');\n        return deleteReceiptApi(userId, receiptId);\n      }\n    });\n    function deleteReceipt(_x16) {\n      return _deleteReceipt.apply(this, arguments);\n    }\n    return deleteReceipt;\n  }(),\n  correctReceipt: function () {\n    var _correctReceipt = _asyncToGenerator(function* (receiptId, correctedData) {\n      var userId = getCurrentUserId();\n      if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n        startPerformanceTimer(`correctReceipt_Firebase`);\n        try {\n          console.log('Attempting Firebase for correctReceipt');\n          var receiptDocRef = doc(db, 'receipts', receiptId);\n          var docSnapshot = yield getDoc(receiptDocRef);\n          if (!docSnapshot.exists() || docSnapshot.data().userId !== userId) {\n            throw handleError(new Error('Receipt not found or unauthorized'), 'Receipt Service - correctReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          }\n          var dataToUpdate = _objectSpread(_objectSpread({}, correctedData), {}, {\n            updatedAt: new Date()\n          });\n          yield updateDoc(receiptDocRef, dataToUpdate);\n          stopPerformanceTimer(`correctReceipt_Firebase`);\n        } catch (error) {\n          console.warn('Firebase operation failed for correctReceipt. Attempting API fallback.', error);\n          stopPerformanceTimer(`correctReceipt_Firebase`);\n          handleError(error, 'Receipt Service - correctReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\n          return correctReceiptApi(userId, receiptId, correctedData);\n        }\n      } else {\n        console.log('Firebase direct integration disabled. Calling API for correctReceipt.');\n        return correctReceiptApi(userId, receiptId, correctedData);\n      }\n    });\n    function correctReceipt(_x17, _x18) {\n      return _correctReceipt.apply(this, arguments);\n    }\n    return correctReceipt;\n  }()\n};\nexport default receiptApi;","map":{"version":3,"names":["collection","query","where","getDocs","doc","getDoc","addDoc","updateDoc","deleteDoc","orderBy","limit","startAfter","ref","uploadBytes","getDownloadURL","deleteObject","db","storage","auth","handleError","isFeatureEnabled","startPerformanceTimer","stopPerformanceTimer","FIREBASE_DIRECT_INTEGRATION_FLAG","getCurrentUserId","user","currentUser","Error","uid","getReceiptsApi","_ref","_asyncToGenerator","userId","options","arguments","length","undefined","console","log","result","receipts","lastVisible","error","_x","apply","getReceiptByIdApi","_ref2","id","_x2","_x3","createReceiptApi","_ref3","receiptData","imageFile","_objectSpread","_x4","_x5","updateReceiptApi","_ref4","receiptId","updateData","newImageFile","_x6","_x7","_x8","deleteReceiptApi","_ref5","_x9","_x0","correctReceiptApi","_ref6","correctedData","_x1","_x10","_x11","receiptApi","getReceipts","_getReceipts","receiptsCollection","q","category","dateRange","start","end","startAfterDoc","querySnapshot","docs","map","data","warn","getReceiptById","_getReceiptById","receiptDocRef","docSnapshot","exists","_x12","createReceipt","_createReceipt","dataToSave","createdAt","Date","updatedAt","newReceiptRef","newReceiptId","imageUrl","storageRef","name","uploadTask","createdDoc","_x13","updateReceipt","_updateReceipt","dataToUpdate","oldImageUrl","oldImageRef","deleteError","_x14","_x15","deleteReceipt","_deleteReceipt","imageRef","storageError","_x16","correctReceipt","_correctReceipt","_x17","_x18"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/receipts/services/receipts.js"],"sourcesContent":["// File: client/src/features/receipts/services/receipts.js\r\n// Date: 2025-05-18 05:38:05\r\n// Description: Service for managing receipts using Firebase Firestore and Storage, with feature toggle for API fallback, enhanced error handling, and basic performance tracking.\r\n// Reasoning: Refactored from Express backend API calls to direct Firebase SDK integration as per work plan, with feature toggle for safe rollout, integrated with enhanced error handling and performance monitoring.\r\n// Potential Optimizations: Implement real-time listeners for receipt lists where appropriate. Add more sophisticated error handling and fallback logic. Integrate with a proper analytics/performance monitoring platform.\r\n\r\nimport { collection, query, where, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc, orderBy, limit, startAfter } from 'firebase/firestore';\r\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\r\nimport { db, storage, auth } from '../../../core/config/firebase';\r\nimport { handleError } from '../../../utils/errorHandler'; // Import enhanced error handler\r\nimport { isFeatureEnabled, startPerformanceTimer, stopPerformanceTimer } from '../../../core/config/featureFlags'; // Import feature toggle and performance utilities\r\n\r\n// Feature flag name for Firebase direct integration\r\nconst FIREBASE_DIRECT_INTEGRATION_FLAG = 'firebaseDirectIntegration';\r\n\r\n// Get current authenticated user's UID\r\nconst getCurrentUserId = () => {\r\n  const user = auth.currentUser;\r\n  if (!user) {\r\n    // This should ideally not happen if routes are protected, but handle defensively\r\n    // Use the generic handleError\r\n    throw handleError(new Error('User not authenticated'), 'Receipt Service');\r\n  }\r\n  return user.uid;\r\n};\r\n\r\n// --- API-based Implementations (Placeholders) ---\r\n// These functions represent the original API calls to the Express backend.\r\n// They are included here as placeholders for the fallback mechanism.\r\n// TODO: Replace with actual API call logic when needed.\r\n\r\nconst getReceiptsApi = async (userId, options = {}) => {\r\n  console.log('Calling API for getReceipts', { userId, options });\r\n  startPerformanceTimer(`getReceiptsApi`); // Start timer for API call\r\n  try {\r\n    // Placeholder: Simulate API call\r\n    // throw new Error('API implementation not yet available for getReceipts');\r\n    const result = { receipts: [], lastVisible: null }; // Return dummy data for now\r\n    stopPerformanceTimer(`getReceiptsApi`); // Stop timer on success\r\n    return result;\r\n  } catch (error) {\r\n    stopPerformanceTimer(`getReceiptsApi`); // Stop timer on error\r\n    throw error; // Re-throw after stopping timer\r\n  }\r\n};\r\n\r\nconst getReceiptByIdApi = async (userId, id) => {\r\n  console.log('Calling API for getReceiptById', { userId, id });\r\n  startPerformanceTimer(`getReceiptByIdApi`); // Start timer for API call\r\n  try {\r\n    // Placeholder: Simulate API call\r\n    // throw new Error('API implementation not yet available for getReceiptById');\r\n    const result = null; // Return dummy data for now\r\n    stopPerformanceTimer(`getReceiptByIdApi`); // Stop timer on success\r\n    return result;\r\n  } catch (error) {\r\n    stopPerformanceTimer(`getReceiptByIdApi`); // Stop timer on error\r\n    throw error; // Re-throw after stopping timer\r\n  }\r\n};\r\n\r\nconst createReceiptApi = async (userId, receiptData, imageFile = null) => {\r\n  console.log('Calling API for createReceipt', { userId, receiptData, imageFile });\r\n  startPerformanceTimer(`createReceiptApi`); // Start timer for API call\r\n  try {\r\n    // Placeholder: Simulate API call\r\n    // throw new Error('API implementation not yet available for createReceipt');\r\n    const result = { id: 'dummy-api-id', ...receiptData }; // Return dummy data for now\r\n    stopPerformanceTimer(`createReceiptApi`); // Stop timer on success\r\n    return result;\r\n  } catch (error) {\r\n    stopPerformanceTimer(`createReceiptApi`); // Stop timer on error\r\n    throw error; // Re-throw after stopping timer\r\n  }\r\n};\r\n\r\nconst updateReceiptApi = async (userId, receiptId, updateData, newImageFile = null) => {\r\n  console.log('Calling API for updateReceipt', { userId, receiptId, updateData, newImageFile });\r\n  startPerformanceTimer(`updateReceiptApi`); // Start timer for API call\r\n  try {\r\n    // Placeholder: Simulate API call\r\n    // throw new Error('API implementation not yet available for updateReceipt');\r\n    stopPerformanceTimer(`updateReceiptApi`); // Stop timer on success\r\n  } catch (error) {\r\n    stopPerformanceTimer(`updateReceiptApi`); // Stop timer on error\r\n    throw error; // Re-throw after stopping timer\r\n  }\r\n};\r\n\r\nconst deleteReceiptApi = async (userId, receiptId) => {\r\n  console.log('Calling API for deleteReceipt', { userId, receiptId });\r\n  startPerformanceTimer(`deleteReceiptApi`); // Start timer for API call\r\n  try {\r\n    // Placeholder: Simulate API call\r\n    // throw new Error('API implementation not yet available for deleteReceipt');\r\n    stopPerformanceTimer(`deleteReceiptApi`); // Stop timer on success\r\n  } catch (error) {\r\n    stopPerformanceTimer(`deleteReceiptApi`); // Stop timer on error\r\n    throw error; // Re-throw after stopping timer\r\n  }\r\n};\r\n\r\nconst correctReceiptApi = async (userId, receiptId, correctedData) => {\r\n  console.log('Calling API for correctReceipt', { userId, receiptId, correctedData });\r\n  startPerformanceTimer(`correctReceiptApi`); // Start timer for API call\r\n  try {\r\n    // Placeholder: Simulate API call\r\n    // throw new Error('API implementation not yet available for correctReceipt');\r\n    stopPerformanceTimer(`correctReceiptApi`); // Stop timer on success\r\n  } catch (error) {\r\n    stopPerformanceTimer(`correctReceiptApi`); // Stop timer on error\r\n    throw error; // Re-throw after stopping timer\r\n  }\r\n};\r\n\r\n\r\n// --- Feature-Toggled Receipt Service ---\r\n\r\nexport const receiptApi = {\r\n  /**\r\n   * Fetches receipts with filtering and pagination. Uses Firebase or API based on feature toggle.\r\n   * Implements fallback to API if Firebase operation fails and toggle is enabled.\r\n   * @param {object} [options] - Options for filtering and pagination (category, dateRange, limit, startAfterDoc, etc.).\r\n   * @returns {Promise<object>} - Paginated list of receipts and pagination info.\r\n   */\r\n  getReceipts: async (options = {}) => {\r\n    const userId = getCurrentUserId();\r\n\r\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n      startPerformanceTimer(`getReceipts_Firebase`); // Start timer for Firebase call\r\n      try {\r\n        console.log('Attempting Firebase for getReceipts');\r\n        const receiptsCollection = collection(db, 'receipts');\r\n\r\n        let q = query(receiptsCollection, where('userId', '==', userId));\r\n\r\n        // Add filters based on options\r\n        if (options.category) {\r\n          q = query(q, where('category', '==', options.category));\r\n        }\r\n        if (options.dateRange) {\r\n          // Assuming dateRange is { start: Timestamp, end: Timestamp }\r\n          q = query(q, where('date', '>=', options.dateRange.start), where('date', '<=', options.dateRange.end));\r\n        }\r\n\r\n        // Add sorting (assuming sorting by date descending by default)\r\n        q = query(q, orderBy('date', 'desc'));\r\n\r\n        // Add pagination\r\n        if (options.limit) {\r\n          q = query(q, limit(options.limit));\r\n        }\r\n        if (options.startAfterDoc) {\r\n          q = query(q, startAfter(options.startAfterDoc));\r\n        }\r\n\r\n        const querySnapshot = await getDocs(q);\r\n        const receipts = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n\r\n        const lastVisible = querySnapshot.docs[querySnapshot.docs.length - 1];\r\n\r\n        stopPerformanceTimer(`getReceipts_Firebase`); // Stop timer on success\r\n        return {\r\n          receipts,\r\n          lastVisible,\r\n        };\r\n\r\n      } catch (error) {\r\n        console.warn('Firebase operation failed for getReceipts. Attempting API fallback.', error);\r\n        stopPerformanceTimer(`getReceipts_Firebase`); // Stop timer on error\r\n        // Use the enhanced error handler with feature flag context\r\n        handleError(error, 'Receipt Service - getReceipts', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        // Fallback to API\r\n        return getReceiptsApi(userId, options);\r\n      }\r\n    } else {\r\n      console.log('Firebase direct integration disabled. Calling API for getReceipts.');\r\n      // Use API implementation directly if feature is disabled\r\n      return getReceiptsApi(userId, options);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Gets a single receipt by ID. Uses Firebase or API based on feature toggle.\r\n   * Implements fallback to API if Firebase operation fails and toggle is enabled.\r\n   * @param {string} id - The ID of the receipt.\r\n   * @returns {Promise<object|null>} - The receipt data or null if not found/not owned.\r\n   */\r\n  getReceiptById: async (id) => {\r\n    const userId = getCurrentUserId();\r\n\r\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n      startPerformanceTimer(`getReceiptById_Firebase`); // Start timer for Firebase call\r\n      try {\r\n        console.log('Attempting Firebase for getReceiptById');\r\n        const receiptDocRef = doc(db, 'receipts', id);\r\n        const docSnapshot = await getDoc(receiptDocRef);\r\n\r\n        if (docSnapshot.exists() && docSnapshot.data().userId === userId) {\r\n          stopPerformanceTimer(`getReceiptById_Firebase`); // Stop timer on success\r\n          return { id: docSnapshot.id, ...docSnapshot.data() };\r\n        } else {\r\n          stopPerformanceTimer(`getReceiptById_Firebase`); // Stop timer on not found/unauthorized\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.warn('Firebase operation failed for getReceiptById. Attempting API fallback.', error);\r\n        stopPerformanceTimer(`getReceiptById_Firebase`); // Stop timer on error\r\n        // Use the enhanced error handler with feature flag context\r\n        handleError(error, 'Receipt Service - getReceiptById', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        // Fallback to API\r\n        return getReceiptByIdApi(userId, id);\r\n      }\r\n    } else {\r\n      console.log('Firebase direct integration disabled. Calling API for getReceiptById.');\r\n      // Use API implementation directly\r\n      return getReceiptByIdApi(userId, id);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Creates a new receipt. Uses Firebase or API based on feature toggle.\r\n   * Implements fallback to API if Firebase operation fails and toggle is enabled.\r\n   * @param {object} receiptData - The receipt data (excluding image file, include userId).\r\n   * @param {File} [imageFile] - The image file to upload.\r\n   * @returns {Promise<object>} - The created receipt data with ID.\r\n   */\r\n  createReceipt: async (receiptData, imageFile = null) => {\r\n    const userId = getCurrentUserId();\r\n\r\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n      startPerformanceTimer(`createReceipt_Firebase`); // Start timer for Firebase call\r\n      try {\r\n        console.log('Attempting Firebase for createReceipt');\r\n        const receiptsCollection = collection(db, 'receipts');\r\n\r\n        const dataToSave = {\r\n          ...receiptData,\r\n          userId: userId,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n        };\r\n\r\n        const newReceiptRef = await addDoc(receiptsCollection, dataToSave);\r\n        const newReceiptId = newReceiptRef.id;\r\n\r\n        let imageUrl = null;\r\n        if (imageFile) {\r\n          const storageRef = ref(storage, `receipts/${userId}/${newReceiptId}/${imageFile.name}`);\r\n          const uploadTask = await uploadBytes(storageRef, imageFile);\r\n          imageUrl = await getDownloadURL(uploadTask.ref);\r\n          await updateDoc(newReceiptRef, { imageUrl: imageUrl });\r\n        }\r\n\r\n        const createdDoc = await getDoc(newReceiptRef);\r\n        stopPerformanceTimer(`createReceipt_Firebase`); // Stop timer on success\r\n        return { id: createdDoc.id, ...createdDoc.data() };\r\n\r\n      } catch (error) {\r\n        console.warn('Firebase operation failed for createReceipt. Attempting API fallback.', error);\r\n        stopPerformanceTimer(`createReceipt_Firebase`); // Stop timer on error\r\n        // Use the enhanced error handler with feature flag context\r\n        handleError(error, 'Receipt Service - createReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        // Fallback to API\r\n        return createReceiptApi(userId, receiptData, imageFile);\r\n      }\r\n    } else {\r\n      console.log('Firebase direct integration disabled. Calling API for createReceipt.');\r\n      // Use API implementation directly\r\n      return createReceiptApi(userId, receiptData, imageFile);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Updates an existing receipt. Uses Firebase or API based on feature toggle.\r\n   * Implements fallback to API if Firebase operation fails and toggle is enabled.\r\n   * @param {string} receiptId - The ID of the receipt to update.\r\n   * @param {object} updateData - The update data for the receipt (excluding new image file).\r\n   * @param {File} [newImageFile] - A new image file to upload for the receipt.\r\n   * @returns {Promise<void>}\r\n   */\r\n  updateReceipt: async (receiptId, updateData, newImageFile = null) => {\r\n    const userId = getCurrentUserId();\r\n\r\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n      startPerformanceTimer(`updateReceipt_Firebase`); // Start timer for Firebase call\r\n      try {\r\n        console.log('Attempting Firebase for updateReceipt');\r\n        const receiptDocRef = doc(db, 'receipts', receiptId);\r\n\r\n        const docSnapshot = await getDoc(receiptDocRef);\r\n        if (!docSnapshot.exists() || docSnapshot.data().userId !== userId) {\r\n           throw handleError(new Error('Receipt not found or unauthorized'), 'Receipt Service - updateReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        }\r\n\r\n        const dataToUpdate = {\r\n          ...updateData,\r\n          updatedAt: new Date(),\r\n        };\r\n\r\n        let imageUrl = updateData.imageUrl;\r\n\r\n        if (newImageFile) {\r\n          if (docSnapshot.data().imageUrl) {\r\n             try {\r\n               const oldImageUrl = docSnapshot.data().imageUrl;\r\n               const oldImageRef = ref(storage, oldImageUrl);\r\n               await deleteObject(oldImageRef);\r\n               console.log('Old image deleted successfully');\r\n             } catch (deleteError) {\r\n               console.warn('Failed to delete old image:', deleteError);\r\n               // Log the delete error but don't necessarily fail the update operation\r\n               handleError(deleteError, 'Receipt Service - updateReceipt (delete old image)');\r\n             }\r\n          }\r\n\r\n          const storageRef = ref(storage, `receipts/${userId}/${receiptId}/${newImageFile.name}`);\r\n          const uploadTask = await uploadBytes(storageRef, newImageFile);\r\n          imageUrl = await getDownloadURL(uploadTask.ref);\r\n          dataToUpdate.imageUrl = imageUrl;\r\n        } else if (updateData.imageUrl === null) {\r\n           if (docSnapshot.data().imageUrl) {\r\n              try {\r\n                const oldImageUrl = docSnapshot.data().imageUrl;\r\n                const oldImageRef = ref(storage, oldImageUrl);\r\n                await deleteObject(oldImageRef);\r\n                console.log('Image deleted successfully');\r\n              } catch (deleteError) {\r\n                console.warn('Failed to delete image:', deleteError);\r\n                // Log the delete error but don't necessarily fail the update operation\r\n                handleError(deleteError, 'Receipt Service - updateReceipt (delete image)');\r\n              }\r\n           }\r\n           dataToUpdate.imageUrl = null;\r\n        }\r\n\r\n        await updateDoc(receiptDocRef, dataToUpdate);\r\n        stopPerformanceTimer(`updateReceipt_Firebase`); // Stop timer on success\r\n\r\n      } catch (error) {\r\n        console.warn('Firebase operation failed for updateReceipt. Attempting API fallback.', error);\r\n        stopPerformanceTimer(`updateReceipt_Firebase`); // Stop timer on error\r\n        // Use the enhanced error handler with feature flag context\r\n        handleError(error, 'Receipt Service - updateReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        // Fallback to API\r\n        return updateReceiptApi(userId, receiptId, updateData, newImageFile);\r\n      }\r\n    } else {\r\n      console.log('Firebase direct integration disabled. Calling API for updateReceipt.');\r\n      // Use API implementation directly\r\n      return updateReceiptApi(userId, receiptId, updateData, newImageFile);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Deletes a receipt. Uses Firebase or API based on feature toggle.\r\n   * Implements fallback to API if Firebase operation fails and toggle is enabled.\r\n   * @param {string} receiptId - The ID of the receipt to delete.\r\n   * @returns {Promise<void>}\r\n   */\r\n  deleteReceipt: async (receiptId) => {\r\n    const userId = getCurrentUserId();\r\n\r\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n      startPerformanceTimer(`deleteReceipt_Firebase`); // Start timer for Firebase call\r\n      try {\r\n        console.log('Attempting Firebase for deleteReceipt');\r\n        const receiptDocRef = doc(db, 'receipts', receiptId);\r\n\r\n        const docSnapshot = await getDoc(receiptDocRef);\r\n        if (!docSnapshot.exists() || docSnapshot.data().userId !== userId) {\r\n           throw handleError(new Error('Receipt not found or unauthorized'), 'Receipt Service - deleteReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        }\r\n\r\n        const imageUrl = docSnapshot.data().imageUrl;\r\n\r\n        await deleteDoc(receiptDocRef);\r\n\r\n        if (imageUrl) {\r\n          try {\r\n            const imageRef = ref(storage, imageUrl);\r\n            await deleteObject(imageRef);\r\n            console.log('Associated image deleted successfully');\r\n          } catch (storageError) {\r\n            console.warn('Failed to delete associated image from Storage:', storageError);\r\n            // Log the storage error but don't necessarily fail the delete operation\r\n            handleError(storageError, 'Receipt Service - deleteReceipt (delete image)');\r\n          }\r\n        }\r\n        stopPerformanceTimer(`deleteReceipt_Firebase`); // Stop timer on success\r\n\r\n      } catch (error) {\r\n        console.warn('Firebase operation failed for deleteReceipt. Attempting API fallback.', error);\r\n        stopPerformanceTimer(`deleteReceipt_Firebase`); // Stop timer on error\r\n        // Use the enhanced error handler with feature flag context\r\n        handleError(error, 'Receipt Service - deleteReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n        // Fallback to API\r\n        return deleteReceiptApi(userId, receiptId);\r\n      }\r\n    } else {\r\n      console.log('Firebase direct integration disabled. Calling API for deleteReceipt.');\r\n      // Use API implementation directly\r\n      return deleteReceiptApi(userId, receiptId);\r\n    }\r\n  },\r\n\r\n   /**\r\n   * Submits corrected data for a receipt. Uses Firebase or API based on feature toggle.\r\n   * Implements fallback to API if Firebase operation fails and toggle is enabled.\r\n   * @param {string} receiptId - The ID of the receipt to correct.\r\n   * @param {object} correctedData - The corrected data.\r\n   * @returns {Promise<void>}\r\n   */\r\n  correctReceipt: async (receiptId, correctedData) => {\r\n     const userId = getCurrentUserId();\r\n\r\n     if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n       startPerformanceTimer(`correctReceipt_Firebase`); // Start timer for Firebase call\r\n       try {\r\n         console.log('Attempting Firebase for correctReceipt');\r\n         const receiptDocRef = doc(db, 'receipts', receiptId);\r\n\r\n         const docSnapshot = await getDoc(receiptDocRef);\r\n         if (!docSnapshot.exists() || docSnapshot.data().userId !== userId) {\r\n            throw handleError(new Error('Receipt not found or unauthorized'), 'Receipt Service - correctReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n         }\r\n\r\n         const dataToUpdate = {\r\n           ...correctedData,\r\n           updatedAt: new Date(),\r\n         };\r\n\r\n         await updateDoc(receiptDocRef, dataToUpdate);\r\n         stopPerformanceTimer(`correctReceipt_Firebase`); // Stop timer on success\r\n\r\n       } catch (error) {\r\n         console.warn('Firebase operation failed for correctReceipt. Attempting API fallback.', error);\r\n         stopPerformanceTimer(`correctReceipt_Firebase`); // Stop timer on error\r\n         // Use the enhanced error handler with feature flag context\r\n         handleError(error, 'Receipt Service - correctReceipt', FIREBASE_DIRECT_INTEGRATION_FLAG);\r\n         // Fallback to API\r\n         return correctReceiptApi(userId, receiptId, correctedData);\r\n       }\r\n     } else {\r\n       console.log('Firebase direct integration disabled. Calling API for correctReceipt.');\r\n       // Use API implementation directly\r\n       return correctReceiptApi(userId, receiptId, correctedData);\r\n     }\r\n   }\r\n};\r\n\r\nexport default receiptApi;\r\n\r\n// Add comments about how the fallback mechanism works, enhanced error handling, and performance tracking\r\n// The fallback mechanism is implemented within each service function.\r\n// It checks if the Firebase direct integration feature flag is enabled.\r\n// If enabled, it first attempts the Firebase operation. If the Firebase operation\r\n// throws an error, it catches the error, logs a warning, uses the enhanced `handleError`\r\n// utility to log the error with feature flag context and potentially trigger automatic\r\n// flag disabling, and then calls the corresponding API-based implementation as a fallback.\r\n// If the feature flag is disabled, the API-based implementation is called directly.\r\n// This provides a basic level of resilience and allows for a smooth transition.\r\n// Enhanced Error Handling: Errors are now processed by the `handleError` utility, which logs the error with context and the state of the associated feature flag. This utility also implements the automatic disabling logic based on consecutive errors for the feature flag.\r\n// Performance Tracking: Basic performance timers are started before feature-flagged operations (both Firebase and API calls) and stopped upon completion or error. The duration is logged to the console, providing basic telemetry for comparing the performance of different implementations. This should be integrated with a proper performance monitoring platform for production use.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}