{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport { inventoryService } from \"../services/inventoryService\";\nimport { useToast } from \"../../../shared/hooks/useToast\";\nexport var useStockManagement = function useStockManagement() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var _useToast = useToast(),\n    showToast = _useToast.showToast;\n  var updateStock = function () {\n    var _ref = _asyncToGenerator(function* (itemId, quantity, action) {\n      try {\n        setLoading(true);\n        setError(null);\n        yield inventoryService.updateStock(itemId, quantity);\n        showToast('Stock updated successfully', 'success');\n      } catch (error) {\n        setError(error.message);\n        showToast(error.message, 'error');\n        console.error('Error updating stock:', error);\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function updateStock(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    loading: loading,\n    error: error,\n    updateStock: updateStock\n  };\n};\nexport default useStockManagement;","map":{"version":3,"names":["useState","inventoryService","useToast","useStockManagement","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","_useToast","showToast","updateStock","_ref","_asyncToGenerator","itemId","quantity","action","message","console","_x","_x2","_x3","apply","arguments"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/inventory/hooks/useStockManagement.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { inventoryService } from '../services/inventoryService';\r\nimport { useToast } from '../../../shared/hooks/useToast';\r\n\r\nexport const useStockManagement = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { showToast } = useToast();\r\n\r\n  const updateStock = async (itemId, quantity, action) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Call the inventory service to update stock\r\n      await inventoryService.updateStock(itemId, quantity);\r\n\r\n      showToast('Stock updated successfully', 'success');\r\n    } catch (error) {\r\n      setError(error.message);\r\n      showToast(error.message, 'error');\r\n      console.error('Error updating stock:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    updateStock,\r\n  };\r\n};\r\n\r\nexport default useStockManagement;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,gBAAgB;AACzB,SAASC,QAAQ;AAEjB,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EACtC,IAAAC,SAAA,GAA8BJ,QAAQ,CAAC,KAAK,CAAC;IAAAK,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAAI,UAAA,GAA0BT,QAAQ,CAAC,IAAI,CAAC;IAAAU,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EACtB,IAAAG,SAAA,GAAsBX,QAAQ,CAAC,CAAC;IAAxBY,SAAS,GAAAD,SAAA,CAATC,SAAS;EAEjB,IAAMC,WAAW;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAK;MACtD,IAAI;QACFZ,UAAU,CAAC,IAAI,CAAC;QAChBI,QAAQ,CAAC,IAAI,CAAC;QAGd,MAAMX,gBAAgB,CAACc,WAAW,CAACG,MAAM,EAAEC,QAAQ,CAAC;QAEpDL,SAAS,CAAC,4BAA4B,EAAE,SAAS,CAAC;MACpD,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACU,OAAO,CAAC;QACvBP,SAAS,CAACH,KAAK,CAACU,OAAO,EAAE,OAAO,CAAC;QACjCC,OAAO,CAACX,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,MAAMA,KAAK;MACb,CAAC,SAAS;QACRH,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAAA,gBAjBKO,WAAWA,CAAAQ,EAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAT,IAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;EAAA,GAiBhB;EAED,OAAO;IACLpB,OAAO,EAAPA,OAAO;IACPI,KAAK,EAALA,KAAK;IACLI,WAAW,EAAXA;EACF,CAAC;AACH,CAAC;AAED,eAAeZ,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}