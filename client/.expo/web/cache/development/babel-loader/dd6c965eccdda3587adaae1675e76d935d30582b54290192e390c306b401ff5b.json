{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport axios from 'axios';\nimport { API_URL } from \"../../../core/config/api.config\";\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { collection, addDoc } from 'firebase/firestore';\nimport { db, storage, auth } from \"../../../core/config/firebase\";\nimport { isFeatureEnabled } from \"../../../core/config/featureFlags\";\nimport { handleFirebaseError } from \"../../../utils/errorHandler\";\nimport { processImage } from \"../utils/imageProcessing\";\nvar FIREBASE_DIRECT_INTEGRATION_FLAG = 'firebaseDirectIntegration';\nvar getCurrentUserId = function getCurrentUserId() {\n  var user = auth.currentUser;\n  if (!user) {\n    throw handleFirebaseError(new Error('User not authenticated'), 'Document Processing Service');\n  }\n  return user.uid;\n};\nvar uploadDocumentApi = function () {\n  var _ref = _asyncToGenerator(function* (file, userId, documentType) {\n    console.log('Calling API for uploadDocument', {\n      userId: userId,\n      documentType: documentType\n    });\n    var formData = new FormData();\n    formData.append('document', file);\n    formData.append('documentType', documentType);\n    try {\n      var response = yield axios.post(`${API_URL}/api/documents/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.data && response.data.imageUrl) {\n        return {\n          imageUrl: response.data.imageUrl\n        };\n      } else {\n        throw new Error('Backend did not return the image URL after API upload.');\n      }\n    } catch (error) {\n      console.error('Error uploading document via API:', error);\n      throw handleFirebaseError(error, 'Upload Document API');\n    }\n  });\n  return function uploadDocumentApi(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar processDocumentApi = function () {\n  var _ref2 = _asyncToGenerator(function* (documentId) {\n    console.log('Calling API for processDocument', {\n      documentId: documentId\n    });\n    return {\n      documentId: documentId,\n      processed: true\n    };\n  });\n  return function processDocumentApi(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getDocumentTextApi = function () {\n  var _ref3 = _asyncToGenerator(function* (documentId) {\n    console.log('Calling API for getDocumentText', {\n      documentId: documentId\n    });\n    return {\n      text: 'Dummy extracted text from API'\n    };\n  });\n  return function getDocumentTextApi(_x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar classifyDocumentApi = function () {\n  var _ref4 = _asyncToGenerator(function* (documentId) {\n    console.log('Calling API for classifyDocument', {\n      documentId: documentId\n    });\n    return {\n      classification: 'generic',\n      confidence: 0.5\n    };\n  });\n  return function classifyDocumentApi(_x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar uploadDocument = function () {\n  var _ref5 = _asyncToGenerator(function* (file, documentType) {\n    var userId = getCurrentUserId();\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n      try {\n        console.log('Attempting Firebase Storage upload for document');\n        var storageRef = ref(storage, `documents/${userId}/${file.name}`);\n        var uploadTask = yield uploadBytes(storageRef, file);\n        var imageUrl = yield getDownloadURL(uploadTask.ref);\n        console.log('Attempting Firestore metadata creation for document');\n        var documentsCollection = collection(db, 'documents');\n        var docMetadata = {\n          userId: userId,\n          fileName: file.name,\n          imageUrl: imageUrl,\n          uploadDate: new Date(),\n          documentType: documentType,\n          status: 'uploaded'\n        };\n        var newDocRef = yield addDoc(documentsCollection, docMetadata);\n        return _objectSpread({\n          id: newDocRef.id\n        }, docMetadata);\n      } catch (error) {\n        console.warn('Firebase operation failed for uploadDocument. Attempting API fallback.', error);\n        handleFirebaseError(error, 'Upload Document Firebase');\n        return uploadDocumentApi(file, userId, documentType);\n      }\n    } else {\n      console.log('Firebase direct integration disabled. Calling API for uploadDocument.');\n      return uploadDocumentApi(file, userId, documentType);\n    }\n  });\n  return function uploadDocument(_x7, _x8) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar processDocument = function () {\n  var _ref6 = _asyncToGenerator(function* (documentId) {\n    var userId = getCurrentUserId();\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n      try {\n        console.log(`Attempting Firebase Cloud Function call for processDocument ${documentId}`);\n        console.log(`Simulating successful Firebase Cloud Function call for processDocument ${documentId}`);\n      } catch (error) {\n        console.warn(`Firebase operation failed for processDocument ${documentId}. Attempting API fallback.`, error);\n        handleFirebaseError(error, 'Document Processing Service - processDocument Firebase');\n        return processDocumentApi(documentId);\n      }\n    } else {\n      console.log(`Firebase direct integration disabled. Calling API for processDocument ${documentId}.`);\n      return processDocumentApi(documentId);\n    }\n  });\n  return function processDocument(_x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar getDocumentText = function () {\n  var _ref7 = _asyncToGenerator(function* (documentId) {\n    var userId = getCurrentUserId();\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n      try {\n        console.log(`Attempting Firestore retrieval for document text ${documentId}`);\n        var documentDocRef = doc(db, 'documents', documentId);\n        var docSnapshot = yield getDoc(documentDocRef);\n        if (docSnapshot.exists() && docSnapshot.data().userId === userId) {\n          var data = docSnapshot.data();\n          if (data.extractedText) {\n            return {\n              text: data.extractedText\n            };\n          } else {\n            console.warn(`No extracted text found in Firestore for document ${documentId}.`);\n            return {\n              text: ''\n            };\n          }\n        } else {\n          console.warn(`Document ${documentId} not found or unauthorized in Firestore.`);\n          return getDocumentTextApi(documentId);\n        }\n      } catch (error) {\n        console.warn(`Firebase operation failed for getDocumentText ${documentId}. Attempting API fallback.`, error);\n        handleFirebaseError(error, 'Document Processing Service - getDocumentText Firebase');\n        return getDocumentTextApi(documentId);\n      }\n    } else {\n      console.log(`Firebase direct integration disabled. Calling API for getDocumentText ${documentId}.`);\n      return getDocumentTextApi(documentId);\n    }\n  });\n  return function getDocumentText(_x0) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar classifyDocument = function () {\n  var _ref8 = _asyncToGenerator(function* (documentId) {\n    var userId = getCurrentUserId();\n    if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\n      try {\n        console.log(`Attempting Firestore retrieval for document classification ${documentId}`);\n        var documentDocRef = doc(db, 'documents', documentId);\n        var docSnapshot = yield getDoc(documentDocRef);\n        if (docSnapshot.exists() && docSnapshot.data().userId === userId) {\n          var data = docSnapshot.data();\n          if (data.classification && data.confidence !== undefined) {\n            return {\n              classification: data.classification,\n              confidence: data.confidence\n            };\n          } else {\n            console.warn(`No classification data found in Firestore for document ${documentId}.`);\n            return {\n              classification: 'unknown',\n              confidence: 0\n            };\n          }\n        } else {\n          console.warn(`Document ${documentId} not found or unauthorized in Firestore.`);\n          return classifyDocumentApi(documentId);\n        }\n      } catch (error) {\n        console.warn(`Firebase operation failed for classifyDocument ${documentId}. Attempting API fallback.`, error);\n        handleFirebaseError(error, 'Document Processing Service - classifyDocument Firebase');\n        return classifyDocumentApi(documentId);\n      }\n    } else {\n      console.log(`Firebase direct integration disabled. Calling API for classifyDocument ${documentId}.`);\n      return classifyDocumentApi(documentId);\n    }\n  });\n  return function classifyDocument(_x1) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var documentProcessingService = {\n  preprocessImage: preprocessImage,\n  uploadDocument: uploadDocument,\n  processDocument: processDocument,\n  getDocumentText: getDocumentText,\n  classifyDocument: classifyDocument,\n  uploadDocumentApi: uploadDocumentApi,\n  processDocumentApi: processDocumentApi,\n  getDocumentTextApi: getDocumentTextApi,\n  classifyDocumentApi: classifyDocumentApi\n};","map":{"version":3,"names":["axios","API_URL","ref","uploadBytes","getDownloadURL","collection","addDoc","db","storage","auth","isFeatureEnabled","handleFirebaseError","processImage","FIREBASE_DIRECT_INTEGRATION_FLAG","getCurrentUserId","user","currentUser","Error","uid","uploadDocumentApi","_ref","_asyncToGenerator","file","userId","documentType","console","log","formData","FormData","append","response","post","headers","data","imageUrl","error","_x","_x2","_x3","apply","arguments","processDocumentApi","_ref2","documentId","processed","_x4","getDocumentTextApi","_ref3","text","_x5","classifyDocumentApi","_ref4","classification","confidence","_x6","uploadDocument","_ref5","storageRef","name","uploadTask","documentsCollection","docMetadata","fileName","uploadDate","Date","status","newDocRef","_objectSpread","id","warn","_x7","_x8","processDocument","_ref6","_x9","getDocumentText","_ref7","documentDocRef","doc","docSnapshot","getDoc","exists","extractedText","_x0","classifyDocument","_ref8","undefined","_x1","documentProcessingService","preprocessImage"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/services/documentProcessingService.js"],"sourcesContent":["// File: client/src/features/documents/services/documentProcessingService.js\r\n// Date: 2025-05-13 11:40:19\r\n// Description: Service for processing documents, with feature toggle for Firebase direct integration and API fallback.\r\n// Reasoning: Refactored to use Firebase Storage for uploads and client-side processing (OCR/Classification) as per work plan, with feature toggle for safe rollout.\r\n// Potential Optimizations: Implement progress tracking for Firebase Storage uploads. Refine error handling and fallback logic.\r\n\r\nimport axios from 'axios';\r\nimport { API_URL } from '../../../core/config/api.config';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage'; // Import Firebase Storage functions\r\nimport { collection, addDoc } from 'firebase/firestore'; // Import Firestore functions\r\nimport { db, storage, auth } from '../../../core/config/firebase'; // Import Firebase instances\r\nimport { isFeatureEnabled } from '../../../core/config/featureFlags'; // Import feature toggle utility\r\nimport { handleFirebaseError } from '../../../utils/errorHandler'; // Import error handler\r\nimport { processImage } from '../utils/imageProcessing'; // Keep image processing utility\r\n\r\n// Feature flag name for Firebase direct integration\r\nconst FIREBASE_DIRECT_INTEGRATION_FLAG = 'firebaseDirectIntegration';\r\n\r\n// Get current authenticated user's UID\r\nconst getCurrentUserId = () => {\r\n  const user = auth.currentUser;\r\n  if (!user) {\r\n    // This should ideally not happen if routes are protected, but handle defensively\r\n    throw handleFirebaseError(new Error('User not authenticated'), 'Document Processing Service');\r\n  }\r\n  return user.uid;\r\n};\r\n\r\n// --- API-based Implementations (Original) ---\r\n// These functions represent the original API calls to the Express backend.\r\n// They are kept here as fallback implementations.\r\n\r\nconst uploadDocumentApi = async (file, userId, documentType) => {\r\n  console.log('Calling API for uploadDocument', { userId, documentType });\r\n  const formData = new FormData();\r\n  formData.append('document', file);\r\n  formData.append('documentType', documentType);\r\n\r\n  try {\r\n    const response = await axios.post(`${API_URL}/api/documents/upload`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n\r\n    if (response.data && response.data.imageUrl) {\r\n      return { imageUrl: response.data.imageUrl };\r\n    } else {\r\n      throw new Error('Backend did not return the image URL after API upload.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error uploading document via API:', error);\r\n    throw handleFirebaseError(error, 'Upload Document API'); // Use error handler for API errors too\r\n  }\r\n};\r\n\r\nconst processDocumentApi = async (documentId) => {\r\n  console.log('Calling API for processDocument', { documentId });\r\n  // Placeholder: Simulate API call\r\n  // throw new Error('API implementation not yet available for processDocument');\r\n  return { documentId, processed: true }; // Return dummy data\r\n};\r\n\r\nconst getDocumentTextApi = async (documentId) => {\r\n  console.log('Calling API for getDocumentText', { documentId });\r\n  // Placeholder: Simulate API call\r\n  // throw new Error('API implementation not yet available for getDocumentText');\r\n  return { text: 'Dummy extracted text from API' }; // Return dummy data\r\n};\r\n\r\nconst classifyDocumentApi = async (documentId) => {\r\n  console.log('Calling API for classifyDocument', { documentId });\r\n  // Placeholder: Simulate API call\r\n  // throw new Error('API implementation not yet available for classifyDocument');\r\n  return { classification: 'generic', confidence: 0.5 }; // Return dummy data\r\n};\r\n\r\n\r\n// --- Feature-Toggled Document Processing Service ---\r\n\r\n/**\r\n * Uploads a document file to Firebase Storage and stores metadata in Firestore,\r\n * or uses the API fallback based on feature toggle.\r\n * @param {File} file - The file to upload.\r\n * @param {string} documentType - The type of document.\r\n * @returns {Promise<{id: string, imageUrl: string, fileName: string, uploadDate: Date, userId: string, documentType: string}>} - Uploaded document metadata.\r\n */\r\nconst uploadDocument = async (file, documentType) => {\r\n  const userId = getCurrentUserId();\r\n\r\n  if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n    try {\r\n      console.log('Attempting Firebase Storage upload for document');\r\n      const storageRef = ref(storage, `documents/${userId}/${file.name}`);\r\n      const uploadTask = await uploadBytes(storageRef, file);\r\n      const imageUrl = await getDownloadURL(uploadTask.ref);\r\n\r\n      console.log('Attempting Firestore metadata creation for document');\r\n      const documentsCollection = collection(db, 'documents');\r\n      const docMetadata = {\r\n        userId: userId,\r\n        fileName: file.name,\r\n        imageUrl: imageUrl,\r\n        uploadDate: new Date(), // Use client date for now, consider server timestamp\r\n        documentType: documentType,\r\n        status: 'uploaded', // Initial status\r\n        // Add other relevant metadata\r\n      };\r\n\r\n      const newDocRef = await addDoc(documentsCollection, docMetadata);\r\n\r\n      return { id: newDocRef.id, ...docMetadata };\r\n\r\n    } catch (error) {\r\n      console.warn('Firebase operation failed for uploadDocument. Attempting API fallback.', error);\r\n      // Use error handler for logging and potential automatic toggle disable\r\n      handleFirebaseError(error, 'Upload Document Firebase');\r\n      // Fallback to API\r\n      return uploadDocumentApi(file, userId, documentType);\r\n    }\r\n  } else {\r\n    console.log('Firebase direct integration disabled. Calling API for uploadDocument.');\r\n    // Use API implementation directly if feature is disabled\r\n    return uploadDocumentApi(file, userId, documentType);\r\n  }\r\n};\r\n\r\n// Feature-Toggled Document Processing Service Functions\r\n// These functions interact with Firebase Cloud Functions and Firestore for processing,\r\n// with a fallback to the original API implementations.\r\n\r\n/**\r\n * Triggers document processing via a Firebase Cloud Function.\r\n * @param {string} documentId - The ID of the document to process.\r\n * @returns {Promise<void>}\r\n */\r\nconst processDocument = async (documentId) => {\r\n  const userId = getCurrentUserId(); // Ensure user is authenticated\r\n\r\n  if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n    try {\r\n      console.log(`Attempting Firebase Cloud Function call for processDocument ${documentId}`);\r\n      // TODO: Replace with actual Firebase Cloud Function call\r\n      // Example: const processDocFunction = httpsCallable(functions, 'processDocument');\r\n      // await processDocFunction({ documentId: documentId, userId: userId });\r\n      console.log(`Simulating successful Firebase Cloud Function call for processDocument ${documentId}`);\r\n      // Assuming the Cloud Function updates the document status in Firestore upon completion\r\n      // No return value expected from this trigger function\r\n\r\n    } catch (error) {\r\n      console.warn(`Firebase operation failed for processDocument ${documentId}. Attempting API fallback.`, error);\r\n      handleFirebaseError(error, 'Document Processing Service - processDocument Firebase');\r\n      // Fallback to API\r\n      return processDocumentApi(documentId);\r\n    }\r\n  } else {\r\n    console.log(`Firebase direct integration disabled. Calling API for processDocument ${documentId}.`);\r\n    // Use API implementation directly if feature is disabled\r\n    return processDocumentApi(documentId);\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves extracted text for a document from Firestore.\r\n * @param {string} documentId - The ID of the document.\r\n * @returns {Promise<{text: string}>} - The extracted text.\r\n */\r\nconst getDocumentText = async (documentId) => {\r\n  const userId = getCurrentUserId(); // Ensure user is authenticated\r\n\r\n  if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n    try {\r\n      console.log(`Attempting Firestore retrieval for document text ${documentId}`);\r\n      const documentDocRef = doc(db, 'documents', documentId);\r\n      const docSnapshot = await getDoc(documentDocRef);\r\n\r\n      if (docSnapshot.exists() && docSnapshot.data().userId === userId) {\r\n        const data = docSnapshot.data();\r\n        // Assuming extracted text is stored in a field named 'extractedText'\r\n        if (data.extractedText) {\r\n          return { text: data.extractedText };\r\n        } else {\r\n          console.warn(`No extracted text found in Firestore for document ${documentId}.`);\r\n          return { text: '' }; // Return empty text if not found\r\n        }\r\n      } else {\r\n        console.warn(`Document ${documentId} not found or unauthorized in Firestore.`);\r\n        // If document not found or unauthorized in Firestore, attempt API fallback\r\n        return getDocumentTextApi(documentId);\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Firebase operation failed for getDocumentText ${documentId}. Attempting API fallback.`, error);\r\n      handleFirebaseError(error, 'Document Processing Service - getDocumentText Firebase');\r\n      // Fallback to API\r\n      return getDocumentTextApi(documentId);\r\n    }\r\n  } else {\r\n    console.log(`Firebase direct integration disabled. Calling API for getDocumentText ${documentId}.`);\r\n    // Use API implementation directly if feature is disabled\r\n    return getDocumentTextApi(documentId);\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves classification results for a document from Firestore.\r\n * @param {string} documentId - The ID of the document.\r\n * @returns {Promise<{classification: string, confidence: number}>} - The classification results.\r\n */\r\nconst classifyDocument = async (documentId) => {\r\n  const userId = getCurrentUserId(); // Ensure user is authenticated\r\n\r\n  if (isFeatureEnabled(FIREBASE_DIRECT_INTEGRATION_FLAG)) {\r\n    try {\r\n      console.log(`Attempting Firestore retrieval for document classification ${documentId}`);\r\n      const documentDocRef = doc(db, 'documents', documentId);\r\n      const docSnapshot = await getDoc(documentDocRef);\r\n\r\n      if (docSnapshot.exists() && docSnapshot.data().userId === userId) {\r\n        const data = docSnapshot.data();\r\n        // Assuming classification results are stored in fields named 'classification' and 'confidence'\r\n        if (data.classification && data.confidence !== undefined) {\r\n          return { classification: data.classification, confidence: data.confidence };\r\n        } else {\r\n          console.warn(`No classification data found in Firestore for document ${documentId}.`);\r\n          return { classification: 'unknown', confidence: 0 }; // Return default if not found\r\n        }\r\n      } else {\r\n        console.warn(`Document ${documentId} not found or unauthorized in Firestore.`);\r\n        // If document not found or unauthorized in Firestore, attempt API fallback\r\n        return classifyDocumentApi(documentId);\r\n      }\r\n    } catch (error) {\r\n      console.warn(`Firebase operation failed for classifyDocument ${documentId}. Attempting API fallback.`, error);\r\n      handleFirebaseError(error, 'Document Processing Service - classifyDocument Firebase');\r\n      // Fallback to API\r\n      return classifyDocumentApi(documentId);\r\n    }\r\n  } else {\r\n    console.log(`Firebase direct integration disabled. Calling API for classifyDocument ${documentId}.`);\r\n    // Use API implementation directly if feature is disabled\r\n    return classifyDocumentApi(documentId);\r\n  }\r\n};\r\n\r\n\r\nexport const documentProcessingService = {\r\n  preprocessImage,\r\n  uploadDocument, // Feature-toggled upload\r\n  processDocument, // Placeholder for client-side processing\r\n  getDocumentText, // Placeholder for client-side text retrieval\r\n  classifyDocument, // Placeholder for client-side classification\r\n  // Export API fallbacks for potential direct use or advanced fallback logic if needed\r\n  uploadDocumentApi,\r\n  processDocumentApi,\r\n  getDocumentTextApi,\r\n  classifyDocumentApi,\r\n};\r\n\r\n// Add comments about feature toggle integration details\r\n// Feature toggle integration: The `uploadDocument` function now checks the `firebaseDirectIntegration` feature flag.\r\n// If the flag is enabled, it attempts to use Firebase Storage and Firestore. If that fails, it falls back to the original API call.\r\n// If the flag is disabled, it bypasses the Firebase logic and calls the API directly.\r\n// Placeholder functions for `processDocument`, `getDocumentText`, and `classifyDocument` are included,\r\n// which will be updated in subsequent steps to implement client-side OCR and classification.\r\n// These placeholders also include basic feature toggle checks and API fallbacks.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}