{"ast":null,"code":"import React, { memo } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { formatCurrency } from \"../../../shared/utils/currency\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var SpendingTrends = memo(function (_ref) {\n  var _ref$data = _ref.data,\n    data = _ref$data === void 0 ? [] : _ref$data;\n  if (!data || data.length === 0) {\n    return _jsx(\"div\", {\n      className: \"h-full flex items-center justify-center text-gray-500\",\n      children: \"No data available\"\n    });\n  }\n  return _jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    children: _jsxs(BarChart, {\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [_jsx(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        stroke: \"#E5E7EB\"\n      }), _jsx(XAxis, {\n        dataKey: \"date\",\n        stroke: \"#6B7280\",\n        fontSize: 12\n      }), _jsx(YAxis, {\n        stroke: \"#6B7280\",\n        fontSize: 12,\n        tickFormatter: function tickFormatter(value) {\n          return formatCurrency(value);\n        }\n      }), _jsx(Tooltip, {\n        formatter: function formatter(value) {\n          return [formatCurrency(value), 'Amount'];\n        },\n        labelStyle: {\n          color: '#111827'\n        },\n        contentStyle: {\n          backgroundColor: '#FFFFFF',\n          border: '1px solid #E5E7EB',\n          borderRadius: '0.375rem',\n          padding: '0.5rem'\n        }\n      }), _jsx(Bar, {\n        dataKey: \"amount\",\n        fill: \"#8884d8\",\n        radius: [4, 4, 0, 0]\n      })]\n    })\n  });\n});\nexport default SpendingTrends;","map":{"version":3,"names":["React","memo","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","formatCurrency","jsx","_jsx","jsxs","_jsxs","SpendingTrends","_ref","_ref$data","data","length","className","children","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","fontSize","tickFormatter","value","formatter","labelStyle","color","contentStyle","backgroundColor","border","borderRadius","padding","fill","radius"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/components/SpendingTrends.js"],"sourcesContent":["import React, { memo } from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer\r\n} from 'recharts';\r\nimport { formatCurrency } from '../../../shared/utils/currency';\r\n// Assuming date formatting is handled by the backend or Recharts can handle the date format provided\r\n\r\nexport const SpendingTrends = memo(({ data = [] }) => {\r\n\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center text-gray-500\">\r\n        No data available\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <BarChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\r\n        <XAxis\r\n          dataKey=\"date\" // Assuming the backend provides 'date' field in the aggregated data\r\n          stroke=\"#6B7280\"\r\n          fontSize={12}\r\n          // Add tickFormatter if the date format from backend needs adjustment for display\r\n        />\r\n        <YAxis\r\n          stroke=\"#6B7280\"\r\n          fontSize={12}\r\n          tickFormatter={(value) => formatCurrency(value)}\r\n        />\r\n        <Tooltip\r\n          formatter={(value) => [formatCurrency(value), 'Amount']}\r\n          labelStyle={{ color: '#111827' }}\r\n          contentStyle={{\r\n            backgroundColor: '#FFFFFF',\r\n            border: '1px solid #E5E7EB',\r\n            borderRadius: '0.375rem',\r\n            padding: '0.5rem'\r\n          }}\r\n        />\r\n        <Bar\r\n          dataKey=\"amount\" // Assuming the backend provides 'amount' field in the aggregated data\r\n          fill=\"#8884d8\"\r\n          radius={[4, 4, 0, 0]}\r\n        />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n});\r\n\r\nexport default SpendingTrends;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,IAAI,QAAQ,OAAO;AACnC,SACEC,QAAQ,EACRC,GAAG,EACHC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,mBAAmB,QACd,UAAU;AACjB,SAASC,cAAc;AAAyC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAGhE,OAAO,IAAMC,cAAc,GAAGb,IAAI,CAAC,UAAAc,IAAA,EAAmB;EAAA,IAAAC,SAAA,GAAAD,IAAA,CAAhBE,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,EAAE,GAAAA,SAAA;EAE7C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,OACEP,IAAA;MAAKQ,SAAS,EAAC,uDAAuD;MAAAC,QAAA,EAAC;IAEvE,CAAK,CAAC;EAEV;EAEA,OACET,IAAA,CAACH,mBAAmB;IAACa,KAAK,EAAC,MAAM;IAACC,MAAM,EAAC,MAAM;IAAAF,QAAA,EAC7CP,KAAA,CAACX,QAAQ;MAACe,IAAI,EAAEA,IAAK;MAACM,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAE,CAAE;MAAAP,QAAA,GACvET,IAAA,CAACL,aAAa;QAACsB,eAAe,EAAC,KAAK;QAACC,MAAM,EAAC;MAAS,CAAE,CAAC,EACxDlB,IAAA,CAACP,KAAK;QACJ0B,OAAO,EAAC,MAAM;QACdD,MAAM,EAAC,SAAS;QAChBE,QAAQ,EAAE;MAAG,CAEd,CAAC,EACFpB,IAAA,CAACN,KAAK;QACJwB,MAAM,EAAC,SAAS;QAChBE,QAAQ,EAAE,EAAG;QACbC,aAAa,EAAE,SAAfA,aAAaA,CAAGC,KAAK;UAAA,OAAKxB,cAAc,CAACwB,KAAK,CAAC;QAAA;MAAC,CACjD,CAAC,EACFtB,IAAA,CAACJ,OAAO;QACN2B,SAAS,EAAE,SAAXA,SAASA,CAAGD,KAAK;UAAA,OAAK,CAACxB,cAAc,CAACwB,KAAK,CAAC,EAAE,QAAQ,CAAC;QAAA,CAAC;QACxDE,UAAU,EAAE;UAAEC,KAAK,EAAE;QAAU,CAAE;QACjCC,YAAY,EAAE;UACZC,eAAe,EAAE,SAAS;UAC1BC,MAAM,EAAE,mBAAmB;UAC3BC,YAAY,EAAE,UAAU;UACxBC,OAAO,EAAE;QACX;MAAE,CACH,CAAC,EACF9B,IAAA,CAACR,GAAG;QACF2B,OAAO,EAAC,QAAQ;QAChBY,IAAI,EAAC,SAAS;QACdC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;MAAE,CACtB,CAAC;IAAA,CACM;EAAC,CACQ,CAAC;AAE1B,CAAC,CAAC;AAEF,eAAe7B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}