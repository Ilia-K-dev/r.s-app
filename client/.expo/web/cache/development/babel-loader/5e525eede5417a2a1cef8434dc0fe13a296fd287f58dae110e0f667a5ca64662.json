{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chalk_1 = __importDefault(require(\"chalk\"));\nvar expo_pwa_1 = require(\"expo-pwa\");\nvar webpack_1 = require(\"webpack\");\nvar ModifyJsonWebpackPlugin_1 = __importDefault(require(\"./ModifyJsonWebpackPlugin\"));\nvar ChromeIconsWebpackPlugin = function (_ModifyJsonWebpackPlu) {\n  function ChromeIconsWebpackPlugin(options, icon) {\n    var _this;\n    _classCallCheck(this, ChromeIconsWebpackPlugin);\n    _this = _callSuper(this, ChromeIconsWebpackPlugin);\n    _this.options = options;\n    _this.icon = icon;\n    return _this;\n  }\n  _inherits(ChromeIconsWebpackPlugin, _ModifyJsonWebpackPlu);\n  return _createClass(ChromeIconsWebpackPlugin, [{\n    key: \"modifyAsync\",\n    value: function () {\n      var _modifyAsync = _asyncToGenerator(function* (compiler, compilation, data) {\n        var logger = compiler.getInfrastructureLogger('chrome-icons-plugin');\n        function logNotice(type, message) {\n          logger.log(chalk_1.default.magenta(`\\u203A ${type}: ${chalk_1.default.gray(message)}`));\n        }\n        function logWarning(type, message) {\n          logger.warn(chalk_1.default.yellow(`\\u203A ${type}: ${chalk_1.default.gray(message)}`));\n        }\n        if (Array.isArray(data.json.icons)) {\n          logNotice('Chrome Icons', `Using custom \\`icons\\` from PWA manifest`);\n          return data;\n        }\n        if (!this.icon) {\n          logWarning('Chrome Icons', `No template image found, skipping auto generation...`);\n          return data;\n        }\n        data.json.icons = [];\n        var iconAssets = yield (0, expo_pwa_1.generateChromeIconAsync)(this.options, this.icon, {});\n        for (var asset of iconAssets) {\n          compilation.emitAsset(asset.asset.path, new webpack_1.sources.RawSource(asset.asset.source));\n          data.json.icons.push(asset.manifest);\n        }\n        return data;\n      });\n      function modifyAsync(_x, _x2, _x3) {\n        return _modifyAsync.apply(this, arguments);\n      }\n      return modifyAsync;\n    }()\n  }]);\n}(ModifyJsonWebpackPlugin_1.default);\nexports.default = ChromeIconsWebpackPlugin;","map":{"version":3,"names":["chalk_1","__importDefault","require","expo_pwa_1","webpack_1","ModifyJsonWebpackPlugin_1","ChromeIconsWebpackPlugin","_ModifyJsonWebpackPlu","options","icon","_this","_classCallCheck","_callSuper","_inherits","_createClass","key","value","_modifyAsync","_asyncToGenerator","compiler","compilation","data","logger","getInfrastructureLogger","logNotice","type","message","log","default","magenta","gray","logWarning","warn","yellow","Array","isArray","json","icons","iconAssets","generateChromeIconAsync","asset","emitAsset","path","sources","RawSource","source","push","manifest","modifyAsync","_x","_x2","_x3","apply","arguments","exports"],"sources":["C:\\Users\\user\\Documents\\app.v3\\client\\node_modules\\@expo\\webpack-config\\src\\plugins\\ChromeIconsWebpackPlugin.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { generateChromeIconAsync, IconOptions, ProjectOptions } from 'expo-pwa';\nimport { Compilation, Compiler, sources } from 'webpack';\n\nimport { BeforeEmitOptions } from './JsonWebpackPlugin';\nimport ModifyJsonWebpackPlugin from './ModifyJsonWebpackPlugin';\n\nexport type Options = {\n  source: string;\n  outputPath?: string;\n  backgroundColor?: string;\n  resizeMode?: 'contain' | 'cover';\n};\n\nexport default class ChromeIconsWebpackPlugin extends ModifyJsonWebpackPlugin {\n  // Maybe we should support the ability to create all icons individually\n  constructor(private options: ProjectOptions, private icon: IconOptions | null) {\n    // TODO(Bacon): Validation\n    super();\n  }\n\n  async modifyAsync(\n    compiler: Compiler,\n    compilation: Compilation,\n    data: BeforeEmitOptions\n  ): Promise<BeforeEmitOptions> {\n    const logger = compiler.getInfrastructureLogger('chrome-icons-plugin');\n\n    function logNotice(type: string, message: string) {\n      logger.log(chalk.magenta(`\\u203A ${type}: ${chalk.gray(message)}`));\n    }\n\n    function logWarning(type: string, message: string) {\n      logger.warn(chalk.yellow(`\\u203A ${type}: ${chalk.gray(message)}`));\n    }\n\n    // If the icons array is already defined, then skip icon generation.\n    if (Array.isArray(data.json.icons)) {\n      logNotice('Chrome Icons', `Using custom \\`icons\\` from PWA manifest`);\n      return data;\n    }\n    if (!this.icon) {\n      logWarning('Chrome Icons', `No template image found, skipping auto generation...`);\n      return data;\n    }\n\n    data.json.icons = [];\n\n    const iconAssets = await generateChromeIconAsync(this.options, this.icon, {});\n\n    for (const asset of iconAssets) {\n      compilation.emitAsset(asset.asset.path, new sources.RawSource(asset.asset.source));\n      data.json.icons.push(asset.manifest);\n    }\n\n    return data;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AAGA,IAAAG,yBAAA,GAAAJ,eAAA,CAAAC,OAAA;AAAgE,IAS3CI,wBAAyB,aAAAC,qBAAA;EAE5C,SAAAD,yBAAoBE,OAAuB,EAAUC,IAAwB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,wBAAA;IAE3EI,KAAA,GAAAE,UAAA,OAAAN,wBAAA;IAFkBI,KAAA,CAAAF,OAAO,GAAPA,OAAO;IAA0BE,KAAA,CAAAD,IAAI,GAAJA,IAAI;IAAoB,OAAAC,KAAA;EAG7E;EAACG,SAAA,CAAAP,wBAAA,EAAAC,qBAAA;EAAA,OAAAO,YAAA,CAAAR,wBAAA;IAAAS,GAAA;IAAAC,KAAA;MAAA,IAAAC,YAAA,GAAAC,iBAAA,CAED,WACEC,QAAkB,EAClBC,WAAwB,EACxBC,IAAuB;QAEvB,IAAMC,MAAM,GAAGH,QAAQ,CAACI,uBAAuB,CAAC,qBAAqB,CAAC;QAEtE,SAASC,SAASA,CAACC,IAAY,EAAEC,OAAe;UAC9CJ,MAAM,CAACK,GAAG,CAAC3B,OAAA,CAAA4B,OAAK,CAACC,OAAO,CAAC,UAAUJ,IAAI,KAAKzB,OAAA,CAAA4B,OAAK,CAACE,IAAI,CAACJ,OAAO,CAAC,EAAE,CAAC,CAAC;QACrE;QAEA,SAASK,UAAUA,CAACN,IAAY,EAAEC,OAAe;UAC/CJ,MAAM,CAACU,IAAI,CAAChC,OAAA,CAAA4B,OAAK,CAACK,MAAM,CAAC,UAAUR,IAAI,KAAKzB,OAAA,CAAA4B,OAAK,CAACE,IAAI,CAACJ,OAAO,CAAC,EAAE,CAAC,CAAC;QACrE;QAGA,IAAIQ,KAAK,CAACC,OAAO,CAACd,IAAI,CAACe,IAAI,CAACC,KAAK,CAAC,EAAE;UAClCb,SAAS,CAAC,cAAc,EAAE,0CAA0C,CAAC;UACrE,OAAOH,IAAI;;QAEb,IAAI,CAAC,IAAI,CAACZ,IAAI,EAAE;UACdsB,UAAU,CAAC,cAAc,EAAE,sDAAsD,CAAC;UAClF,OAAOV,IAAI;;QAGbA,IAAI,CAACe,IAAI,CAACC,KAAK,GAAG,EAAE;QAEpB,IAAMC,UAAU,SAAS,IAAAnC,UAAA,CAAAoC,uBAAuB,EAAC,IAAI,CAAC/B,OAAO,EAAE,IAAI,CAACC,IAAI,EAAE,EAAE,CAAC;QAE7E,KAAK,IAAM+B,KAAK,IAAIF,UAAU,EAAE;UAC9BlB,WAAW,CAACqB,SAAS,CAACD,KAAK,CAACA,KAAK,CAACE,IAAI,EAAE,IAAItC,SAAA,CAAAuC,OAAO,CAACC,SAAS,CAACJ,KAAK,CAACA,KAAK,CAACK,MAAM,CAAC,CAAC;UAClFxB,IAAI,CAACe,IAAI,CAACC,KAAK,CAACS,IAAI,CAACN,KAAK,CAACO,QAAQ,CAAC;;QAGtC,OAAO1B,IAAI;MACb,CAAC;MAAA,SAnCK2B,WAAWA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAlC,YAAA,CAAAmC,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAXL,WAAW;IAAA;EAAA;AAAA,EAPmC3C,yBAAA,CAAAuB,OAAuB;AAA7E0B,OAAA,CAAA1B,OAAA,GAAAtB,wBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}