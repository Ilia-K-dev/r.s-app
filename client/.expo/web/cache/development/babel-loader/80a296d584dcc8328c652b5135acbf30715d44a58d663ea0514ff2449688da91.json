{"ast":null,"code":"export var validateEmail = function validateEmail(email) {\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return {\n    isValid: emailRegex.test(email),\n    error: emailRegex.test(email) ? null : 'Please enter a valid email address'\n  };\n};\nexport var validatePassword = function validatePassword(password) {\n  var errors = [];\n  if (password.length < 8) {\n    errors.push('Password must be at least 8 characters long');\n  }\n  if (!/[A-Z]/.test(password)) {\n    errors.push('Password must contain at least one uppercase letter');\n  }\n  if (!/[a-z]/.test(password)) {\n    errors.push('Password must contain at least one lowercase letter');\n  }\n  if (!/[0-9]/.test(password)) {\n    errors.push('Password must contain at least one number');\n  }\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    errors.push('Password must contain at least one special character');\n  }\n  return {\n    isValid: errors.length === 0,\n    error: errors.length > 0 ? errors.join(', ') : null\n  };\n};\nexport var validatePhoneNumber = function validatePhoneNumber(phoneNumber) {\n  var re = /^\\+?[1-9]\\d{1,14}$/;\n  return re.test(phoneNumber);\n};\nexport var validateName = function validateName(name) {\n  var re = /^[a-zA-Z ]{2,30}$/;\n  return re.test(name);\n};\nexport var validateAmount = function validateAmount(amount) {\n  if (amount === null || amount === undefined || amount === '') return {\n    isValid: false,\n    error: 'Amount is required'\n  };\n  var value = parseFloat(amount);\n  if (isNaN(value)) return {\n    isValid: false,\n    error: 'Invalid amount'\n  };\n  if (value <= 0) return {\n    isValid: false,\n    error: 'Amount must be greater than 0'\n  };\n  return {\n    isValid: true,\n    error: null\n  };\n};\nexport var validateRequired = function validateRequired(value) {\n  if (value === null || value === undefined || typeof value === 'string' && value.trim() === '') return {\n    isValid: false,\n    error: 'This field is required'\n  };\n  return {\n    isValid: true,\n    error: null\n  };\n};","map":{"version":3,"names":["validateEmail","email","emailRegex","isValid","test","error","validatePassword","password","errors","length","push","join","validatePhoneNumber","phoneNumber","re","validateName","name","validateAmount","amount","undefined","value","parseFloat","isNaN","validateRequired","trim"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/validation.js"],"sourcesContent":["/**\r\n * @desc Validates an email address format.\r\n * @param {string} email - The email address to validate.\r\n * @returns {{isValid: boolean, error: string|null}} - Validation result.\r\n */\r\nexport const validateEmail = email => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return {\r\n    isValid: emailRegex.test(email),\r\n    error: emailRegex.test(email) ? null : 'Please enter a valid email address',\r\n  };\r\n};\r\n\r\n/**\r\n * @desc Validates a password based on complexity requirements.\r\n * Requires at least 8 characters, one uppercase, one lowercase, one number, and one special character.\r\n * @param {string} password - The password to validate.\r\n * @returns {{isValid: boolean, error: string|null}} - Validation result.\r\n */\r\nexport const validatePassword = password => {\r\n  const errors = [];\r\n\r\n  if (password.length < 8) {\r\n    errors.push('Password must be at least 8 characters long');\r\n  }\r\n  if (!/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  if (!/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  if (!/[0-9]/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    errors.push('Password must contain at least one special character');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    error: errors.length > 0 ? errors.join(', ') : null,\r\n  };\r\n};\r\n\r\n/**\r\n * @desc Validates a phone number format (basic check).\r\n * @param {string} phoneNumber - The phone number to validate.\r\n * @returns {boolean} - True if the phone number is valid, false otherwise.\r\n */\r\nexport const validatePhoneNumber = phoneNumber => {\r\n  const re = /^\\+?[1-9]\\d{1,14}$/; // Basic E.164 format check\r\n  return re.test(phoneNumber);\r\n};\r\n\r\n/**\r\n * @desc Validates a name format (basic check).\r\n * @param {string} name - The name to validate.\r\n * @returns {boolean} - True if the name is valid, false otherwise.\r\n */\r\nexport const validateName = name => {\r\n  const re = /^[a-zA-Z ]{2,30}$/; // Allows letters and spaces, 2-30 characters\r\n  return re.test(name);\r\n};\r\n\r\n/**\r\n * @desc Validates an amount field.\r\n * Checks if the amount is a valid positive number.\r\n * @param {string|number} amount - The amount to validate.\r\n * @returns {{isValid: boolean, error: string|null}} - Validation result.\r\n */\r\nexport const validateAmount = amount => {\r\n  if (amount === null || amount === undefined || amount === '') return { isValid: false, error: 'Amount is required' };\r\n  const value = parseFloat(amount);\r\n  if (isNaN(value)) return { isValid: false, error: 'Invalid amount' };\r\n  if (value <= 0) return { isValid: false, error: 'Amount must be greater than 0' };\r\n  return { isValid: true, error: null };\r\n};\r\n\r\n/**\r\n * @desc Validates if a value is present (not null, undefined, or empty string).\r\n * @param {*} value - The value to validate.\r\n * @returns {{isValid: boolean, error: string|null}} - Validation result.\r\n */\r\nexport const validateRequired = value => {\r\n  if (value === null || value === undefined || (typeof value === 'string' && value.trim() === '')) return { isValid: false, error: 'This field is required' };\r\n  return { isValid: true, error: null };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}