{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from \"../config/firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext({\n  user: null,\n  setUser: function setUser() {}\n});\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    var unsubscribe = onAuthStateChanged(auth, function (user) {\n      setUser(user);\n      setLoading(false);\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var value = {\n    user: user,\n    setUser: setUser,\n    loading: loading\n  };\n  return _jsx(AuthContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport var useAuth = function useAuth() {\n  return useContext(AuthContext);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","onAuthStateChanged","auth","jsx","_jsx","AuthContext","user","setUser","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","_useState3","_useState4","loading","setLoading","unsubscribe","value","Provider","useAuth","useContext"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { auth } from '../config/firebase';\r\n\r\nexport const AuthContext = createContext({\r\n  user: null, \r\n  setUser: () => {}\r\n});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Listen for auth state changes\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setUser(user);\r\n      setLoading(false);\r\n    });\r\n    \r\n    return () => unsubscribe();\r\n  }, []);\r\n  \r\n  const value = {\r\n    user,\r\n    setUser,\r\n    loading\r\n  };\r\n  \r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// We'll keep this for compatibility, but the actual implementation will be in hooks/useAuth.js\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,IAAI;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAE1C,OAAO,IAAMC,WAAW,GAAGP,aAAa,CAAC;EACvCQ,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,SAATA,OAAOA,CAAA,EAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACrC,IAAAC,SAAA,GAAwBZ,QAAQ,CAAC,IAAI,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BL,IAAI,GAAAM,UAAA;IAAEL,OAAO,GAAAK,UAAA;EACpB,IAAAE,UAAA,GAA8Bf,QAAQ,CAAC,IAAI,CAAC;IAAAgB,UAAA,GAAAF,cAAA,CAAAC,UAAA;IAArCE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAG1Bf,SAAS,CAAC,YAAM;IACd,IAAMkB,WAAW,GAAGjB,kBAAkB,CAACC,IAAI,EAAE,UAACI,IAAI,EAAK;MACrDC,OAAO,CAACD,IAAI,CAAC;MACbW,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO;MAAA,OAAMC,WAAW,CAAC,CAAC;IAAA;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,KAAK,GAAG;IACZb,IAAI,EAAJA,IAAI;IACJC,OAAO,EAAPA,OAAO;IACPS,OAAO,EAAPA;EACF,CAAC;EAED,OAAOZ,IAAA,CAACC,WAAW,CAACe,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAT,QAAA,EAAEA;EAAQ,CAAuB,CAAC;AAC9E,CAAC;AAGD,OAAO,IAAMW,OAAO,GAAG,SAAVA,OAAOA,CAAA;EAAA,OAASC,UAAU,CAACjB,WAAW,CAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}