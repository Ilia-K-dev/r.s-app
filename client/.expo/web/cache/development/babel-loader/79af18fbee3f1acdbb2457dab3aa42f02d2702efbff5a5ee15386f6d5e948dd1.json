{"ast":null,"code":"import { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport Constants from 'expo-constants';\nfunction logFirebaseStatus(message) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(`[Firebase] ${message}`, data);\n}\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\nvar app;\nvar auth;\nvar db;\nvar storage;\ntry {\n  if (!getApps().length) {\n    logFirebaseStatus(\"Initializing Firebase app...\");\n    console.log(\"[Firebase] Configuration:\", firebaseConfig);\n    app = initializeApp(firebaseConfig);\n    logFirebaseStatus(\"Firebase app initialized successfully\");\n  } else {\n    logFirebaseStatus(\"Firebase app already initialized\");\n    app = getApps()[0];\n  }\n  auth = getAuth(app);\n  db = getFirestore(app);\n  storage = getStorage(app);\n  logFirebaseStatus(\"Firebase services initialized successfully\", {\n    services: [\"Authentication\", \"Firestore\", \"Storage\"]\n  });\n} catch (error) {\n  console.error(\"CRITICAL ERROR: Firebase initialization failed\", error);\n  throw error;\n}\nexport { auth, db, storage, app };","map":{"version":3,"names":["initializeApp","getApps","getAuth","getFirestore","getStorage","Constants","logFirebaseStatus","message","data","arguments","length","undefined","console","log","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","auth","db","storage","services","error"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/config/firebase.js"],"sourcesContent":["import { initializeApp, getApps } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\nimport Constants from 'expo-constants';\r\n\r\n// --- Diagnostic Logging Function ---\r\nfunction logFirebaseStatus(message, data = {}) {\r\n  console.log(`[Firebase] ${message}`, data);\r\n}\r\n\r\n// --- Firebase Configuration from app.json ---\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n};\r\n\r\n// --- Core Firebase Services ---\r\nlet app;\r\nlet auth;\r\nlet db;\r\nlet storage;\r\n\r\n// --- Initialize Firebase ---\r\ntry {\r\n// Modified as part of build error fix task on 2025-05-08, 3:02:08 AM\r\n// Added logging for firebaseConfig before initialization to debug invalid API key error.\r\n  // Check if Firebase is already initialized\r\n  if (!getApps().length) {\r\n    logFirebaseStatus(\"Initializing Firebase app...\");\r\n    // Log firebaseConfig to debug invalid API key\r\n    console.log(\"[Firebase] Configuration:\", firebaseConfig);\r\n    app = initializeApp(firebaseConfig);\r\n    logFirebaseStatus(\"Firebase app initialized successfully\");\r\n  } else {\r\n    logFirebaseStatus(\"Firebase app already initialized\");\r\n    app = getApps()[0];\r\n  }\r\n\r\n  // Initialize services\r\n  auth = getAuth(app);\r\n  db = getFirestore(app);\r\n  storage = getStorage(app);\r\n  logFirebaseStatus(\"Firebase services initialized successfully\", {\r\n    services: [\"Authentication\", \"Firestore\", \"Storage\"]\r\n  });\r\n} catch (error) {\r\n  console.error(\"CRITICAL ERROR: Firebase initialization failed\", error);\r\n  throw error;\r\n}\r\n\r\n// Export Firebase services\r\nexport { auth, db, storage, app };\r\n// Export default for backward compatibility (optional, depending on usage)\r\n// export default firebaseConfig; // Removed as config is now accessed via Constants\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,cAAc;AACrD,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,SAAS,MAAM,gBAAgB;AAGtC,SAASC,iBAAiBA,CAACC,OAAO,EAAa;EAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC3CG,OAAO,CAACC,GAAG,CAAC,cAAcN,OAAO,EAAE,EAAEC,IAAI,CAAC;AAC5C;AAGA,IAAMM,cAAc,GAAG;EACrBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9CC,UAAU,EAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B;EACtDC,SAAS,EAAEL,OAAO,CAACC,GAAG,CAACK,6BAA6B;EACpDC,aAAa,EAAEP,OAAO,CAACC,GAAG,CAACO,iCAAiC;EAC5DC,iBAAiB,EAAET,OAAO,CAACC,GAAG,CAACS,sCAAsC;EACrEC,KAAK,EAAEX,OAAO,CAACC,GAAG,CAACW,yBAAyB;EAC5CC,aAAa,EAAEb,OAAO,CAACC,GAAG,CAACa;AAC7B,CAAC;AAGD,IAAIC,GAAG;AACP,IAAIC,IAAI;AACR,IAAIC,EAAE;AACN,IAAIC,OAAO;AAGX,IAAI;EAIF,IAAI,CAACjC,OAAO,CAAC,CAAC,CAACS,MAAM,EAAE;IACrBJ,iBAAiB,CAAC,8BAA8B,CAAC;IAEjDM,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEC,cAAc,CAAC;IACxDiB,GAAG,GAAG/B,aAAa,CAACc,cAAc,CAAC;IACnCR,iBAAiB,CAAC,uCAAuC,CAAC;EAC5D,CAAC,MAAM;IACLA,iBAAiB,CAAC,kCAAkC,CAAC;IACrDyB,GAAG,GAAG9B,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB;EAGA+B,IAAI,GAAG9B,OAAO,CAAC6B,GAAG,CAAC;EACnBE,EAAE,GAAG9B,YAAY,CAAC4B,GAAG,CAAC;EACtBG,OAAO,GAAG9B,UAAU,CAAC2B,GAAG,CAAC;EACzBzB,iBAAiB,CAAC,4CAA4C,EAAE;IAC9D6B,QAAQ,EAAE,CAAC,gBAAgB,EAAE,WAAW,EAAE,SAAS;EACrD,CAAC,CAAC;AACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;EACdxB,OAAO,CAACwB,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;EACtE,MAAMA,KAAK;AACb;AAGA,SAASJ,IAAI,EAAEC,EAAE,EAAEC,OAAO,EAAEH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}