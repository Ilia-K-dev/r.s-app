{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport { getReliableApiUrl } from \"../utils/apiConnectionTest\";\nimport { logger } from \"../utils/logger\";\nimport { auth } from \"../../core/config/firebase\";\nvar api = axios.create({\n  baseURL: getReliableApiUrl(),\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    var user = auth.currentUser;\n    if (user) {\n      var token = yield user.getIdToken();\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    if (process.env.NODE_ENV === 'development') {\n      logger.debug(`API Request: ${config.method.toUpperCase()} ${config.url}`, {\n        params: config.params,\n        data: config.data\n      });\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  logger.error('API Request Error:', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(function (response) {\n  if (process.env.NODE_ENV === 'development') {\n    logger.debug(`API Response: ${response.config.method.toUpperCase()} ${response.config.url} ${response.status}`, {\n      data: response.data\n    });\n  }\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    var _error$response, _error$response2, _error$response2$data, _error$response3, _error$response4;\n    var originalRequest = error.config;\n    if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        var user = auth.currentUser;\n        if (user) {\n          var newToken = yield user.getIdToken(true);\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          logger.info(`Token refreshed, retrying original request: ${originalRequest.method.toUpperCase()} ${originalRequest.url}`);\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        logger.error('Token refresh failed:', refreshError);\n      }\n    }\n    if (!error.response) {\n      logger.error('API Connection Error:', error.message);\n      var customError = new Error(process.env.NODE_ENV === 'production' ? 'Network error. Please check your connection and try again.' : `API Connection Error: ${error.message}. Make sure Firebase Emulators are running.`);\n      customError.isConnectionError = true;\n      return Promise.reject(customError);\n    }\n    var message = ((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred.';\n    logger.error('API Error:', ((_error$response3 = error.response) == null ? void 0 : _error$response3.data) || error.message, {\n      status: (_error$response4 = error.response) == null ? void 0 : _error$response4.status,\n      config: error.config\n    });\n    var clientError = new Error(message);\n    clientError.originalError = error;\n    return Promise.reject(clientError);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport default api;","map":{"version":3,"names":["axios","getReliableApiUrl","logger","auth","api","create","baseURL","timeout","headers","interceptors","request","use","_ref","_asyncToGenerator","config","user","currentUser","token","getIdToken","Authorization","process","env","NODE_ENV","debug","method","toUpperCase","url","params","data","_x","apply","arguments","error","Promise","reject","response","status","_ref2","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response4","originalRequest","_retry","newToken","info","refreshError","message","customError","Error","isConnectionError","clientError","originalError","_x2"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/services/api.js"],"sourcesContent":["/**\r\n * api.js\r\n * Last Modified: 2025-05-21 05:07:53\r\n * Modified By: Cline\r\n *\r\n * Purpose: Centralized API client with connection reliability\r\n * Changes Made: Added fallback mechanism for API URL\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { getReliableApiUrl } from '../utils/apiConnectionTest';\r\nimport { logger } from '../utils/logger';\r\nimport { auth } from '../../core/config/firebase'; // Assuming Firebase auth is still used\r\n\r\n// Create axios instance with reliable base URL\r\nconst api = axios.create({\r\n  baseURL: getReliableApiUrl(),\r\n  timeout: 10000, // Default timeout\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor\r\napi.interceptors.request.use(\r\n  async config => {\r\n    // Add Firebase Auth token if user is logged in\r\n    const user = auth.currentUser;\r\n    if (user) {\r\n      const token = await user.getIdToken();\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    // Log requests in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      logger.debug(`API Request: ${config.method.toUpperCase()} ${config.url}`, { params: config.params, data: config.data });\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    logger.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor\r\napi.interceptors.response.use(\r\n  response => {\r\n    // Log successful response in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n        logger.debug(`API Response: ${response.config.method.toUpperCase()} ${response.config.url} ${response.status}`, { data: response.data });\r\n    }\r\n    return response;\r\n  },\r\n  async error => {\r\n    const originalRequest = error.config;\r\n\r\n    // Check for 401 Unauthorized response and if it's not a retry attempt\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true; // Mark as retry attempt\r\n\r\n      try {\r\n        // Attempt to refresh the token\r\n        const user = auth.currentUser;\r\n        if (user) {\r\n          const newToken = await user.getIdToken(true); // Force token refresh\r\n          // Update the Authorization header for the original request\r\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n          // Retry the original request with the new token\r\n          logger.info(`Token refreshed, retrying original request: ${originalRequest.method.toUpperCase()} ${originalRequest.url}`);\r\n          return api(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // If token refresh fails, log out the user or handle appropriately\r\n        logger.error('Token refresh failed:', refreshError);\r\n        // Optionally dispatch a logout action here\r\n        // store.dispatch(logoutUser());\r\n      }\r\n    }\r\n\r\n    // Handle connection errors with helpful messages\r\n    if (!error.response) {\r\n      logger.error('API Connection Error:', error.message);\r\n      // Show a more helpful error message based on environment\r\n      const customError = new Error(\r\n        process.env.NODE_ENV === 'production'\r\n          ? 'Network error. Please check your connection and try again.'\r\n          : `API Connection Error: ${error.message}. Make sure Firebase Emulators are running.`\r\n      );\r\n      customError.isConnectionError = true;\r\n      return Promise.reject(customError);\r\n    }\r\n\r\n    // Extract user-friendly message from server response\r\n    const message = error.response?.data?.message || error.message || 'An unexpected error occurred.';\r\n    // Log the full error for debugging\r\n    logger.error('API Error:', error.response?.data || error.message, { status: error.response?.status, config: error.config });\r\n\r\n    // Create a new Error object with the user-friendly message\r\n    const clientError = new Error(message);\r\n    // Optionally attach original error details for further handling in hooks/components\r\n    clientError.originalError = error;\r\n\r\n    return Promise.reject(clientError);\r\n  }\r\n);\r\n\r\n// Export the configured axios instance\r\nexport default api;\r\n\r\n// Note: The original api.js file contained separate exports for receiptApi, categoryApi, etc.\r\n// This new version centralizes the axios instance. You may need to refactor\r\n// components/hooks that used those specific exports to use the default 'api' instance\r\n// and append the specific endpoints (e.g., api.get('/receipts')).\r\n// Alternatively, you could re-add those specific export objects here,\r\n// using the 'api' instance internally.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}