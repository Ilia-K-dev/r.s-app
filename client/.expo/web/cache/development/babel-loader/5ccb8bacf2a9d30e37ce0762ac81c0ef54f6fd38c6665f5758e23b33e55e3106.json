{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { ref, onValue } from 'firebase/database';\nimport { getDatabase } from 'firebase/database';\nvar database;\ntry {\n  database = getDatabase();\n} catch (e) {\n  console.warn(\"Firebase Realtime Database not initialized. Connection monitoring may not work.\", e);\n}\nexport var useFirebaseConnection = function useFirebaseConnection() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isConnected = _useState2[0],\n    setIsConnected = _useState2[1];\n  useEffect(function () {\n    if (!database) {\n      console.warn(\"Firebase Realtime Database not available for connection monitoring.\");\n      return;\n    }\n    var connectedRef = ref(database, '.info/connected');\n    var unsubscribe = onValue(connectedRef, function (snapshot) {\n      setIsConnected(snapshot.val());\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  return isConnected;\n};","map":{"version":3,"names":["useEffect","useState","ref","onValue","getDatabase","database","e","console","warn","useFirebaseConnection","_useState","_useState2","_slicedToArray","isConnected","setIsConnected","connectedRef","unsubscribe","snapshot","val"],"sources":["C:/Users/user/Documents/app.v3/client/src/utils/connection.js"],"sourcesContent":["// File: client/src/utils/connection.js\r\n// Date: 2025-05-10\r\n// Description: Utility and hook for monitoring Firebase connection state.\r\n// Reasoning: Provides real-time information about the application's connection to Firebase, enabling offline features and UI feedback.\r\n// Potential Optimizations: Could add more detailed network status checks beyond just Firebase connection.\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database'; // Assuming Firebase Realtime Database is available for .info/connected\r\nimport { getDatabase } from 'firebase/database'; // Import getDatabase\r\n\r\n// Get Realtime Database instance (assuming it's initialized elsewhere or can be initialized here)\r\n// If Realtime Database is NOT used otherwise, consider if this is the best approach\r\n// or if a different method for detecting network status is preferred.\r\n// For now, assuming Realtime Database is available or can be added.\r\n// NOTE: Need to ensure Realtime Database is initialized in firebase.js if not already.\r\n// For now, we'll get the default instance.\r\nlet database;\r\ntry {\r\n  database = getDatabase(); // Get default Realtime Database instance\r\n} catch (e) {\r\n  console.warn(\"Firebase Realtime Database not initialized. Connection monitoring may not work.\", e);\r\n  // Provide a fallback or handle this case appropriately\r\n}\r\n\r\n\r\n/**\r\n * Hook to monitor the application's connection state to Firebase.\r\n * @returns {boolean} True if connected, false otherwise.\r\n */\r\nexport const useFirebaseConnection = () => {\r\n  const [isConnected, setIsConnected] = useState(true); // Assume connected initially\r\n\r\n  useEffect(() => {\r\n    if (!database) {\r\n      // If database is not initialized, cannot monitor connection\r\n      console.warn(\"Firebase Realtime Database not available for connection monitoring.\");\r\n      return;\r\n    }\r\n\r\n    const connectedRef = ref(database, '.info/connected');\r\n\r\n    const unsubscribe = onValue(connectedRef, (snapshot) => {\r\n      setIsConnected(snapshot.val());\r\n    });\r\n\r\n    // Clean up the listener\r\n    return () => unsubscribe();\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  return isConnected;\r\n};\r\n\r\n// You could also export the raw connection state if needed elsewhere\r\n// export const firebaseConnectionState = useFirebaseConnection(); // This won't work outside a component/hook\r\n\r\n// Utility function to get current connection status (less reactive than hook)\r\n// export const checkFirebaseConnection = async () => {\r\n//   if (!database) {\r\n//     console.warn(\"Firebase Realtime Database not available for connection check.\");\r\n//     return false; // Or throw an error\r\n//   }\r\n//   const connectedRef = ref(database, '.info/connected');\r\n//   const snapshot = await get(connectedRef); // Requires 'get' from 'firebase/database'\r\n//   return snapshot.val();\r\n// };\r\n"],"mappings":";AAMA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,GAAG,EAAEC,OAAO,QAAQ,mBAAmB;AAChD,SAASC,WAAW,QAAQ,mBAAmB;AAQ/C,IAAIC,QAAQ;AACZ,IAAI;EACFA,QAAQ,GAAGD,WAAW,CAAC,CAAC;AAC1B,CAAC,CAAC,OAAOE,CAAC,EAAE;EACVC,OAAO,CAACC,IAAI,CAAC,iFAAiF,EAAEF,CAAC,CAAC;AAEpG;AAOA,OAAO,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;EACzC,IAAAC,SAAA,GAAsCT,QAAQ,CAAC,IAAI,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAElCX,SAAS,CAAC,YAAM;IACd,IAAI,CAACK,QAAQ,EAAE;MAEbE,OAAO,CAACC,IAAI,CAAC,qEAAqE,CAAC;MACnF;IACF;IAEA,IAAMO,YAAY,GAAGb,GAAG,CAACG,QAAQ,EAAE,iBAAiB,CAAC;IAErD,IAAMW,WAAW,GAAGb,OAAO,CAACY,YAAY,EAAE,UAACE,QAAQ,EAAK;MACtDH,cAAc,CAACG,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAGF,OAAO;MAAA,OAAMF,WAAW,CAAC,CAAC;IAAA;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOH,WAAW;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}