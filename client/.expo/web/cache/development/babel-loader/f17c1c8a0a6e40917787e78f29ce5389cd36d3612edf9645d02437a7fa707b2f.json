{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { documentProcessingService } from \"../services/documentProcessingService\";\nvar _require = require(\"../../../__mocks__/testHelper\"),\n  createMock = _require.createMock,\n  mockUser = _require.mockUser,\n  createFirestoreMocks = _require.createFirestoreMocks,\n  createStorageMocks = _require.createStorageMocks,\n  createFeatureFlagMocks = _require.createFeatureFlagMocks,\n  createErrorHandlerMocks = _require.createErrorHandlerMocks,\n  createApiMocks = _require.createApiMocks;\nvar mockFirestoreMocks = createFirestoreMocks();\nvar mockStorageMocks = createStorageMocks();\nvar mockFeatureFlagMocks = createFeatureFlagMocks(['documentsDirectIntegration']);\nvar mockErrorHandlerMocks = createErrorHandlerMocks();\nvar mockApiMocks = createApiMocks();\nmockApiMocks.post.mockResolvedValue({\n  data: {\n    imageUrl: 'https://example.com/test-image.jpg'\n  }\n});\njest.mock(\"../../../core/config/firebase\", function () {\n  return {\n    app: {},\n    auth: {\n      currentUser: mockUser\n    },\n    db: {},\n    storage: {}\n  };\n}, {\n  virtual: true\n});\njest.mock('firebase/firestore', function () {\n  return mockFirestoreMocks;\n}, {\n  virtual: true\n});\njest.mock('firebase/storage', function () {\n  return mockStorageMocks;\n}, {\n  virtual: true\n});\njest.mock(\"../../../core/config/featureFlags\", function () {\n  return mockFeatureFlagMocks;\n}, {\n  virtual: true\n});\njest.mock(\"../../../utils/errorHandler\", function () {\n  return mockErrorHandlerMocks;\n}, {\n  virtual: true\n});\njest.mock('axios', function () {\n  return mockApiMocks;\n}, {\n  virtual: true\n});\nvar mockPreprocessImage = jest.fn(function () {\n  return Promise.resolve('processed-image-data');\n});\nglobal.preprocessImage = mockPreprocessImage;\ndescribe('Document Processing Service', function () {\n  beforeEach(function () {\n    jest.clearAllMocks();\n  });\n  it('should export the expected service methods', function () {\n    expect(documentProcessingService).toBeDefined();\n    expect(typeof documentProcessingService.uploadDocument).toBe('function');\n    expect(typeof documentProcessingService.processDocument).toBe('function');\n    expect(typeof documentProcessingService.getDocumentText).toBe('function');\n    expect(typeof documentProcessingService.classifyDocument).toBe('function');\n  });\n  describe('uploadDocument', function () {\n    it('should upload a document using Firebase when feature flag is enabled', _asyncToGenerator(function* () {\n      var file = new File(['test'], 'test.jpg', {\n        type: 'image/jpeg'\n      });\n      var documentType = 'receipt';\n      yield documentProcessingService.uploadDocument(file, documentType);\n      expect(mockStorageMocks.ref).toHaveBeenCalled();\n      expect(mockStorageMocks.uploadBytes).toHaveBeenCalled();\n      expect(mockStorageMocks.getDownloadURL).toHaveBeenCalled();\n      expect(mockFirestoreMocks.collection).toHaveBeenCalled();\n      expect(mockFirestoreMocks.addDoc).toHaveBeenCalled();\n    }));\n    it('should use API directly when feature flag is disabled', _asyncToGenerator(function* () {\n      var file = new File(['test'], 'test.jpg', {\n        type: 'image/jpeg'\n      });\n      var documentType = 'receipt';\n      mockFeatureFlagMocks.isFeatureEnabled.mockReturnValueOnce(false);\n      yield documentProcessingService.uploadDocument(file, documentType);\n      expect(mockApiMocks.post).toHaveBeenCalled();\n      expect(mockStorageMocks.ref).not.toHaveBeenCalled();\n      expect(mockFirestoreMocks.collection).not.toHaveBeenCalled();\n    }));\n  });\n});","map":{"version":3,"names":["documentProcessingService","_require","require","createMock","mockUser","createFirestoreMocks","createStorageMocks","createFeatureFlagMocks","createErrorHandlerMocks","createApiMocks","mockFirestoreMocks","mockStorageMocks","mockFeatureFlagMocks","mockErrorHandlerMocks","mockApiMocks","post","mockResolvedValue","data","imageUrl","jest","mock","app","auth","currentUser","db","storage","virtual","mockPreprocessImage","fn","Promise","resolve","global","preprocessImage","describe","beforeEach","clearAllMocks","it","expect","toBeDefined","uploadDocument","toBe","processDocument","getDocumentText","classifyDocument","_asyncToGenerator","file","File","type","documentType","ref","toHaveBeenCalled","uploadBytes","getDownloadURL","collection","addDoc","isFeatureEnabled","mockReturnValueOnce","not"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/__tests__/documentProcessingService.test.js"],"sourcesContent":["// client/src/features/documents/__tests__/documentProcessingService.test.js\r\n\r\n// Import the module we want to test\r\nimport { documentProcessingService } from '../services/documentProcessingService';\r\n\r\n// Import our test helper\r\nconst {\r\n  createMock,\r\n  mockUser,\r\n  createFirestoreMocks,\r\n  createStorageMocks,\r\n  createFeatureFlagMocks,\r\n  createErrorHandlerMocks,\r\n  createApiMocks\r\n} = require('../../../__mocks__/testHelper');\r\n\r\n// Create our mocks\r\nconst mockFirestoreMocks = createFirestoreMocks();\r\nconst mockStorageMocks = createStorageMocks();\r\nconst mockFeatureFlagMocks = createFeatureFlagMocks(['documentsDirectIntegration']);\r\nconst mockErrorHandlerMocks = createErrorHandlerMocks();\r\nconst mockApiMocks = createApiMocks();\r\n\r\n// Set specific mock return values if needed\r\nmockApiMocks.post.mockResolvedValue({\r\n  data: { imageUrl: 'https://example.com/test-image.jpg' }\r\n});\r\n\r\n// Mock the required modules directly in the test file\r\njest.mock('../../../core/config/firebase', () => ({\r\n  app: {},\r\n  auth: { currentUser: mockUser },\r\n  db: {},\r\n  storage: {}\r\n}), { virtual: true });\r\n\r\njest.mock('firebase/firestore', () => mockFirestoreMocks, { virtual: true });\r\njest.mock('firebase/storage', () => mockStorageMocks, { virtual: true });\r\njest.mock('../../../core/config/featureFlags', () => mockFeatureFlagMocks, { virtual: true });\r\njest.mock('../../../utils/errorHandler', () => mockErrorHandlerMocks, { virtual: true });\r\njest.mock('axios', () => mockApiMocks, { virtual: true });\r\n\r\n// Mock any global utilities\r\nconst mockPreprocessImage = jest.fn(() => Promise.resolve('processed-image-data'));\r\nglobal.preprocessImage = mockPreprocessImage;\r\n\r\ndescribe('Document Processing Service', () => {\r\n  // Reset mocks before each test\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  // Basic existence test\r\n  it('should export the expected service methods', () => {\r\n    expect(documentProcessingService).toBeDefined();\r\n    expect(typeof documentProcessingService.uploadDocument).toBe('function');\r\n    expect(typeof documentProcessingService.processDocument).toBe('function');\r\n    expect(typeof documentProcessingService.getDocumentText).toBe('function');\r\n    expect(typeof documentProcessingService.classifyDocument).toBe('function');\r\n  });\r\n\r\n  describe('uploadDocument', () => {\r\n    it('should upload a document using Firebase when feature flag is enabled', async () => {\r\n      // Arrange\r\n      const file = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\r\n      const documentType = 'receipt';\r\n\r\n      // Act\r\n      await documentProcessingService.uploadDocument(file, documentType);\r\n\r\n      // Assert\r\n      expect(mockStorageMocks.ref).toHaveBeenCalled();\r\n      expect(mockStorageMocks.uploadBytes).toHaveBeenCalled();\r\n      expect(mockStorageMocks.getDownloadURL).toHaveBeenCalled();\r\n      expect(mockFirestoreMocks.collection).toHaveBeenCalled();\r\n      expect(mockFirestoreMocks.addDoc).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should use API directly when feature flag is disabled', async () => {\r\n      // Arrange\r\n      const file = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\r\n      const documentType = 'receipt';\r\n\r\n      // Disable the feature flag for this test\r\n      mockFeatureFlagMocks.isFeatureEnabled.mockReturnValueOnce(false);\r\n\r\n      // Act\r\n      await documentProcessingService.uploadDocument(file, documentType);\r\n\r\n      // Assert\r\n      expect(mockApiMocks.post).toHaveBeenCalled();\r\n      expect(mockStorageMocks.ref).not.toHaveBeenCalled();\r\n      expect(mockFirestoreMocks.collection).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}