{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from \"../../auth/hooks/useAuth\";\nimport { inventoryService } from \"../services/inventoryService\";\nimport errorHandler from \"../../../shared/utils/errorHandler\";\nexport var useInventory = function useInventory() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    inventory = _useState2[0],\n    setInventory = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState({\n      limit: 10,\n      startAfter: null,\n      hasNextPage: true\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    pagination = _useState8[0],\n    setPagination = _useState8[1];\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var fetchInventory = useCallback(_asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      setLoading(true);\n      setError(null);\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n      var fetchOptions = _objectSpread({\n        limit: pagination.limit,\n        startAfter: pagination.startAfter\n      }, options);\n      var response = yield inventoryService.getInventory(user.uid, fetchOptions);\n      setInventory(response.data.products || []);\n      setPagination(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          startAfter: response.data.pagination.lastVisible,\n          hasNextPage: response.data.pagination.hasNextPage\n        });\n      });\n    } catch (err) {\n      var userFriendlyMessage = errorHandler(err, 'Failed to fetch inventory.');\n      setError(userFriendlyMessage);\n    } finally {\n      setLoading(false);\n    }\n  }), [user, pagination.limit, pagination.startAfter]);\n  var addItem = function () {\n    var _ref2 = _asyncToGenerator(function* (itemData) {\n      try {\n        setLoading(true);\n        setError(null);\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n        var newItem = yield inventoryService.addItem(user.uid, itemData);\n        setInventory(function (prev) {\n          return [].concat(_toConsumableArray(prev), [newItem]);\n        });\n        return newItem;\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to add inventory item.');\n        setError(userFriendlyMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function addItem(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var updateItem = function () {\n    var _ref3 = _asyncToGenerator(function* (itemId, updateData) {\n      try {\n        setLoading(true);\n        setError(null);\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n        yield inventoryService.updateItem(itemId, updateData);\n        setInventory(function (prev) {\n          return prev.map(function (item) {\n            return item.id === itemId ? _objectSpread(_objectSpread({}, item), updateData) : item;\n          });\n        });\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to update inventory item.');\n        setError(userFriendlyMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function updateItem(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var deleteItem = function () {\n    var _ref4 = _asyncToGenerator(function* (itemId) {\n      try {\n        setLoading(true);\n        setError(null);\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n        yield inventoryService.deleteItem(itemId);\n        setInventory(function (prev) {\n          return prev.filter(function (item) {\n            return item.id !== itemId;\n          });\n        });\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to delete inventory item.');\n        setError(userFriendlyMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function deleteItem(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (user) {\n      fetchInventory();\n    } else {\n      setInventory([]);\n    }\n  }, [user, fetchInventory]);\n  return {\n    inventory: inventory,\n    loading: loading,\n    error: error,\n    pagination: pagination,\n    setPagination: setPagination,\n    fetchInventory: fetchInventory,\n    addItem: addItem,\n    updateItem: updateItem,\n    deleteItem: deleteItem\n  };\n};\nexport default useInventory;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","inventoryService","errorHandler","useInventory","_useState","_useState2","_slicedToArray","inventory","setInventory","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","limit","startAfter","hasNextPage","_useState8","pagination","setPagination","_useAuth","user","fetchInventory","_asyncToGenerator","options","arguments","length","undefined","Error","fetchOptions","_objectSpread","response","getInventory","uid","data","products","prev","lastVisible","err","userFriendlyMessage","addItem","_ref2","itemData","newItem","concat","_toConsumableArray","_x","apply","updateItem","_ref3","itemId","updateData","map","item","id","_x2","_x3","deleteItem","_ref4","filter","_x4"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/inventory/hooks/useInventory.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../../auth/hooks/useAuth';\r\nimport { inventoryService } from '../services/inventoryService';\r\nimport errorHandler from '../../../shared/utils/errorHandler'; // Import the error handler utility\r\n\r\n/**\r\n * @typedef {object} InventoryItem\r\n * @property {string} id - The item ID.\r\n * @property {string} userId - The ID of the user who owns the item.\r\n * @property {string} name - The item name.\r\n * @property {number} unitPrice - The unit price of the item.\r\n * @property {number} currentStock - The current stock quantity.\r\n * @property {string} category - The item category.\r\n * @property {string} [description] - Item description (optional).\r\n * @property {string} [location] - Item location (optional).\r\n * // Add other relevant inventory item properties here\r\n */\r\n\r\n/**\r\n * @typedef {object} PaginationInfo\r\n * @property {number} limit - The number of items per page.\r\n * @property {string|null} startAfter - The ID of the last item from the previous page (for cursor-based pagination).\r\n * @property {boolean} hasNextPage - Indicates if there are more pages.\r\n */\r\n\r\n/**\r\n * @typedef {object} UseInventoryReturn\r\n * @property {InventoryItem[]} inventory - Array of fetched inventory items.\r\n * @property {boolean} loading - Loading state.\r\n * @property {string|null} error - Error message if fetching/mutating failed.\r\n * @property {PaginationInfo} pagination - Pagination information.\r\n * @property {function(PaginationInfo): void} setPagination - Function to update pagination state.\r\n * @property {function(object): Promise<void>} fetchInventory - Function to fetch inventory items with optional filters/pagination.\r\n * @property {function(object): Promise<object>} addItem - Function to add a new inventory item.\r\n * @property {function(string, object): Promise<void>} updateItem - Function to update an existing inventory item.\r\n * @property {function(string): Promise<void>} deleteItem - Function to delete an inventory item.\r\n */\r\n\r\n/**\r\n * @desc Custom hook for fetching, adding, updating, and deleting user inventory items.\r\n * Manages loading, error, and pagination states.\r\n * @returns {UseInventoryReturn} - Object containing inventory data, state, and functions.\r\n */\r\nexport const useInventory = () => {\r\n  const [inventory, setInventory] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [pagination, setPagination] = useState({ limit: 10, startAfter: null, hasNextPage: true }); // Add pagination state\r\n  const { user } = useAuth();\r\n\r\n  /**\r\n   * @desc Fetches inventory items from the backend API with specified options.\r\n   * Updates inventory and pagination state.\r\n   * @param {object} [options] - Options to override current pagination (e.g., { limit: 20, startAfter: 'abc' }).\r\n   * @returns {Promise<void>}\r\n   */\r\n  const fetchInventory = useCallback(async (options = {}) => { // Accept options for filtering/pagination\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      // Merge default pagination options with provided options\r\n      const fetchOptions = {\r\n          limit: pagination.limit,\r\n          startAfter: pagination.startAfter,\r\n          ...options\r\n      };\r\n\r\n      const response = await inventoryService.getInventory(user.uid, fetchOptions);\r\n      setInventory(response.data.products || []);\r\n      setPagination(prev => ({ // Update pagination state from response\r\n          ...prev,\r\n          startAfter: response.data.pagination.lastVisible,\r\n          hasNextPage: response.data.pagination.hasNextPage\r\n      }));\r\n\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to fetch inventory.');\r\n      setError(userFriendlyMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, pagination.limit, pagination.startAfter]); // Add pagination dependencies\r\n\r\n  /**\r\n   * @desc Adds a new inventory item via the backend API.\r\n   * Adds the new item to the local state.\r\n   * @param {object} itemData - The data for the new inventory item.\r\n   * @returns {Promise<object>} - A promise that resolves with the created item data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  const addItem = async (itemData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      const newItem = await inventoryService.addItem(user.uid, itemData);\r\n      setInventory(prev => [...prev, newItem]);\r\n\r\n      // errorHandler handles the toast internally\r\n      // showToast('Inventory item added successfully', 'success');\r\n      return newItem;\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to add inventory item.');\r\n      setError(userFriendlyMessage);\r\n      throw err; // Re-throw for components that might need to catch\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @desc Updates an existing inventory item via the backend API.\r\n   * Updates the item in the local state.\r\n   * @param {string} itemId - The ID of the item to update.\r\n   * @param {object} updateData - The data to update the item with.\r\n   * @returns {Promise<void>} - A promise that resolves when the update is complete.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  const updateItem = async (itemId, updateData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      await inventoryService.updateItem(itemId, updateData);\r\n\r\n      setInventory(prev =>\r\n        prev.map(item =>\r\n          item.id === itemId ? { ...item, ...updateData } : item\r\n        )\r\n      );\r\n\r\n      // showToast('Inventory item updated successfully', 'success');\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to update inventory item.');\r\n      setError(userFriendlyMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @desc Deletes an inventory item via the backend API.\r\n   * Removes the item from the local state.\r\n   * @param {string} itemId - The ID of the item to delete.\r\n   * @returns {Promise<void>} - A promise that resolves when the deletion is complete.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  const deleteItem = async (itemId) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      await inventoryService.deleteItem(itemId);\r\n\r\n      setInventory(prev => prev.filter(item => item.id !== itemId));\r\n\r\n      // showToast('Inventory item deleted successfully', 'success');\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to delete inventory item.');\r\n      setError(userFriendlyMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch inventory when user changes or pagination/filters change\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchInventory();\r\n    } else {\r\n      setInventory([]);\r\n    }\r\n  }, [user, fetchInventory]); // Add fetchInventory as a dependency\r\n\r\n  return {\r\n    inventory,\r\n    loading,\r\n    error,\r\n    pagination, // Return pagination state\r\n    setPagination, // Return setPagination to allow components to control pagination\r\n    fetchInventory, // Keep fetchInventory for manual refetching with options\r\n    addItem,\r\n    updateItem,\r\n    deleteItem\r\n  };\r\n};\r\n\r\nexport default useInventory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}