{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nexport var AuthErrorType = function (AuthErrorType) {\n  AuthErrorType[\"INVALID_EMAIL\"] = \"INVALID_EMAIL\";\n  AuthErrorType[\"WRONG_PASSWORD\"] = \"WRONG_PASSWORD\";\n  AuthErrorType[\"USER_NOT_FOUND\"] = \"USER_NOT_FOUND\";\n  AuthErrorType[\"EMAIL_ALREADY_IN_USE\"] = \"EMAIL_ALREADY_IN_USE\";\n  AuthErrorType[\"WEAK_PASSWORD\"] = \"WEAK_PASSWORD\";\n  AuthErrorType[\"TOO_MANY_REQUESTS\"] = \"TOO_MANY_REQUESTS\";\n  AuthErrorType[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  return AuthErrorType;\n}({});\nexport var AuthError = function (_Error) {\n  function AuthError(message, type) {\n    var _this;\n    _classCallCheck(this, AuthError);\n    _this = _callSuper(this, AuthError, [message]);\n    _this.name = 'AuthError';\n    _this.type = type;\n    return _this;\n  }\n  _inherits(AuthError, _Error);\n  return _createClass(AuthError);\n}(_wrapNativeSuper(Error));","map":{"version":3,"names":["AuthErrorType","AuthError","_Error","message","type","_this","_classCallCheck","_callSuper","name","_inherits","_createClass","_wrapNativeSuper","Error"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/auth/types/authTypes.ts"],"sourcesContent":["// Authentication Types for Receipt Scanner App\r\n\r\n/**\r\n * Represents the basic user profile information\r\n */\r\nexport interface UserProfile {\r\n    id: string;\r\n    email: string;\r\n    displayName?: string;\r\n    photoURL?: string;\r\n    createdAt: string;\r\n    lastLoginAt?: string;\r\n  }\r\n  \r\n  /**\r\n   * Represents the authentication credentials for login\r\n   */\r\n  export interface LoginCredentials {\r\n    email: string;\r\n    password: string;\r\n  }\r\n  \r\n  /**\r\n   * Represents the registration data for a new user\r\n   */\r\n  export interface RegisterData {\r\n    email: string;\r\n    password: string;\r\n    displayName?: string;\r\n    termsAccepted: boolean;\r\n  }\r\n  \r\n  /**\r\n   * Represents the complete user object after authentication\r\n   */\r\n  export interface User extends UserProfile {\r\n    token: string;\r\n    refreshToken?: string;\r\n  }\r\n  \r\n  /**\r\n   * Represents the authentication state\r\n   */\r\n  export interface AuthState {\r\n    isAuthenticated: boolean;\r\n    user: User | null;\r\n    loading: boolean;\r\n    error: string | null;\r\n  }\r\n  \r\n  /**\r\n   * Defines the shape of password reset request\r\n   */\r\n  export interface PasswordResetRequest {\r\n    email: string;\r\n  }\r\n  \r\n  /**\r\n   * Represents possible authentication methods\r\n   */\r\n  export type AuthMethod = 'email' | 'google' | 'apple';\r\n  \r\n  /**\r\n   * Interface for authentication service methods\r\n   */\r\n  export interface AuthService {\r\n    login(credentials: LoginCredentials): Promise<User>;\r\n    register(userData: RegisterData): Promise<User>;\r\n    logout(): Promise<void>;\r\n    resetPassword(email: string): Promise<void>;\r\n    getCurrentUser(): User | null;\r\n    refreshToken(): Promise<string>;\r\n    updateProfile(updates: Partial<UserProfile>): Promise<UserProfile>;\r\n  }\r\n  \r\n  /**\r\n   * Defines possible authentication errors\r\n   */\r\n  export enum AuthErrorType {\r\n    INVALID_EMAIL = 'INVALID_EMAIL',\r\n    WRONG_PASSWORD = 'WRONG_PASSWORD',\r\n    USER_NOT_FOUND = 'USER_NOT_FOUND',\r\n    EMAIL_ALREADY_IN_USE = 'EMAIL_ALREADY_IN_USE',\r\n    WEAK_PASSWORD = 'WEAK_PASSWORD',\r\n    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',\r\n    UNKNOWN_ERROR = 'UNKNOWN_ERROR'\r\n  }\r\n  \r\n  /**\r\n   * Custom authentication error class\r\n   */\r\n  export class AuthError extends Error {\r\n    type: AuthErrorType;\r\n    \r\n    constructor(message: string, type: AuthErrorType) {\r\n      super(message);\r\n      this.name = 'AuthError';\r\n      this.type = type;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * OAuth Provider Configuration\r\n   */\r\n  export interface OAuthProviderConfig {\r\n    provider: AuthMethod;\r\n    clientId?: string;\r\n    scopes?: string[];\r\n  }\r\n  \r\n  /**\r\n   * User Preferences related to Authentication\r\n   */\r\n  export interface AuthPreferences {\r\n    rememberMe: boolean;\r\n    twoFactorEnabled: boolean;\r\n    preferredAuthMethod?: AuthMethod;\r\n  }"],"mappings":";;;;;;;;AA8EE,WAAYA,aAAa,aAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AAazB,WAAaC,SAAS,aAAAC,MAAA;EAGpB,SAAAD,UAAYE,OAAe,EAAEC,IAAmB,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,SAAA;IAChDI,KAAA,GAAAE,UAAA,OAAAN,SAAA,GAAME,OAAO;IACbE,KAAA,CAAKG,IAAI,GAAG,WAAW;IACvBH,KAAA,CAAKD,IAAI,GAAGA,IAAI;IAAC,OAAAC,KAAA;EACnB;EAACI,SAAA,CAAAR,SAAA,EAAAC,MAAA;EAAA,OAAAQ,YAAA,CAAAT,SAAA;AAAA,EAAAU,gBAAA,CAP4BC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}