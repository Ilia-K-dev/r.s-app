{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nexport var formatCurrency = function formatCurrency(value) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  if (value === null || value === undefined) {\n    return '';\n  }\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency\n    }).format(value);\n  } catch (error) {\n    console.error('Error formatting currency:', error);\n    return value.toFixed(2);\n  }\n};\nexport var parseCurrencyInput = function parseCurrencyInput(input) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  if (!input) return null;\n  try {\n    var cleanedInput = input.replace(/[^0-9.-]/g, '');\n    var parts = cleanedInput.split('.');\n    if (parts.length > 2) {\n      parts[0] + '.' + parts.slice(1).join(''), _readOnlyError(\"cleanedInput\");\n    }\n    var parsedValue = parseFloat(cleanedInput);\n    return isNaN(parsedValue) ? null : parsedValue;\n  } catch (error) {\n    console.error('Error parsing currency input:', error);\n    return null;\n  }\n};\nexport var convertCurrency = function convertCurrency(amount, fromCurrency, toCurrency, exchangeRates) {\n  if (!exchangeRates || !exchangeRates[fromCurrency] || !exchangeRates[toCurrency]) {\n    console.error('Exchange rates not available for conversion');\n    return null;\n  }\n  var amountInBaseCurrency = amount / exchangeRates[fromCurrency];\n  var convertedAmount = amountInBaseCurrency * exchangeRates[toCurrency];\n  return convertedAmount;\n};\nexport var getCurrencySymbol = function getCurrencySymbol() {\n  var currency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'USD';\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  try {\n    var formatter = new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    });\n    return formatter.format(0).replace(/\\d/g, '').trim();\n  } catch (error) {\n    console.error('Error getting currency symbol:', error);\n    return '$';\n  }\n};\nexport default {\n  formatCurrency: formatCurrency,\n  parseCurrencyInput: parseCurrencyInput,\n  convertCurrency: convertCurrency,\n  getCurrencySymbol: getCurrencySymbol\n};","map":{"version":3,"names":["formatCurrency","value","currency","arguments","length","undefined","locale","Intl","NumberFormat","style","format","error","console","toFixed","parseCurrencyInput","input","cleanedInput","replace","parts","split","slice","join","_readOnlyError","parsedValue","parseFloat","isNaN","convertCurrency","amount","fromCurrency","toCurrency","exchangeRates","amountInBaseCurrency","convertedAmount","getCurrencySymbol","formatter","minimumFractionDigits","maximumFractionDigits","trim"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/currency.js"],"sourcesContent":["/**\r\n * Format currency value\r\n */\r\nexport const formatCurrency = (value, currency = 'USD', locale = 'en-US') => {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n\r\n  try {\r\n    return new Intl.NumberFormat(locale, {\r\n      style: 'currency',\r\n      currency: currency,\r\n    }).format(value);\r\n  } catch (error) {\r\n    console.error('Error formatting currency:', error);\r\n    return value.toFixed(2); // Fallback\r\n  }\r\n};\r\n\r\n/**\r\n * Parse currency input string (e.g., \"$1,234.56\" -> 1234.56)\r\n */\r\nexport const parseCurrencyInput = (input, locale = 'en-US') => {\r\n  if (!input) return null;\r\n\r\n  try {\r\n    // Remove currency symbols, commas, and other non-numeric characters except decimal point\r\n    const cleanedInput = input.replace(/[^0-9.-]/g, '');\r\n\r\n    // Handle multiple decimal points (keep only the last one)\r\n    const parts = cleanedInput.split('.');\r\n    if (parts.length > 2) {\r\n      cleanedInput = parts[0] + '.' + parts.slice(1).join('');\r\n    }\r\n\r\n    const parsedValue = parseFloat(cleanedInput);\r\n\r\n    return isNaN(parsedValue) ? null : parsedValue;\r\n  } catch (error) {\r\n    console.error('Error parsing currency input:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Convert currency from one to another (requires exchange rate data)\r\n */\r\nexport const convertCurrency = (amount, fromCurrency, toCurrency, exchangeRates) => {\r\n  if (!exchangeRates || !exchangeRates[fromCurrency] || !exchangeRates[toCurrency]) {\r\n    console.error('Exchange rates not available for conversion');\r\n    return null; // Or throw an error\r\n  }\r\n\r\n  const amountInBaseCurrency = amount / exchangeRates[fromCurrency];\r\n  const convertedAmount = amountInBaseCurrency * exchangeRates[toCurrency];\r\n\r\n  return convertedAmount;\r\n};\r\n\r\n/**\r\n * Get currency symbol\r\n */\r\nexport const getCurrencySymbol = (currency = 'USD', locale = 'en-US') => {\r\n  try {\r\n    const formatter = new Intl.NumberFormat(locale, {\r\n      style: 'currency',\r\n      currency: currency,\r\n      minimumFractionDigits: 0, // Avoid fractional digits for symbol only\r\n      maximumFractionDigits: 0,\r\n    });\r\n    // Format a zero value and extract the symbol\r\n    return formatter.format(0).replace(/\\d/g, '').trim();\r\n  } catch (error) {\r\n    console.error('Error getting currency symbol:', error);\r\n    return '$'; // Fallback\r\n  }\r\n};\r\n\r\nexport default {\r\n  formatCurrency,\r\n  parseCurrencyInput,\r\n  convertCurrency,\r\n  getCurrencySymbol,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}