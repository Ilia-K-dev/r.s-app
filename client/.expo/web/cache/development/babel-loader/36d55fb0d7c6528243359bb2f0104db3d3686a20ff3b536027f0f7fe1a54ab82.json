{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { isFeatureEnabled, enableFeature, disableFeature, getAllFeatureFlags } from \"../../../core/config/featureFlags\";\nimport { openDB } from 'idb';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DB_NAME = 'featureFlagsDB';\nvar STORE_NAME = 'flags';\nvar FLAGS_KEY = 'currentFlags';\nvar featureFlagDescriptions = {\n  firebaseDirectIntegration: 'Enables direct integration with Firebase services (Firestore, Storage, etc.) instead of using the Express backend API.',\n  analyticsDirectIntegration: 'Enables direct integration with analytics services instead of using a backend proxy.'\n};\nvar canEditFeatureFlags = function canEditFeatureFlags(user) {\n  return true;\n};\nvar FeatureToggles = function FeatureToggles() {\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    allFlags = _useState2[0],\n    setAllFlags = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    auditLog = _useState4[0],\n    setAuditLog = _useState4[1];\n  var _useState5 = useState(canEditFeatureFlags(null)),\n    _useState6 = _slicedToArray(_useState5, 2),\n    canEdit = _useState6[0],\n    setCanEdit = _useState6[1];\n  useEffect(function () {\n    var loadData = function () {\n      var _ref = _asyncToGenerator(function* () {\n        setAllFlags(getAllFeatureFlags());\n        yield loadAuditLog();\n      });\n      return function loadData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var handleStorageChange = function handleStorageChange() {\n      console.log('Storage change detected, reloading feature flags and audit log.');\n      loadData();\n    };\n    window.addEventListener('storage', handleStorageChange);\n    loadData();\n    return function () {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  var loadAuditLog = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var db = yield openDB(DB_NAME, 1);\n        var savedData = yield db.get(STORE_NAME, FLAGS_KEY);\n        if (savedData && savedData.audit) {\n          setAuditLog([savedData.audit]);\n        } else {\n          setAuditLog([]);\n        }\n      } catch (error) {\n        console.error('Error loading audit log from IndexedDB:', error);\n        setAuditLog([]);\n      }\n    });\n    return function loadAuditLog() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleToggleChange = function () {\n    var _ref3 = _asyncToGenerator(function* (featureName, isEnabled) {\n      if (!canEdit) {\n        alert('You do not have permission to change feature flags.');\n        return;\n      }\n      if (isEnabled) {\n        yield enableFeature(featureName);\n      } else {\n        yield disableFeature(featureName);\n      }\n      setAllFlags(getAllFeatureFlags());\n      yield loadAuditLog();\n    });\n    return function handleToggleChange(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(\"div\", {\n    children: [_jsx(\"h2\", {\n      children: \"Feature Toggles Admin\"\n    }), !canEdit && _jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"You do not have permission to edit feature flags.\"\n    }), _jsxs(\"div\", {\n      children: [_jsx(\"h3\", {\n        children: \"Available Flags:\"\n      }), Object.entries(allFlags).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          flagName = _ref5[0],\n          isEnabled = _ref5[1];\n        return _jsxs(\"div\", {\n          style: {\n            marginBottom: '15px',\n            padding: '10px',\n            border: '1px solid #ccc'\n          },\n          children: [_jsx(\"h4\", {\n            children: flagName\n          }), _jsxs(\"p\", {\n            children: [\"Status: \", _jsx(\"strong\", {\n              style: {\n                color: isEnabled ? 'green' : 'red'\n              },\n              children: isEnabled ? 'Enabled' : 'Disabled'\n            })]\n          }), _jsxs(\"p\", {\n            children: [\"Description: \", featureFlagDescriptions[flagName] || 'No description available.']\n          }), _jsx(\"button\", {\n            onClick: function onClick() {\n              return handleToggleChange(flagName, true);\n            },\n            disabled: isEnabled || !canEdit,\n            children: \"Enable\"\n          }), _jsx(\"button\", {\n            onClick: function onClick() {\n              return handleToggleChange(flagName, false);\n            },\n            disabled: !isEnabled || !canEdit,\n            children: \"Disable\"\n          })]\n        }, flagName);\n      })]\n    }), _jsxs(\"div\", {\n      children: [_jsx(\"h3\", {\n        children: \"Flag Change History (Last Change):\"\n      }), auditLog.length > 0 ? _jsx(\"ul\", {\n        children: auditLog.map(function (log, index) {\n          return _jsxs(\"li\", {\n            children: [\"Timestamp: \", log.timestamp, \", User: \", log.userId]\n          }, index);\n        })\n      }) : _jsx(\"p\", {\n        children: \"No change history available.\"\n      })]\n    })]\n  });\n};\nexport default FeatureToggles;","map":{"version":3,"names":["React","useState","useEffect","isFeatureEnabled","enableFeature","disableFeature","getAllFeatureFlags","openDB","jsx","_jsx","jsxs","_jsxs","DB_NAME","STORE_NAME","FLAGS_KEY","featureFlagDescriptions","firebaseDirectIntegration","analyticsDirectIntegration","canEditFeatureFlags","user","FeatureToggles","_useState","_useState2","_slicedToArray","allFlags","setAllFlags","_useState3","_useState4","auditLog","setAuditLog","_useState5","_useState6","canEdit","setCanEdit","loadData","_ref","_asyncToGenerator","loadAuditLog","apply","arguments","handleStorageChange","console","log","window","addEventListener","removeEventListener","_ref2","db","savedData","get","audit","error","handleToggleChange","_ref3","featureName","isEnabled","alert","_x","_x2","children","style","color","Object","entries","map","_ref4","_ref5","flagName","marginBottom","padding","border","onClick","disabled","length","index","timestamp","userId"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/settings/components/FeatureToggles.js"],"sourcesContent":["// client/src/features/settings/components/FeatureToggles.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { isFeatureEnabled, enableFeature, disableFeature, getAllFeatureFlags } from '../../../core/config/featureFlags';\r\nimport { openDB } from 'idb'; // Import openDB to access audit logs\r\n\r\n// IndexedDB configuration (should match featureFlags.js)\r\nconst DB_NAME = 'featureFlagsDB';\r\nconst STORE_NAME = 'flags';\r\nconst FLAGS_KEY = 'currentFlags';\r\n\r\n// Feature flag descriptions (can be moved to a separate config file later)\r\nconst featureFlagDescriptions = {\r\n  firebaseDirectIntegration: 'Enables direct integration with Firebase services (Firestore, Storage, etc.) instead of using the Express backend API.',\r\n  analyticsDirectIntegration: 'Enables direct integration with analytics services instead of using a backend proxy.',\r\n  // Add descriptions for other flags here\r\n};\r\n\r\n// Placeholder for permission check (replace with actual permission logic)\r\nconst canEditFeatureFlags = (user) => {\r\n  // In a real application, check user roles or permissions\r\n  // For now, we'll assume anyone can edit in a dev/staging environment\r\n  return true;\r\n};\r\n\r\nconst FeatureToggles = () => {\r\n  const [allFlags, setAllFlags] = useState({});\r\n  const [auditLog, setAuditLog] = useState([]);\r\n  const [canEdit, setCanEdit] = useState(canEditFeatureFlags(null)); // Pass actual user object if available\r\n\r\n  // Load flags and audit log on component mount and when storage changes\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      setAllFlags(getAllFeatureFlags());\r\n      await loadAuditLog();\r\n    };\r\n\r\n    const handleStorageChange = () => {\r\n      console.log('Storage change detected, reloading feature flags and audit log.');\r\n      loadData();\r\n    };\r\n\r\n    // Listen for changes signaled from other tabs (via localStorage event)\r\n    window.addEventListener('storage', handleStorageChange);\r\n\r\n    // Initial load\r\n    loadData();\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, []);\r\n\r\n  const loadAuditLog = async () => {\r\n    try {\r\n      const db = await openDB(DB_NAME, 1); // Use DB_VERSION from featureFlags.js if possible, or hardcode if stable\r\n      const savedData = await db.get(STORE_NAME, FLAGS_KEY);\r\n      if (savedData && savedData.audit) {\r\n        // For now, we just store the last audit entry.\r\n        // To have a full log, we'd need a separate object store for audit entries.\r\n        // This is a simplified view showing the last change.\r\n        setAuditLog([savedData.audit]);\r\n      } else {\r\n        setAuditLog([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading audit log from IndexedDB:', error);\r\n      setAuditLog([]);\r\n    }\r\n  };\r\n\r\n\r\n  const handleToggleChange = async (featureName, isEnabled) => {\r\n    if (!canEdit) {\r\n      alert('You do not have permission to change feature flags.');\r\n      return;\r\n    }\r\n\r\n    if (isEnabled) {\r\n      await enableFeature(featureName);\r\n    } else {\r\n      await disableFeature(featureName);\r\n    }\r\n    // Update local state after change\r\n    setAllFlags(getAllFeatureFlags());\r\n    await loadAuditLog(); // Reload audit log after a change\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Feature Toggles Admin</h2>\r\n\r\n      {!canEdit && (\r\n        <p style={{ color: 'red' }}>You do not have permission to edit feature flags.</p>\r\n      )}\r\n\r\n      <div>\r\n        <h3>Available Flags:</h3>\r\n        {Object.entries(allFlags).map(([flagName, isEnabled]) => (\r\n          <div key={flagName} style={{ marginBottom: '15px', padding: '10px', border: '1px solid #ccc' }}>\r\n            <h4>{flagName}</h4>\r\n            <p>Status: <strong style={{ color: isEnabled ? 'green' : 'red' }}>{isEnabled ? 'Enabled' : 'Disabled'}</strong></p>\r\n            <p>Description: {featureFlagDescriptions[flagName] || 'No description available.'}</p>\r\n            <button onClick={() => handleToggleChange(flagName, true)} disabled={isEnabled || !canEdit}>Enable</button>\r\n            <button onClick={() => handleToggleChange(flagName, false)} disabled={!isEnabled || !canEdit}>Disable</button>\r\n            {/* Placeholder for permission control per flag */}\r\n            {/* <p>Permissions: Admin Only</p> */}\r\n            {/* Placeholder for flag status visualization (basic text status above) */}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Placeholder for comprehensive admin controls (e.g., adding/removing flags - requires backend) */}\r\n      {/* <div>\r\n        <h3>Admin Controls</h3>\r\n        <p>Add New Flag (Requires Backend)</p>\r\n        <p>Remove Flag (Requires Backend)</p>\r\n      </div> */}\r\n\r\n      <div>\r\n        <h3>Flag Change History (Last Change):</h3>\r\n        {auditLog.length > 0 ? (\r\n          <ul>\r\n            {auditLog.map((log, index) => (\r\n              <li key={index}>\r\n                Timestamp: {log.timestamp}, User: {log.userId}\r\n                {/* To show which flag changed, we would need a more detailed audit log in IndexedDB */}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        ) : (\r\n          <p>No change history available.</p>\r\n        )}\r\n         {/* Placeholder for full audit log view */}\r\n         {/* <p>View Full Audit Log (Requires separate audit store in IndexedDB)</p> */}\r\n      </div>\r\n\r\n      {/* Placeholder for Flag Analytics */}\r\n      {/* <div>\r\n        <h3>Flag Analytics</h3>\r\n        <p>Usage Tracking: (Requires analytics integration)</p>\r\n        <p>Performance Monitoring: (Requires performance monitoring integration)</p>\r\n        <p>Impact Visualization: (Requires data collection and visualization library)</p>\r\n        <p>User Segment Analysis: (Requires user segmentation logic)</p>\r\n      </div> */}\r\n\r\n       {/* Placeholder for Auto-Disable System Status */}\r\n       {/* <div>\r\n         <h3>Auto-Disable System Status</h3>\r\n         <p>Error Thresholds: (Display configured thresholds)</p>\r\n         <p>Current Error Counts: (Display current counts per feature)</p>\r\n         <p>Auto-Disabled Flags: (List flags currently auto-disabled)</p>\r\n         <p>Recovery Status: (Show status of gradual recovery)</p>\r\n       </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeatureToggles;\r\n\r\n// Add comments about purpose and design\r\n// Purpose: Provides an enhanced user interface for managing feature flags, displaying their status, descriptions, and basic change history.\r\n// Design: A React functional component that fetches all available flags and their states. It renders a list of toggles, allowing users with sufficient permissions to enable or disable flags. It also displays descriptions and a simplified view of the last change from the audit log stored in IndexedDB. Placeholder sections are included for future comprehensive admin controls, analytics, and auto-disable system status.\r\n// How to add to the app: This component should be added to a protected settings page or an admin panel route within the client application, ensuring only authorized users can access and modify feature flags.\r\n// Permissions: Includes a placeholder `canEditFeatureFlags` function to demonstrate how permission checks can be integrated. This should be replaced with actual user role/permission logic.\r\n// Audit Log: Currently displays only the timestamp and user ID of the last change stored with the flags in IndexedDB. A full audit log would require a dedicated object store in IndexedDB to store each change event.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}