{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"providers\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidModFileProviders = getAndroidModFileProviders;\nexports.sortAndroidManifest = sortAndroidManifest;\nexports.withAndroidBaseMods = withAndroidBaseMods;\nfunction _fs() {\n  var data = require(\"fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _android() {\n  var data = require(\"../android\");\n  _android = function _android() {\n    return data;\n  };\n  return data;\n}\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n  _XML = function _XML() {\n    return data;\n  };\n  return data;\n}\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n  _sortObject = function _sortObject() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _fs$promises = _fs().promises,\n  readFile = _fs$promises.readFile,\n  writeFile = _fs$promises.writeFile;\nfunction getAndroidManifestTemplate(config) {\n  var _config$android$packa, _config$android;\n  return (0, _XML().parseXMLAsync)(`\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${(_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : 'com.placeholder.appid'}\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n    <!-- These require runtime permissions on M -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <!-- END OPTIONAL PERMISSIONS -->\n\n    <queries>\n      <!-- Support checking for http(s) links via the Linking API -->\n      <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" />\n      </intent>\n    </queries>\n\n    <application\n      android:name=\".MainApplication\"\n      android:label=\"@string/app_name\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:allowBackup=\"false\"\n      android:theme=\"@style/AppTheme\"\n      android:usesCleartextTraffic=\"true\"\n    >\n      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n      <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n      <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:theme=\"@style/Theme.App.SplashScreen\"\n      >\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\"/>\n          <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n      </activity>\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n    </application>\n  </manifest>\n  `);\n}\nfunction sortAndroidManifest(obj) {\n  if (obj.manifest) {\n    obj.manifest = (0, _sortObject().sortObject)(obj.manifest, _sortObject().reverseSortString);\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      obj.manifest['uses-permission'].sort(function (a, b) {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n    if (Array.isArray(obj.manifest.application)) {\n      obj.manifest.application = obj.manifest.application.map(function (application) {\n        application = (0, _sortObject().sortObjWithOrder)(application, ['meta-data', 'service', 'activity']);\n        if (Array.isArray(application['meta-data'])) {\n          application['meta-data'].sort(function (a, b) {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function () {\n      var _read = _asyncToGenerator(function* () {\n        return {\n          filePath: '',\n          modResults: {}\n        };\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write = _asyncToGenerator(function* () {});\n      function write() {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  manifest: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref) {\n      var platformProjectRoot = _ref.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    read: function () {\n      var _read2 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Manifest.readAndroidManifestAsync(filePath);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return yield getAndroidManifestTemplate(config);\n      });\n      function read(_x, _x2) {\n        return _read2.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write2 = _asyncToGenerator(function* (filePath, _ref2) {\n        var modResults = _ref2.modResults,\n          introspect = _ref2.modRequest.introspect;\n        if (introspect) return;\n        yield _android().Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n      });\n      function write(_x3, _x4) {\n        return _write2.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  gradleProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var platformProjectRoot = _ref3.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'gradle.properties');\n    },\n    read: function () {\n      var _read3 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Properties.parsePropertiesFile(yield readFile(filePath, 'utf8'));\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return [];\n      });\n      function read(_x5, _x6) {\n        return _read3.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write3 = _asyncToGenerator(function* (filePath, _ref4) {\n        var modResults = _ref4.modResults,\n          introspect = _ref4.modRequest.introspect;\n        if (introspect) return;\n        yield writeFile(filePath, _android().Properties.propertiesListToString(modResults));\n      });\n      function write(_x7, _x8) {\n        return _write3.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  strings: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath = _asyncToGenerator(function* (_ref5) {\n        var _ref5$modRequest = _ref5.modRequest,\n          projectRoot = _ref5$modRequest.projectRoot,\n          introspect = _ref5$modRequest.introspect;\n        try {\n          return yield _android().Strings.getProjectStringsXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x9) {\n        return _getFilePath.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read4 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x0, _x1) {\n        return _read4.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write4 = _asyncToGenerator(function* (filePath, _ref6) {\n        var modResults = _ref6.modResults,\n          introspect = _ref6.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x10, _x11) {\n        return _write4.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  colors: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath2 = _asyncToGenerator(function* (_ref7) {\n        var _ref7$modRequest = _ref7.modRequest,\n          projectRoot = _ref7$modRequest.projectRoot,\n          introspect = _ref7$modRequest.introspect;\n        try {\n          return yield _android().Colors.getProjectColorsXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x12) {\n        return _getFilePath2.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read5 = _asyncToGenerator(function* (filePath, _ref8) {\n        var introspect = _ref8.modRequest.introspect;\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x13, _x14) {\n        return _read5.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write5 = _asyncToGenerator(function* (filePath, _ref9) {\n        var modResults = _ref9.modResults,\n          introspect = _ref9.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x15, _x16) {\n        return _write5.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  colorsNight: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath3 = _asyncToGenerator(function* (_ref0) {\n        var _ref0$modRequest = _ref0.modRequest,\n          projectRoot = _ref0$modRequest.projectRoot,\n          introspect = _ref0$modRequest.introspect;\n        try {\n          return yield _android().Colors.getProjectColorsXMLPathAsync(projectRoot, {\n            kind: 'values-night'\n          });\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x17) {\n        return _getFilePath3.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read6 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x18, _x19) {\n        return _read6.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write6 = _asyncToGenerator(function* (filePath, _ref1) {\n        var modResults = _ref1.modResults,\n          introspect = _ref1.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x20, _x21) {\n        return _write6.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  styles: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath4 = _asyncToGenerator(function* (_ref10) {\n        var _ref10$modRequest = _ref10.modRequest,\n          projectRoot = _ref10$modRequest.projectRoot,\n          introspect = _ref10$modRequest.introspect;\n        try {\n          return yield _android().Styles.getProjectStylesXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x22) {\n        return _getFilePath4.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read7 = _asyncToGenerator(function* (filePath, config) {\n        var _styles$resources$$;\n        var styles = {\n          resources: {}\n        };\n        try {\n          styles = yield _android().Resources.readResourcesXMLAsync({\n            path: filePath,\n            fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        if (!styles.resources.$) {\n          styles.resources.$ = {};\n        }\n        if (!((_styles$resources$$ = styles.resources.$) !== null && _styles$resources$$ !== void 0 && _styles$resources$$['xmlns:tools'])) {\n          styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n        }\n        return styles;\n      });\n      function read(_x23, _x24) {\n        return _read7.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write7 = _asyncToGenerator(function* (filePath, _ref11) {\n        var modResults = _ref11.modResults,\n          introspect = _ref11.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x25, _x26) {\n        return _write7.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  projectBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref12) {\n      var projectRoot = _ref12.modRequest.projectRoot;\n      return _android().Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read8 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x27) {\n        return _read8.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write8 = _asyncToGenerator(function* (filePath, _ref13) {\n        var contents = _ref13.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x28, _x29) {\n        return _write8.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  settingsGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref14) {\n      var projectRoot = _ref14.modRequest.projectRoot;\n      return _android().Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read9 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x30) {\n        return _read9.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write9 = _asyncToGenerator(function* (filePath, _ref15) {\n        var contents = _ref15.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x31, _x32) {\n        return _write9.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  appBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref16) {\n      var projectRoot = _ref16.modRequest.projectRoot;\n      return _android().Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read0 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x33) {\n        return _read0.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write0 = _asyncToGenerator(function* (filePath, _ref17) {\n        var contents = _ref17.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x34, _x35) {\n        return _write0.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  mainActivity: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref18) {\n      var projectRoot = _ref18.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    read: function () {\n      var _read1 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x36) {\n        return _read1.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write1 = _asyncToGenerator(function* (filePath, _ref19) {\n        var contents = _ref19.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x37, _x38) {\n        return _write1.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  mainApplication: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref20) {\n      var projectRoot = _ref20.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    read: function () {\n      var _read10 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x39) {\n        return _read10.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write10 = _asyncToGenerator(function* (filePath, _ref21) {\n        var contents = _ref21.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x40, _x41) {\n        return _write10.apply(this, arguments);\n      }\n      return write;\n    }()\n  })\n};\nfunction withAndroidBaseMods(config) {\n  var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var providers = _ref22.providers,\n    props = _objectWithoutProperties(_ref22, _excluded);\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, _objectSpread(_objectSpread({}, props), {}, {\n    platform: 'android',\n    providers: providers !== null && providers !== void 0 ? providers : getAndroidModFileProviders()\n  }));\n}\nfunction getAndroidModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"names":["_fs","data","require","_path","_interopRequireDefault","_android","_XML","_sortObject","_createBaseMod","obj","__esModule","default","_fs$promises","promises","readFile","writeFile","getAndroidManifestTemplate","config","_config$android$packa","_config$android","parseXMLAsync","android","package","sortAndroidManifest","manifest","sortObject","reverseSortString","Array","isArray","sort","a","b","$","application","map","sortObjWithOrder","defaultProviders","dangerous","provider","getFilePath","read","_read","_asyncToGenerator","filePath","modResults","apply","arguments","write","_write","isIntrospective","_ref","platformProjectRoot","modRequest","join","_read2","Manifest","readAndroidManifestAsync","error","introspect","_x","_x2","_write2","_ref2","writeAndroidManifestAsync","_x3","_x4","gradleProperties","_ref3","_read3","Properties","parsePropertiesFile","_x5","_x6","_write3","_ref4","propertiesListToString","_x7","_x8","strings","_getFilePath","_ref5","_ref5$modRequest","projectRoot","Strings","getProjectStringsXMLPathAsync","_x9","_read4","Resources","readResourcesXMLAsync","path","resources","_x0","_x1","_write4","_ref6","writeXMLAsync","xml","_x10","_x11","colors","_getFilePath2","_ref7","_ref7$modRequest","Colors","getProjectColorsXMLPathAsync","_x12","_read5","_ref8","_x13","_x14","_write5","_ref9","_x15","_x16","colorsNight","_getFilePath3","_ref0","_ref0$modRequest","kind","_x17","_read6","_x18","_x19","_write6","_ref1","_x20","_x21","styles","_getFilePath4","_ref10","_ref10$modRequest","Styles","getProjectStylesXMLPathAsync","_x22","_read7","_styles$resources$$","fallback","_x23","_x24","_write7","_ref11","_x25","_x26","projectBuildGradle","_ref12","Paths","getProjectBuildGradleFilePath","_read8","getFileInfo","_x27","_write8","_ref13","contents","_x28","_x29","settingsGradle","_ref14","getSettingsGradleFilePath","_read9","_x30","_write9","_ref15","_x31","_x32","appBuildGradle","_ref16","getAppBuildGradleFilePath","_read0","_x33","_write0","_ref17","_x34","_x35","mainActivity","_ref18","getProjectFilePath","_read1","_x36","_write1","_ref19","_x37","_x38","mainApplication","_ref20","_read10","_x39","_write10","_ref21","_x40","_x41","withAndroidBaseMods","_ref22","length","undefined","providers","props","_objectWithoutProperties","_excluded","withGeneratedBaseMods","_objectSpread","platform","getAndroidModFileProviders"],"sources":["C:\\Users\\user\\Documents\\app.v3\\client\\node_modules\\@expo\\config-plugins\\src\\plugins\\withAndroidBaseMods.ts"],"sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport { parseXMLAsync, writeXMLAsync } from '../utils/XML';\nimport { reverseSortString, sortObject, sortObjWithOrder } from '../utils/sortObject';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nfunction getAndroidManifestTemplate(config: ExportedConfig) {\n  // Keep in sync with https://github.com/expo/expo/blob/master/templates/expo-template-bare-minimum/android/app/src/main/AndroidManifest.xml\n  // TODO: Read from remote template when possible\n  return parseXMLAsync(`\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${\n    config.android?.package ?? 'com.placeholder.appid'\n  }\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n    <!-- These require runtime permissions on M -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <!-- END OPTIONAL PERMISSIONS -->\n\n    <queries>\n      <!-- Support checking for http(s) links via the Linking API -->\n      <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" />\n      </intent>\n    </queries>\n\n    <application\n      android:name=\".MainApplication\"\n      android:label=\"@string/app_name\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:allowBackup=\"false\"\n      android:theme=\"@style/AppTheme\"\n      android:usesCleartextTraffic=\"true\"\n    >\n      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n      <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n      <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:theme=\"@style/Theme.App.SplashScreen\"\n      >\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\"/>\n          <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n      </activity>\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n    </application>\n  </manifest>\n  `) as Promise<AndroidManifest>;\n}\n\nexport function sortAndroidManifest(obj: AndroidManifest) {\n  if (obj.manifest) {\n    // Reverse sort so application is last and permissions are first\n    obj.manifest = sortObject(obj.manifest, reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      // Sort permissions alphabetically\n      obj.manifest['uses-permission'].sort((a, b) => {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      // reverse sort applications so activity is towards the end and meta-data is towards the front.\n      obj.manifest.application = obj.manifest.application.map((application) => {\n        application = sortObjWithOrder(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          // Sort metadata alphabetically\n          application['meta-data'].sort((a, b) => {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath, config) {\n      try {\n        return await Manifest.readAndroidManifestAsync(filePath);\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return await getAndroidManifestTemplate(config);\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath, config) {\n      try {\n        return await Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return [];\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Strings.getProjectStringsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Styles.getProjectStylesXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      let styles: Resources.ResourceXML = { resources: {} };\n\n      try {\n        // Adds support for `tools:x`\n        styles = await Resources.readResourcesXMLAsync({\n          path: filePath,\n          fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n        });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainApplication: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}