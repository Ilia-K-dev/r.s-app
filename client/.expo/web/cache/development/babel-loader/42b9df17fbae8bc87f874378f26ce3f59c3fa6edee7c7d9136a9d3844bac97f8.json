{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { ResponsiveContainer, PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';\nimport { generateChartColors } from \"../../../utils/chartHelpers\";\nimport { formatCurrency } from \"../../src/shared/utils/currency\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RADIAN = Math.PI / 180;\nvar DonutChart = function DonutChart(_ref) {\n  var _ref$data = _ref.data,\n    data = _ref$data === void 0 ? [] : _ref$data,\n    _ref$nameKey = _ref.nameKey,\n    nameKey = _ref$nameKey === void 0 ? 'name' : _ref$nameKey,\n    _ref$valueKey = _ref.valueKey,\n    valueKey = _ref$valueKey === void 0 ? 'value' : _ref$valueKey,\n    _ref$colors = _ref.colors,\n    colors = _ref$colors === void 0 ? [] : _ref$colors,\n    _ref$innerRadius = _ref.innerRadius,\n    innerRadius = _ref$innerRadius === void 0 ? '60%' : _ref$innerRadius,\n    _ref$outerRadius = _ref.outerRadius,\n    outerRadius = _ref$outerRadius === void 0 ? '80%' : _ref$outerRadius,\n    _ref$showLegend = _ref.showLegend,\n    showLegend = _ref$showLegend === void 0 ? true : _ref$showLegend,\n    _ref$showTooltip = _ref.showTooltip,\n    showTooltip = _ref$showTooltip === void 0 ? true : _ref$showTooltip,\n    _ref$showLabels = _ref.showLabels,\n    showLabels = _ref$showLabels === void 0 ? true : _ref$showLabels,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? 400 : _ref$height;\n  var chartColors = useMemo(function () {\n    if (colors.length >= data.length) return colors;\n    return generateChartColors(data.length);\n  }, [colors, data.length]);\n  var formattedData = useMemo(function () {\n    return data.map(function (item) {\n      return {\n        name: item[nameKey],\n        value: typeof item[valueKey] === 'string' ? parseFloat(item[valueKey]) : item[valueKey]\n      };\n    });\n  }, [data, nameKey, valueKey]);\n  var total = useMemo(function () {\n    return formattedData.reduce(function (sum, item) {\n      return sum + item.value;\n    }, 0);\n  }, [formattedData]);\n  var renderCustomizedLabel = function renderCustomizedLabel(_ref2) {\n    var cx = _ref2.cx,\n      cy = _ref2.cy,\n      midAngle = _ref2.midAngle,\n      innerRadius = _ref2.innerRadius,\n      outerRadius = _ref2.outerRadius,\n      percent = _ref2.percent;\n    if (!showLabels) return null;\n    var radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    var x = cx + radius * Math.cos(-midAngle * RADIAN);\n    var y = cy + radius * Math.sin(-midAngle * RADIAN);\n    return percent > 0.05 ? _jsx(\"text\", {\n      x: x,\n      y: y,\n      fill: \"white\",\n      textAnchor: \"middle\",\n      dominantBaseline: \"central\",\n      className: \"text-xs font-medium\",\n      children: `${(percent * 100).toFixed(1)}%`\n    }) : null;\n  };\n  var CustomTooltip = function CustomTooltip(_ref3) {\n    var active = _ref3.active,\n      payload = _ref3.payload;\n    if (!active || !payload || !payload.length) return null;\n    var data = payload[0].payload;\n    return _jsxs(\"div\", {\n      className: \"bg-white p-3 rounded-lg shadow-lg border\",\n      children: [_jsx(\"p\", {\n        className: \"font-medium text-gray-900\",\n        children: data.name\n      }), _jsx(\"p\", {\n        className: \"text-gray-600\",\n        children: formatCurrency(data.value)\n      }), _jsxs(\"p\", {\n        className: \"text-sm text-gray-500\",\n        children: [(data.value / total * 100).toFixed(1), \"% of total\"]\n      })]\n    });\n  };\n  var CustomLegend = function CustomLegend(_ref4) {\n    var payload = _ref4.payload;\n    if (!showLegend) return null;\n    return _jsx(\"ul\", {\n      className: \"flex flex-wrap justify-center gap-4 mt-4\",\n      children: payload.map(function (entry, index) {\n        return _jsxs(\"li\", {\n          className: \"flex items-center\",\n          children: [_jsx(\"span\", {\n            className: \"w-3 h-3 rounded-full mr-2\",\n            style: {\n              backgroundColor: entry.color\n            }\n          }), _jsx(\"span\", {\n            className: \"text-sm text-gray-600\",\n            children: entry.value\n          })]\n        }, `legend-${index}`);\n      })\n    });\n  };\n  return _jsx(\"div\", {\n    style: {\n      width: '100%',\n      height: height\n    },\n    children: _jsx(ResponsiveContainer, {\n      children: _jsxs(PieChart, {\n        children: [_jsx(Pie, {\n          data: formattedData,\n          cx: \"50%\",\n          cy: \"50%\",\n          labelLine: false,\n          label: renderCustomizedLabel,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          fill: \"#8884d8\",\n          dataKey: \"value\",\n          children: formattedData.map(function (entry, index) {\n            return _jsx(Cell, {\n              fill: chartColors[index % chartColors.length]\n            }, `cell-${index}`);\n          })\n        }), showTooltip && _jsx(Tooltip, {\n          content: _jsx(CustomTooltip, {})\n        }), showLegend && _jsx(Legend, {\n          content: _jsx(CustomLegend, {})\n        })]\n      })\n    })\n  });\n};\nexport default DonutChart;","map":{"version":3,"names":["React","useMemo","ResponsiveContainer","PieChart","Pie","Cell","Tooltip","Legend","generateChartColors","formatCurrency","jsx","_jsx","jsxs","_jsxs","RADIAN","Math","PI","DonutChart","_ref","_ref$data","data","_ref$nameKey","nameKey","_ref$valueKey","valueKey","_ref$colors","colors","_ref$innerRadius","innerRadius","_ref$outerRadius","outerRadius","_ref$showLegend","showLegend","_ref$showTooltip","showTooltip","_ref$showLabels","showLabels","_ref$height","height","chartColors","length","formattedData","map","item","name","value","parseFloat","total","reduce","sum","renderCustomizedLabel","_ref2","cx","cy","midAngle","percent","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","className","children","toFixed","CustomTooltip","_ref3","active","payload","CustomLegend","_ref4","entry","index","style","backgroundColor","color","width","labelLine","label","dataKey","content"],"sources":["C:/Users/user/Documents/app.v3/client/extra/extra/extraDonutChart.js"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { ResponsiveContainer, PieChart, Pie, Cell, Tooltip, Legend } from 'recharts';\r\nimport { generateChartColors } from '../../../utils/chartHelpers'; // Assuming this utility exists\r\nimport { formatCurrency } from '../../src/shared/utils/currency'; // Assuming this utility exists\r\n\r\nconst RADIAN = Math.PI / 180;\r\n\r\n/**\r\n * @typedef {object} DonutChartProps\r\n * @property {Array<object>} [data=[]] - The data for the chart. Each object should have a name and value key.\r\n * @property {string} [nameKey='name'] - The key in the data objects that represents the name/label.\r\n * @property {string} [valueKey='value'] - The key in the data objects that represents the value.\r\n * @property {string[]} [colors=[]] - Optional array of custom colors for the chart segments. If not provided, colors will be generated.\r\n * @property {string|number} [innerRadius='60%'] - The inner radius of the donut chart. Can be a number or a percentage string.\r\n * @property {string|number} [outerRadius='80%'] - The outer radius of the donut chart. Can be a number or a percentage string.\r\n * @property {boolean} [showLegend=true] - Whether to display the legend.\r\n * @property {boolean} [showTooltip=true] - Whether to display the tooltip on hover.\r\n * @property {boolean} [showLabels=true] - Whether to display percentage labels on the segments.\r\n * @property {number} [height=400] - The height of the chart container.\r\n */\r\n\r\n/**\r\n * @desc A reusable Donut Chart component using Recharts.\r\n * Displays data as a donut chart with customizable options for appearance, legend, tooltip, and labels.\r\n * @param {DonutChartProps} props - The component props.\r\n * @returns {JSX.Element} - The rendered DonutChart component.\r\n */\r\nconst DonutChart = ({\r\n  data = [],\r\n  nameKey = 'name',\r\n  valueKey = 'value',\r\n  colors = [],\r\n  innerRadius = '60%',\r\n  outerRadius = '80%',\r\n  showLegend = true,\r\n  showTooltip = true,\r\n  showLabels = true,\r\n  height = 400\r\n}) => {\r\n  // Generate colors if not provided\r\n  const chartColors = useMemo(() => {\r\n    if (colors.length >= data.length) return colors;\r\n    // Assuming generateChartColors utility exists and returns an array of colors\r\n    return generateChartColors(data.length);\r\n  }, [colors, data.length]);\r\n\r\n  // Format data for the chart\r\n  const formattedData = useMemo(() => {\r\n    return data.map(item => ({\r\n      name: item[nameKey],\r\n      value: typeof item[valueKey] === 'string' ? parseFloat(item[valueKey]) : item[valueKey]\r\n    }));\r\n  }, [data, nameKey, valueKey]);\r\n\r\n  // Calculate total for percentages\r\n  const total = useMemo(() => {\r\n    return formattedData.reduce((sum, item) => sum + item.value, 0);\r\n  }, [formattedData]);\r\n\r\n  // Custom label for the segments\r\n  /**\r\n   * @desc Renders custom percentage labels on the donut chart segments.\r\n   * @param {object} props - Props provided by Recharts.\r\n   * @returns {JSX.Element|null} - The rendered text element or null.\r\n   */\r\n  const renderCustomizedLabel = ({\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    percent,\r\n  }) => {\r\n    if (!showLabels) return null;\r\n    \r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    // Only show labels for segments larger than 5%\r\n    return percent > 0.05 ? (\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        fill=\"white\"\r\n        textAnchor=\"middle\"\r\n        dominantBaseline=\"central\"\r\n        className=\"text-xs font-medium\"\r\n      >\r\n        {`${(percent * 100).toFixed(1)}%`}\r\n      </text>\r\n    ) : null;\r\n  };\r\n\r\n  // Custom tooltip\r\n  /**\r\n   * @desc Renders a custom tooltip for the donut chart segments on hover.\r\n   * @param {object} props - Props provided by Recharts.\r\n   * @returns {JSX.Element|null} - The rendered tooltip element or null.\r\n   */\r\n  const CustomTooltip = ({ active, payload }) => {\r\n    if (!active || !payload || !payload.length) return null;\r\n\r\n    const data = payload[0].payload;\r\n    // Assuming formatCurrency utility exists\r\n    return (\r\n      <div className=\"bg-white p-3 rounded-lg shadow-lg border\">\r\n        <p className=\"font-medium text-gray-900\">{data.name}</p>\r\n        <p className=\"text-gray-600\">{formatCurrency(data.value)}</p>\r\n        <p className=\"text-sm text-gray-500\">\r\n          {((data.value / total) * 100).toFixed(1)}% of total\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Custom legend\r\n  /**\r\n   * @desc Renders a custom legend for the donut chart.\r\n   * @param {object} props - Props provided by Recharts.\r\n   * @returns {JSX.Element|null} - The rendered legend element or null.\r\n   */\r\n  const CustomLegend = ({ payload }) => {\r\n    if (!showLegend) return null;\r\n\r\n    return (\r\n      <ul className=\"flex flex-wrap justify-center gap-4 mt-4\">\r\n        {payload.map((entry, index) => (\r\n          <li key={`legend-${index}`} className=\"flex items-center\">\r\n            <span\r\n              className=\"w-3 h-3 rounded-full mr-2\"\r\n              style={{ backgroundColor: entry.color }}\r\n            />\r\n            <span className=\"text-sm text-gray-600\">{entry.value}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', height }}>\r\n      <ResponsiveContainer>\r\n        <PieChart>\r\n          <Pie\r\n            data={formattedData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={false}\r\n            label={renderCustomizedLabel}\r\n            outerRadius={outerRadius}\r\n            innerRadius={innerRadius}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n          >\r\n            {formattedData.map((entry, index) => (\r\n              <Cell \r\n                key={`cell-${index}`}\r\n                fill={chartColors[index % chartColors.length]} \r\n              />\r\n            ))}\r\n          </Pie>\r\n          {showTooltip && <Tooltip content={<CustomTooltip />} />}\r\n          {showLegend && <Legend content={<CustomLegend />} />}\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DonutChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}