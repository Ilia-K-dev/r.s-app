{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport clsx from 'clsx';\nexport var cn = function cn() {\n  return clsx.apply(void 0, arguments);\n};\nexport var groupByKey = function groupByKey(array, key) {\n  return array.reduce(function (result, item) {\n    var keyValue = item[key];\n    if (!result[keyValue]) {\n      result[keyValue] = [];\n    }\n    result[keyValue].push(item);\n    return result;\n  }, {});\n};\nexport var calculateTotal = function calculateTotal(items) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'total';\n  return items.reduce(function (sum, item) {\n    return sum + (parseFloat(item[key]) || 0);\n  }, 0);\n};\nexport var debounce = function debounce(func, wait) {\n  var timeout;\n  return function executedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var later = function later() {\n      clearTimeout(timeout);\n      func.apply(void 0, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\nexport var sortByKey = function sortByKey(array, key) {\n  var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'asc';\n  return _toConsumableArray(array).sort(function (a, b) {\n    if (order === 'asc') {\n      return a[key] > b[key] ? 1 : -1;\n    }\n    return a[key] < b[key] ? 1 : -1;\n  });\n};\nexport var filterByDateRange = function filterByDateRange(items, startDate, endDate) {\n  var dateKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'date';\n  var start = new Date(startDate);\n  var end = new Date(endDate);\n  return items.filter(function (item) {\n    var itemDate = new Date(item[dateKey]);\n    return itemDate >= start && itemDate <= end;\n  });\n};\nexport var generateMonthlyData = function generateMonthlyData(data) {\n  var dateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'date';\n  var valueKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'total';\n  var months = {};\n  data.forEach(function (item) {\n    var date = new Date(item[dateKey]);\n    var monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n    if (!months[monthKey]) {\n      months[monthKey] = 0;\n    }\n    months[monthKey] += parseFloat(item[valueKey]) || 0;\n  });\n  return Object.entries(months).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      month = _ref2[0],\n      value = _ref2[1];\n    return {\n      month: month,\n      value: value\n    };\n  });\n};\nexport var formatFileSize = function formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  var k = 1024;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};","map":{"version":3,"names":["clsx","cn","apply","arguments","groupByKey","array","key","reduce","result","item","keyValue","push","calculateTotal","items","length","undefined","sum","parseFloat","debounce","func","wait","timeout","executedFunction","_len","args","Array","_key","later","clearTimeout","setTimeout","sortByKey","order","_toConsumableArray","sort","a","b","filterByDateRange","startDate","endDate","dateKey","start","Date","end","filter","itemDate","generateMonthlyData","data","valueKey","months","forEach","date","monthKey","getFullYear","String","getMonth","padStart","Object","entries","map","_ref","_ref2","_slicedToArray","month","value","formatFileSize","bytes","k","sizes","i","Math","floor","log","pow","toFixed"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/helpers.js"],"sourcesContent":["import clsx from 'clsx';\r\n\r\n/**\r\n * @desc Joins class names together.\r\n * @param {...(string|string[]|object)} inputs - Class names to join.\r\n * @returns {string} - Joined class names string.\r\n */\r\nexport const cn = (...inputs) => clsx(...inputs);\r\n\r\n/**\r\n * @desc Groups an array of objects by a specified key.\r\n * @param {Array<object>} array - The array of objects to group.\r\n * @param {string} key - The key to group by.\r\n * @returns {object} - An object where keys are the unique values of the specified key and values are arrays of objects.\r\n */\r\nexport const groupByKey = (array, key) => array.reduce((result, item) => {\r\n    const keyValue = item[key];\r\n    if (!result[keyValue]) {\r\n      result[keyValue] = [];\r\n    }\r\n    result[keyValue].push(item);\r\n    return result;\r\n  }, {});\r\n\r\n/**\r\n * @desc Calculates the sum of values for a specified key in an array of objects.\r\n * @param {Array<object>} items - The array of objects.\r\n * @param {string} [key='total'] - The key whose values should be summed.\r\n * @returns {number} - The calculated total.\r\n */\r\nexport const calculateTotal = (items, key = 'total') => items.reduce((sum, item) => sum + (parseFloat(item[key]) || 0), 0);\r\n\r\n/**\r\n * @desc Creates a debounced function that delays invoking `func` until after `wait` milliseconds have elapsed since the last time the debounced function was invoked.\r\n * @param {function} func - The function to debounce.\r\n * @param {number} wait - The number of milliseconds to delay.\r\n * @returns {function} - Returns the new debounced function.\r\n */\r\nexport const debounce = (func, wait) => {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n\r\n/**\r\n * @desc Sorts an array of objects by a specified key and order.\r\n * @param {Array<object>} array - The array of objects to sort.\r\n * @param {string} key - The key to sort by.\r\n * @param {'asc'|'desc'} [order='asc'] - The sort order ('asc' or 'desc').\r\n * @returns {Array<object>} - A new array containing the sorted objects.\r\n */\r\nexport const sortByKey = (array, key, order = 'asc') => [...array].sort((a, b) => {\r\n    if (order === 'asc') {\r\n      return a[key] > b[key] ? 1 : -1;\r\n    }\r\n    return a[key] < b[key] ? 1 : -1;\r\n  });\r\n\r\n/**\r\n * @desc Filters an array of objects by a date range for a specified date key.\r\n * @param {Array<object>} items - The array of objects to filter.\r\n * @param {Date|string} startDate - The start date of the range.\r\n * @param {Date|string} endDate - The end date of the range.\r\n * @param {string} [dateKey='date'] - The key containing the date value in the objects.\r\n * @returns {Array<object>} - A new array containing objects within the date range.\r\n */\r\nexport const filterByDateRange = (items, startDate, endDate, dateKey = 'date') => {\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n\r\n  return items.filter(item => {\r\n    const itemDate = new Date(item[dateKey]);\r\n    return itemDate >= start && itemDate <= end;\r\n  });\r\n};\r\n\r\n/**\r\n * @desc Generates monthly aggregated data from an array of items with date and value keys.\r\n * @param {Array<object>} data - The array of objects.\r\n * @param {string} [dateKey='date'] - The key containing the date value.\r\n * @param {string} [valueKey='total'] - The key containing the value to aggregate.\r\n * @returns {Array<object>} - An array of objects with 'month' (YYYY-MM) and 'value'.\r\n */\r\nexport const generateMonthlyData = (data, dateKey = 'date', valueKey = 'total') => {\r\n  const months = {};\r\n\r\n  data.forEach(item => {\r\n    const date = new Date(item[dateKey]);\r\n    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n    if (!months[monthKey]) {\r\n      months[monthKey] = 0;\r\n    }\r\n    months[monthKey] += parseFloat(item[valueKey]) || 0;\r\n  });\r\n\r\n  return Object.entries(months).map(([month, value]) => ({\r\n    month,\r\n    value,\r\n  }));\r\n};\r\n\r\n/**\r\n * @desc Formats a file size in bytes into a human-readable string (e.g., \"10.5 KB\", \"2.3 MB\").\r\n * @param {number} bytes - The file size in bytes.\r\n * @returns {string} - The formatted file size string.\r\n */\r\nexport const formatFileSize = bytes => {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}