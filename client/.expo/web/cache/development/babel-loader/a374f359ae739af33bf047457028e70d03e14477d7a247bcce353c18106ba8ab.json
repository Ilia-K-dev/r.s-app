{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { testComponent, testComponentProps, displayTestResults } from \"../../utils/testing/componentTester\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DebugPanel = function DebugPanel(_ref) {\n  var _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'bottom-right' : _ref$position;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isExpanded = _useState2[0],\n    setIsExpanded = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    componentToTest = _useState4[0],\n    setComponentToTest = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    testResults = _useState6[0],\n    setTestResults = _useState6[1];\n  var positionStyles = {\n    'top-left': 'top-0 left-0',\n    'top-right': 'top-0 right-0',\n    'bottom-left': 'bottom-0 left-0',\n    'bottom-right': 'bottom-0 right-0'\n  };\n  var availableComponents = {};\n  var runTests = function runTests() {\n    if (!componentToTest) return;\n    var Component = availableComponents[componentToTest];\n    if (!Component) return;\n    var results = testComponentProps(Component, [{}]);\n    setTestResults(results);\n    displayTestResults(results);\n  };\n  var togglePanel = function togglePanel() {\n    setIsExpanded(!isExpanded);\n  };\n  return _jsxs(\"div\", {\n    className: `fixed ${positionStyles[position]} z-50`,\n    children: [_jsx(\"button\", {\n      onClick: togglePanel,\n      className: \"bg-gray-800 text-white p-2 rounded-tl-md shadow-lg text-xs hover:bg-gray-700 transition-colors\",\n      children: isExpanded ? 'Hide Debug Panel' : 'Debug Panel'\n    }), isExpanded && _jsxs(\"div\", {\n      className: \"bg-gray-800 text-white p-4 rounded-tl-md shadow-lg w-64\",\n      children: [_jsx(\"h3\", {\n        className: \"text-sm font-bold mb-2\",\n        children: \"Component Testing\"\n      }), _jsxs(\"label\", {\n        className: \"block text-xs mb-2\",\n        children: [\"Select Component:\", _jsxs(\"select\", {\n          value: componentToTest || '',\n          onChange: function onChange(e) {\n            return setComponentToTest(e.target.value);\n          },\n          className: \"mt-1 block w-full bg-gray-700 text-white text-xs p-1 rounded\",\n          children: [_jsx(\"option\", {\n            value: \"\",\n            children: \"-- Select Component --\"\n          }), Object.keys(availableComponents).map(function (name) {\n            return _jsx(\"option\", {\n              value: name,\n              children: name\n            }, name);\n          })]\n        })]\n      }), _jsx(\"button\", {\n        onClick: runTests,\n        disabled: !componentToTest,\n        className: \"bg-blue-600 text-white text-xs p-1 rounded w-full disabled:opacity-50 hover:bg-blue-500 transition-colors\",\n        children: \"Run Tests\"\n      }), testResults && _jsxs(\"div\", {\n        className: \"mt-4 text-xs\",\n        children: [_jsx(\"h4\", {\n          className: \"font-bold mb-1\",\n          children: \"Test Results:\"\n        }), _jsx(\"div\", {\n          className: \"bg-gray-700 p-2 rounded max-h-40 overflow-auto\",\n          children: testResults.map(function (result, i) {\n            return _jsxs(\"div\", {\n              className: \"mb-2\",\n              children: [_jsxs(\"div\", {\n                children: [\"Test \", i + 1, \": \", result.passed ? '✅ Passed' : '❌ Failed']\n              }), result.errors.length > 0 && _jsxs(\"div\", {\n                className: \"text-red-400\",\n                children: [\"Errors: \", result.errors.length]\n              })]\n            }, i);\n          })\n        })]\n      })]\n    })]\n  });\n};\nexport default DebugPanel;","map":{"version":3,"names":["React","useState","testComponent","testComponentProps","displayTestResults","jsx","_jsx","jsxs","_jsxs","DebugPanel","_ref","_ref$position","position","_useState","_useState2","_slicedToArray","isExpanded","setIsExpanded","_useState3","_useState4","componentToTest","setComponentToTest","_useState5","_useState6","testResults","setTestResults","positionStyles","availableComponents","runTests","Component","results","togglePanel","className","children","onClick","value","onChange","e","target","Object","keys","map","name","disabled","result","i","passed","errors","length"],"sources":["C:/Users/user/Documents/app.v3/client/src/components/debug/DebugPanel.js"],"sourcesContent":["/**\r\n * DebugPanel.js\r\n * Last Modified: 5/22/2025 12:33 AM\r\n * Modified By: Cline\r\n * \r\n * Purpose: Debug panel component for testing UI in development\r\n * Changes Made: Created new debug component\r\n * Reasoning: To enable frontend testing without deployment\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { testComponent, testComponentProps, displayTestResults } from '../../utils/testing/componentTester';\r\n\r\n/**\r\n * Debug panel component for testing React components\r\n */\r\nconst DebugPanel = ({ position = 'bottom-right' }) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [componentToTest, setComponentToTest] = useState(null);\r\n  const [testResults, setTestResults] = useState(null);\r\n  \r\n  // Position styles\r\n  const positionStyles = {\r\n    'top-left': 'top-0 left-0',\r\n    'top-right': 'top-0 right-0',\r\n    'bottom-left': 'bottom-0 left-0',\r\n    'bottom-right': 'bottom-0 right-0',\r\n  };\r\n  \r\n  // Available test components (to be populated by your app)\r\n  const availableComponents = {\r\n    // Add your components here to make them available for testing\r\n    // Example: 'UserProfile': UserProfile,\r\n  };\r\n  \r\n  // Run tests on selected component\r\n  const runTests = () => {\r\n    if (!componentToTest) return;\r\n    \r\n    const Component = availableComponents[componentToTest];\r\n    if (!Component) return;\r\n    \r\n    const results = testComponentProps(Component, [{}]);\r\n    setTestResults(results);\r\n    displayTestResults(results);\r\n  };\r\n  \r\n  // Toggle panel expansion\r\n  const togglePanel = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n  \r\n  return (\r\n    <div className={`fixed ${positionStyles[position]} z-50`}>\r\n      {/* Debug Panel Button */}\r\n      <button\r\n        onClick={togglePanel}\r\n        className=\"bg-gray-800 text-white p-2 rounded-tl-md shadow-lg text-xs hover:bg-gray-700 transition-colors\"\r\n      >\r\n        {isExpanded ? 'Hide Debug Panel' : 'Debug Panel'}\r\n      </button>\r\n      \r\n      {/* Debug Panel Content */}\r\n      {isExpanded && (\r\n        <div className=\"bg-gray-800 text-white p-4 rounded-tl-md shadow-lg w-64\">\r\n          <h3 className=\"text-sm font-bold mb-2\">Component Testing</h3>\r\n          \r\n          <label className=\"block text-xs mb-2\">\r\n            Select Component:\r\n            <select\r\n              value={componentToTest || ''}\r\n              onChange={(e) => setComponentToTest(e.target.value)}\r\n              className=\"mt-1 block w-full bg-gray-700 text-white text-xs p-1 rounded\"\r\n            >\r\n              <option value=\"\">-- Select Component --</option>\r\n              {Object.keys(availableComponents).map(name => (\r\n                <option key={name} value={name}>{name}</option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          \r\n          <button\r\n            onClick={runTests}\r\n            disabled={!componentToTest}\r\n            className=\"bg-blue-600 text-white text-xs p-1 rounded w-full disabled:opacity-50 hover:bg-blue-500 transition-colors\"\r\n          >\r\n            Run Tests\r\n          </button>\r\n          \r\n          {testResults && (\r\n            <div className=\"mt-4 text-xs\">\r\n              <h4 className=\"font-bold mb-1\">Test Results:</h4>\r\n              <div className=\"bg-gray-700 p-2 rounded max-h-40 overflow-auto\">\r\n                {testResults.map((result, i) => (\r\n                  <div key={i} className=\"mb-2\">\r\n                    <div>Test {i+1}: {result.passed ? '✅ Passed' : '❌ Failed'}</div>\r\n                    {result.errors.length > 0 && (\r\n                      <div className=\"text-red-400\">\r\n                        Errors: {result.errors.length}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DebugPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}