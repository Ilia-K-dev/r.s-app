{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport api from \"../../../shared/services/api\";\nimport axios from 'axios';\nimport { auth } from \"../../../core/config/firebase\";\nvar API_BASE_PATH = '/api/receipts';\nvar getAuthToken = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var user = auth.currentUser;\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    return yield user.getIdToken();\n  });\n  return function getAuthToken() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var receiptApi = {\n  createReceipt: function () {\n    var _createReceipt = _asyncToGenerator(function* (receiptData) {\n      var imageFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var token = yield getAuthToken();\n      if (imageFile) {\n        var formData = new FormData();\n        formData.append('document', imageFile);\n        formData.append('data', JSON.stringify(receiptData));\n        formData.append('documentType', 'receipt');\n        var response = yield api.post(`${API_BASE_PATH}/upload`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        return response.data;\n      } else {\n        var _response = yield api.post(API_BASE_PATH, receiptData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        return _response.data;\n      }\n    });\n    function createReceipt(_x) {\n      return _createReceipt.apply(this, arguments);\n    }\n    return createReceipt;\n  }(),\n  getReceipts: function () {\n    var _getReceipts = _asyncToGenerator(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      try {\n        var response = yield api.get(API_BASE_PATH, {\n          params: _objectSpread({}, options)\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getReceipts() {\n      return _getReceipts.apply(this, arguments);\n    }\n    return getReceipts;\n  }(),\n  getReceiptById: function () {\n    var _getReceiptById = _asyncToGenerator(function* (id) {\n      var response = yield api.get(`${API_BASE_PATH}/${id}`);\n      return response.data;\n    });\n    function getReceiptById(_x2) {\n      return _getReceiptById.apply(this, arguments);\n    }\n    return getReceiptById;\n  }(),\n  updateReceipt: function () {\n    var _updateReceipt = _asyncToGenerator(function* (receiptId, updateData) {\n      var newImageFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var token = yield getAuthToken();\n      if (newImageFile) {\n        var formData = new FormData();\n        formData.append('document', newImageFile);\n        formData.append('data', JSON.stringify(updateData));\n        formData.append('documentType', 'receipt');\n        var response = yield api.put(`${API_BASE_PATH}/${receiptId}/upload`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        return response.data;\n      } else {\n        var _response2 = yield api.put(`${API_BASE_PATH}/${receiptId}`, updateData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        return _response2.data;\n      }\n    });\n    function updateReceipt(_x3, _x4) {\n      return _updateReceipt.apply(this, arguments);\n    }\n    return updateReceipt;\n  }(),\n  deleteReceipt: function () {\n    var _deleteReceipt = _asyncToGenerator(function* (receiptId) {\n      var response = yield api.delete(`${API_BASE_PATH}/${receiptId}`);\n      return response.data;\n    });\n    function deleteReceipt(_x5) {\n      return _deleteReceipt.apply(this, arguments);\n    }\n    return deleteReceipt;\n  }(),\n  correctReceipt: function () {\n    var _correctReceipt = _asyncToGenerator(function* (receiptId, correctedData) {\n      var response = yield api.put(`${API_BASE_PATH}/correct/${receiptId}`, correctedData);\n      return response.data;\n    });\n    function correctReceipt(_x6, _x7) {\n      return _correctReceipt.apply(this, arguments);\n    }\n    return correctReceipt;\n  }()\n};\nexport default receiptApi;","map":{"version":3,"names":["api","axios","auth","API_BASE_PATH","getAuthToken","_ref","_asyncToGenerator","user","currentUser","Error","getIdToken","apply","arguments","receiptApi","createReceipt","_createReceipt","receiptData","imageFile","length","undefined","token","formData","FormData","append","JSON","stringify","response","post","headers","data","_x","getReceipts","_getReceipts","options","get","params","_objectSpread","error","getReceiptById","_getReceiptById","id","_x2","updateReceipt","_updateReceipt","receiptId","updateData","newImageFile","put","_x3","_x4","deleteReceipt","_deleteReceipt","delete","_x5","correctReceipt","_correctReceipt","correctedData","_x6","_x7"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/receipts/services/receipts.js"],"sourcesContent":["import api from '../../../shared/services/api'; // Assuming shared API service\r\nimport axios from 'axios'; // Import axios for direct use in createReceipt/updateReceipt if needed for FormData\r\nimport { auth } from '../../../core/config/firebase'; // Assuming Firebase auth for token\r\n\r\nconst API_BASE_PATH = '/api/receipts';\r\n\r\n// Get authentication token (can be moved to a shared utility if used elsewhere)\r\nconst getAuthToken = async () => {\r\n  const user = auth.currentUser;\r\n  if (!user) {\r\n    throw new Error('User not authenticated');\r\n  }\r\n  return await user.getIdToken();\r\n};\r\n\r\n\r\nexport const receiptApi = {\r\n  /**\r\n   * Uploads a new receipt.\r\n   * @param {object} receiptData - The form data for the receipt (excluding image file).\r\n   * @param {File} [imageFile] - The image file to upload.\r\n   * @returns {Promise<object>} - The API response data.\r\n   */\r\n  createReceipt: async (receiptData, imageFile = null) => {\r\n    const token = await getAuthToken();\r\n\r\n    if (imageFile) {\r\n      const formData = new FormData();\r\n      formData.append('document', imageFile); // 'document' should match the field name in server upload middleware\r\n      formData.append('data', JSON.stringify(receiptData)); // Add receipt data as JSON field\r\n      formData.append('documentType', 'receipt'); // Specify document type\r\n\r\n      const response = await api.post(`${API_BASE_PATH}/upload`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      return response.data;\r\n    } else {\r\n      // No image, just send JSON data (if server supports creating receipt without image)\r\n      const response = await api.post(API_BASE_PATH, receiptData, {\r\n         headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      return response.data;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetches receipts with filtering and pagination.\r\n   * @param {object} [options] - Options for filtering and pagination (category, dateRange, limit, startAfter, etc.).\r\n   * @returns {Promise<object>} - Paginated list of receipts and pagination info.\r\n   */\r\n  getReceipts: async (options = {}) => {\r\n    try {\r\n      // Pass filters and pagination options as query parameters\r\n      const response = await api.get(API_BASE_PATH, {\r\n        params: {\r\n          ...options\r\n        }\r\n      });\r\n      return response.data; // Assuming response.data contains { receipts: [...], pagination: {...} }\r\n    } catch (error) {\r\n      // The API interceptor should have already processed and logged the error\r\n      throw error; // Re-throw the error caught by the interceptor\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Gets a single receipt by ID.\r\n   * @param {string} id - The ID of the receipt.\r\n   * @returns {Promise<object>} - The receipt data.\r\n   */\r\n  getReceiptById: async (id) => {\r\n    const response = await api.get(`${API_BASE_PATH}/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Updates an existing receipt.\r\n   * @param {string} receiptId - The ID of the receipt to update.\r\n   * @param {object} updateData - The update data for the receipt (excluding new image file).\r\n   * @param {File} [newImageFile] - A new image file to upload for the receipt.\r\n   * @returns {Promise<object>} - The API response data.\r\n   */\r\n  updateReceipt: async (receiptId, updateData, newImageFile = null) => {\r\n    const token = await getAuthToken();\r\n\r\n    if (newImageFile) {\r\n      const formData = new FormData();\r\n      formData.append('document', newImageFile); // 'document' should match the field name in server upload middleware\r\n      formData.append('data', JSON.stringify(updateData)); // Add receipt data as JSON field\r\n      formData.append('documentType', 'receipt'); // Specify document type\r\n\r\n      const response = await api.put(`${API_BASE_PATH}/${receiptId}/upload`, formData, {\r\n         headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      return response.data;\r\n    } else {\r\n      // No new image, just send JSON data\r\n      const response = await api.put(`${API_BASE_PATH}/${receiptId}`, updateData, {\r\n         headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      return response.data;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Deletes a receipt by ID.\r\n   * @param {string} receiptId - The ID of the receipt to delete.\r\n   * @returns {Promise<object>} - The API response data.\r\n   */\r\n  deleteReceipt: async (receiptId) => {\r\n    const response = await api.delete(`${API_BASE_PATH}/${receiptId}`);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Submits corrected data for a receipt.\r\n   * @param {string} receiptId - The ID of the receipt to correct.\r\n   * @param {object} correctedData - The corrected data.\r\n   * @returns {Promise<object>} - The API response data.\r\n   */\r\n  correctReceipt: async (receiptId, correctedData) => {\r\n    const response = await api.put(`${API_BASE_PATH}/correct/${receiptId}`, correctedData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default receiptApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}