{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _require = require(\"../../../__mocks__/testHelper\"),\n  createMock = _require.createMock,\n  mockUser = _require.mockUser,\n  createFeatureFlagMocks = _require.createFeatureFlagMocks,\n  createErrorHandlerMocks = _require.createErrorHandlerMocks;\nvar mockSignInWithEmailAndPassword = jest.fn().mockResolvedValue({\n  user: mockUser\n});\nvar mockCreateUserWithEmailAndPassword = jest.fn().mockResolvedValue({\n  user: mockUser\n});\nvar mockSignOut = jest.fn().mockResolvedValue();\nvar mockSendPasswordResetEmail = jest.fn().mockResolvedValue();\nvar mockUpdateProfile = jest.fn().mockResolvedValue();\njest.mock('firebase/auth', function () {\n  return {\n    signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\n    createUserWithEmailAndPassword: mockCreateUserWithEmailAndPassword,\n    signOut: mockSignOut,\n    sendPasswordResetEmail: mockSendPasswordResetEmail,\n    updateProfile: mockUpdateProfile\n  };\n}, {\n  virtual: true\n});\njest.mock(\"../../../core/config/firebase\", function () {\n  return {\n    auth: {\n      currentUser: mockUser\n    }\n  };\n}, {\n  virtual: true\n});\nvar featureFlagMocks = createFeatureFlagMocks();\nvar errorHandlerMocks = createErrorHandlerMocks();\njest.mock(\"../../../core/config/featureFlags\", function () {\n  return featureFlagMocks;\n}, {\n  virtual: true\n});\njest.mock(\"../../../utils/errorHandler\", function () {\n  return errorHandlerMocks;\n}, {\n  virtual: true\n});\nimport * as authService from \"../services/authService\";\ndescribe('Auth Service', function () {\n  beforeEach(function () {\n    jest.clearAllMocks();\n  });\n  describe('login', function () {\n    it('should call signInWithEmailAndPassword with correct parameters', _asyncToGenerator(function* () {\n      var email = 'test@example.com';\n      var password = 'password123';\n      yield authService.login(email, password);\n      expect(mockSignInWithEmailAndPassword).toHaveBeenCalledWith(expect.anything(), email, password);\n    }));\n    it('should handle errors during login', _asyncToGenerator(function* () {\n      var email = 'test@example.com';\n      var password = 'password123';\n      var error = new Error('Auth error');\n      mockSignInWithEmailAndPassword.mockRejectedValueOnce(error);\n      yield expect(authService.login(email, password)).rejects.toThrow();\n      expect(errorHandlerMocks.handleError).toHaveBeenCalledWith(error, expect.any(String));\n    }));\n  });\n});","map":{"version":3,"names":["_require","require","createMock","mockUser","createFeatureFlagMocks","createErrorHandlerMocks","mockSignInWithEmailAndPassword","jest","fn","mockResolvedValue","user","mockCreateUserWithEmailAndPassword","mockSignOut","mockSendPasswordResetEmail","mockUpdateProfile","mock","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","sendPasswordResetEmail","updateProfile","virtual","auth","currentUser","featureFlagMocks","errorHandlerMocks","authService","describe","beforeEach","clearAllMocks","it","_asyncToGenerator","email","password","login","expect","toHaveBeenCalledWith","anything","error","Error","mockRejectedValueOnce","rejects","toThrow","handleError","any","String"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/auth/__tests__/authService.test.js"],"sourcesContent":["// client/src/features/auth/__tests__/authService.test.js\r\n\r\n// Import the test helper\r\nconst {\r\n  createMock,\r\n  mockUser,\r\n  createFeatureFlagMocks,\r\n  createErrorHandlerMocks\r\n} = require('../../../__mocks__/testHelper');\r\n\r\n// Create mock functions for Firebase Auth\r\nconst mockSignInWithEmailAndPassword = jest.fn().mockResolvedValue({ user: mockUser });\r\nconst mockCreateUserWithEmailAndPassword = jest.fn().mockResolvedValue({ user: mockUser });\r\nconst mockSignOut = jest.fn().mockResolvedValue();\r\nconst mockSendPasswordResetEmail = jest.fn().mockResolvedValue();\r\nconst mockUpdateProfile = jest.fn().mockResolvedValue();\r\n\r\n// Mock Firebase modules\r\njest.mock('firebase/auth', () => ({\r\n  signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword: mockCreateUserWithEmailAndPassword,\r\n  signOut: mockSignOut,\r\n  sendPasswordResetEmail: mockSendPasswordResetEmail,\r\n  updateProfile: mockUpdateProfile\r\n}), { virtual: true });\r\n\r\n// Mock the Firebase config\r\njest.mock('../../../core/config/firebase', () => ({\r\n  auth: { currentUser: mockUser }\r\n}), { virtual: true });\r\n\r\n// Mock feature flags and error handler\r\nconst featureFlagMocks = createFeatureFlagMocks();\r\nconst errorHandlerMocks = createErrorHandlerMocks();\r\n\r\njest.mock('../../../core/config/featureFlags', () => featureFlagMocks, { virtual: true });\r\njest.mock('../../../utils/errorHandler', () => errorHandlerMocks, { virtual: true });\r\n\r\n// IMPORTANT: Import the auth service AFTER setting up all mocks\r\n// This ensures the mocks are in place when the module is loaded\r\nimport * as authService from '../services/authService';\r\n\r\ndescribe('Auth Service', () => {\r\n  // Reset mocks before each test\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  // Test login functionality\r\n  describe('login', () => {\r\n    it('should call signInWithEmailAndPassword with correct parameters', async () => {\r\n      // Arrange\r\n      const email = 'test@example.com';\r\n      const password = 'password123';\r\n\r\n      // Act\r\n      await authService.login(email, password);\r\n\r\n      // Assert\r\n      expect(mockSignInWithEmailAndPassword).toHaveBeenCalledWith(\r\n        expect.anything(),\r\n        email,\r\n        password\r\n      );\r\n    });\r\n\r\n    it('should handle errors during login', async () => {\r\n      // Arrange\r\n      const email = 'test@example.com';\r\n      const password = 'password123';\r\n      const error = new Error('Auth error');\r\n      mockSignInWithEmailAndPassword.mockRejectedValueOnce(error);\r\n\r\n      // Act & Assert\r\n      await expect(authService.login(email, password)).rejects.toThrow();\r\n      expect(errorHandlerMocks.handleError).toHaveBeenCalledWith(\r\n        error,\r\n        expect.any(String)\r\n      );\r\n    });\r\n  });\r\n\r\n  // Add more tests for other auth service methods...\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}