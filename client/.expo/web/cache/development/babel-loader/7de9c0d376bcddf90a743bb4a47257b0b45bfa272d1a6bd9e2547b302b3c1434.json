{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useCallback } from 'react';\nimport { documentProcessingService } from \"../services/documentProcessingService\";\nimport { handleFirebaseError } from \"../../../utils/errorHandler\";\nvar useDocumentProcessing = function useDocumentProcessing() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    progress = _useState6[0],\n    setProgress = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    documentData = _useState8[0],\n    setDocumentData = _useState8[1];\n  var _useState9 = useState({\n      upload: 0,\n      ocr: 0,\n      classification: 0\n    }),\n    _useState0 = _slicedToArray(_useState9, 2),\n    stepProgress = _useState0[0],\n    setStepProgress = _useState0[1];\n  var _useState1 = useState(false),\n    _useState10 = _slicedToArray(_useState1, 2),\n    isCancelled = _useState10[0],\n    setIsCancelled = _useState10[1];\n  var cancelProcessing = useCallback(function () {\n    console.log('Processing cancellation requested.');\n    setIsCancelled(true);\n  }, []);\n  var startProcessing = useCallback(function () {\n    var _ref = _asyncToGenerator(function* (file, documentType) {\n      setIsLoading(true);\n      setError(null);\n      setProgress(0);\n      setStepProgress({\n        upload: 0,\n        ocr: 0,\n        classification: 0\n      });\n      setDocumentData(null);\n      setIsCancelled(false);\n      try {\n        var processedFile = file;\n        if (isCancelled) {\n          console.log('Processing cancelled before upload.');\n          setIsLoading(false);\n          return;\n        }\n        var uploadResult = yield documentProcessingService.uploadDocument(processedFile, documentType);\n        setStepProgress(function (prev) {\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            upload: 1\n          });\n        });\n        setProgress(0.3);\n        if (isCancelled) {\n          console.log('Processing cancelled after upload.');\n          setIsLoading(false);\n          return;\n        }\n        var ocrResult = yield documentProcessingService.processDocument(uploadResult.id);\n        setStepProgress(function (prev) {\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            ocr: 1\n          });\n        });\n        setProgress(0.8);\n        if (isCancelled) {\n          console.log('Processing cancelled after OCR.');\n          setIsLoading(false);\n          return;\n        }\n        var classificationResult = yield documentProcessingService.classifyDocument(uploadResult.id);\n        setStepProgress(function (prev) {\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            classification: 1\n          });\n        });\n        setProgress(1);\n        var finalDocumentData = _objectSpread(_objectSpread({}, uploadResult), {}, {\n          extractedText: ocrResult == null ? void 0 : ocrResult.text,\n          classification: classificationResult == null ? void 0 : classificationResult.classification,\n          classificationConfidence: classificationResult == null ? void 0 : classificationResult.confidence\n        });\n        setDocumentData(finalDocumentData);\n      } catch (err) {\n        var userFriendlyMessage = handleFirebaseError(err, 'Document Processing Hook');\n        setError(userFriendlyMessage);\n        console.error('Document processing failed:', err);\n        setProgress(0);\n        setStepProgress({\n          upload: 0,\n          ocr: 0,\n          classification: 0\n        });\n      } finally {\n        setIsLoading(false);\n        setIsCancelled(false);\n      }\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [isCancelled]);\n  return {\n    isLoading: isLoading,\n    error: error,\n    progress: progress,\n    stepProgress: stepProgress,\n    documentData: documentData,\n    startProcessing: startProcessing,\n    cancelProcessing: cancelProcessing\n  };\n};\nexport default useDocumentProcessing;","map":{"version":3,"names":["useState","useCallback","documentProcessingService","handleFirebaseError","useDocumentProcessing","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","error","setError","_useState5","_useState6","progress","setProgress","_useState7","_useState8","documentData","setDocumentData","_useState9","upload","ocr","classification","_useState0","stepProgress","setStepProgress","_useState1","_useState10","isCancelled","setIsCancelled","cancelProcessing","console","log","startProcessing","_ref","_asyncToGenerator","file","documentType","processedFile","uploadResult","uploadDocument","prev","_objectSpread","ocrResult","processDocument","id","classificationResult","classifyDocument","finalDocumentData","extractedText","text","classificationConfidence","confidence","err","userFriendlyMessage","_x","_x2","apply","arguments"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/hooks/useDocumentProcessing.js"],"sourcesContent":["// client/src/features/documents/hooks/useDocumentProcessing.js\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport { documentProcessingService } from '../services/documentProcessingService';\r\nimport { handleFirebaseError } from '../../../utils/errorHandler'; // Use the centralized error handler\r\n\r\n/**\r\n * Custom hook for managing the document processing flow (upload, OCR, classification).\r\n * Handles state for loading, error, and progress.\r\n */\r\nconst useDocumentProcessing = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [progress, setProgress] = useState(0); // Overall progress (0 to 1)\r\n  const [documentData, setDocumentData] = useState(null); // To store processed document data\r\n\r\n  // State for tracking individual step progress (optional, for more detailed UI)\r\n  const [stepProgress, setStepProgress] = useState({\r\n    upload: 0,\r\n    ocr: 0,\r\n    classification: 0,\r\n  });\r\n\r\n  // State for cancellation (placeholder)\r\n  const [isCancelled, setIsCancelled] = useState(false);\r\n  const cancelProcessing = useCallback(() => {\r\n    console.log('Processing cancellation requested.');\r\n    setIsCancelled(true);\r\n    // TODO: Implement actual cancellation logic in service/utility functions\r\n  }, []);\r\n\r\n\r\n  /**\r\n   * Starts the document processing flow.\r\n   * @param {File} file - The document file to process.\r\n   * @param {string} documentType - The type of document.\r\n   */\r\n  const startProcessing = useCallback(async (file, documentType) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setProgress(0);\r\n    setStepProgress({ upload: 0, ocr: 0, classification: 0 });\r\n    setDocumentData(null);\r\n    setIsCancelled(false); // Reset cancellation state\r\n\r\n    try {\r\n      // Step 1: Preprocess Image (if needed)\r\n      // Assuming preprocessImage updates progress or is quick\r\n      // const processedFile = await documentProcessingService.preprocessImage(file);\r\n      const processedFile = file; // Use original file for now\r\n\r\n      // Check for cancellation before starting upload\r\n      if (isCancelled) {\r\n        console.log('Processing cancelled before upload.');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Step 2: Upload Document\r\n      // The uploadDocument service function now handles feature toggle and fallback\r\n      const uploadResult = await documentProcessingService.uploadDocument(\r\n        processedFile,\r\n        documentType,\r\n        // Add progress callback for upload if service supports it\r\n        // (progressEvent) => {\r\n        //   const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total) / 100;\r\n        //   setStepProgress(prev => ({ ...prev, upload: percentCompleted }));\r\n        //   setProgress(percentCompleted * 0.3); // Example: Upload is 30% of total progress\r\n        // }\r\n      );\r\n      setStepProgress(prev => ({ ...prev, upload: 1 })); // Mark upload as complete\r\n      setProgress(0.3); // Update overall progress\r\n\r\n      // Check for cancellation after upload\r\n      if (isCancelled) {\r\n        console.log('Processing cancelled after upload.');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Step 3: Perform OCR (Client-side or API via service)\r\n      // The processDocument service function will handle feature toggle and fallback\r\n      const ocrResult = await documentProcessingService.processDocument(\r\n        uploadResult.id, // Assuming upload returns an ID\r\n        // Add progress callback for OCR if service supports it\r\n        // (progress) => {\r\n        //   setStepProgress(prev => ({ ...prev, ocr: progress }));\r\n        //   setProgress(0.3 + progress * 0.5); // Example: OCR is 50% of total progress (0.3 + 0.5 = 0.8)\r\n        // }\r\n      );\r\n       setStepProgress(prev => ({ ...prev, ocr: 1 })); // Mark OCR as complete\r\n       setProgress(0.8); // Update overall progress\r\n\r\n\r\n      // Check for cancellation after OCR\r\n      if (isCancelled) {\r\n        console.log('Processing cancelled after OCR.');\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Step 4: Classify Document (Client-side or API via service)\r\n      // The classifyDocument service function will handle feature toggle and fallback\r\n      const classificationResult = await documentProcessingService.classifyDocument(\r\n        uploadResult.id, // Assuming classification needs document ID\r\n        // Or pass extracted text directly: ocrResult.text\r\n      );\r\n      setStepProgress(prev => ({ ...prev, classification: 1 })); // Mark classification as complete\r\n      setProgress(1); // Update overall progress\r\n\r\n      // Combine results and set final document data\r\n      const finalDocumentData = {\r\n        ...uploadResult, // Includes id, imageUrl, etc.\r\n        extractedText: ocrResult?.text,\r\n        classification: classificationResult?.classification,\r\n        classificationConfidence: classificationResult?.confidence,\r\n        // Add other relevant processed data\r\n      };\r\n      setDocumentData(finalDocumentData);\r\n\r\n    } catch (err) {\r\n      // Use the centralized error handler\r\n      const userFriendlyMessage = handleFirebaseError(err, 'Document Processing Hook');\r\n      setError(userFriendlyMessage);\r\n      console.error('Document processing failed:', err);\r\n      // Consider resetting progress or setting it to a failed state\r\n      setProgress(0);\r\n      setStepProgress({ upload: 0, ocr: 0, classification: 0 });\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsCancelled(false); // Reset cancellation state\r\n    }\r\n  }, [isCancelled]); // Add isCancelled to dependency array\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    progress,\r\n    stepProgress,\r\n    documentData,\r\n    startProcessing,\r\n    cancelProcessing,\r\n  };\r\n};\r\n\r\nexport default useDocumentProcessing;\r\n\r\n// Add comments about progress tracking, cancellation, and feature toggle integration\r\n// Progress tracking: The hook uses `progress` state for overall progress (0 to 1) and `stepProgress` for individual steps (upload, ocr, classification). Progress updates should be passed from the service/utility functions via callbacks.\r\n// Cancellation support: The hook provides a `cancelProcessing` function and tracks `isCancelled` state. This state should be checked at appropriate points in the processing flow (e.g., before/after async operations) to stop further execution. Actual cancellation within ongoing async operations (like Tesseract OCR or large file uploads) needs to be implemented in the respective service/utility functions.\r\n// Feature toggle integration details: The hook relies on the `documentProcessingService` functions (`uploadDocument`, `processDocument`, etc.), which are now feature-toggled internally. The hook itself doesn't need to directly check the feature flag, as the service layer handles the switching and fallback logic.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}