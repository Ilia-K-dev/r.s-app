{"ast":null,"code":"var cache = new Map();\nvar setCache = function setCache(key, value) {\n  var ttl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var item = {\n    value: value,\n    expiry: ttl > 0 ? Date.now() + ttl : null\n  };\n  cache.set(key, item);\n};\nvar getCache = function getCache(key) {\n  var item = cache.get(key);\n  if (!item) {\n    return undefined;\n  }\n  if (item.expiry && Date.now() > item.expiry) {\n    cache.delete(key);\n    return undefined;\n  }\n  return item.value;\n};\nvar invalidateCache = function invalidateCache(key) {\n  cache.delete(key);\n};\nvar clearCache = function clearCache() {\n  cache.clear();\n};\nexport { setCache, getCache, invalidateCache, clearCache };","map":{"version":3,"names":["cache","Map","setCache","key","value","ttl","arguments","length","undefined","item","expiry","Date","now","set","getCache","get","delete","invalidateCache","clearCache","clear"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/cache.js"],"sourcesContent":["const cache = new Map();\r\n\r\n/**\r\n * @desc Sets data in the cache with an optional expiration time.\r\n * @param {string} key - The cache key.\r\n * @param {*} value - The data to cache.\r\n * @param {number} [ttl=0] - Time to live in milliseconds. 0 means no expiration.\r\n */\r\nconst setCache = (key, value, ttl = 0) => {\r\n  const item = {\r\n    value,\r\n    expiry: ttl > 0 ? Date.now() + ttl : null,\r\n  };\r\n  cache.set(key, item);\r\n};\r\n\r\n/**\r\n * @desc Gets data from the cache. Returns undefined if the key is not found or has expired.\r\n * @param {string} key - The cache key.\r\n * @returns {*} The cached data or undefined.\r\n */\r\nconst getCache = (key) => {\r\n  const item = cache.get(key);\r\n  if (!item) {\r\n    return undefined;\r\n  }\r\n\r\n  if (item.expiry && Date.now() > item.expiry) {\r\n    cache.delete(key);\r\n    return undefined;\r\n  }\r\n\r\n  return item.value;\r\n};\r\n\r\n/**\r\n * @desc Removes data from the cache for a given key.\r\n * @param {string} key - The cache key.\r\n */\r\nconst invalidateCache = (key) => {\r\n  cache.delete(key);\r\n};\r\n\r\n/**\r\n * @desc Clears the entire cache.\r\n */\r\nconst clearCache = () => {\r\n  cache.clear();\r\n};\r\n\r\nexport { setCache, getCache, invalidateCache, clearCache };\r\n"],"mappings":"AAAA,IAAMA,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;AAQvB,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,GAAG,EAAEC,KAAK,EAAc;EAAA,IAAZC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACnC,IAAMG,IAAI,GAAG;IACXL,KAAK,EAALA,KAAK;IACLM,MAAM,EAAEL,GAAG,GAAG,CAAC,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGP,GAAG,GAAG;EACvC,CAAC;EACDL,KAAK,CAACa,GAAG,CAACV,GAAG,EAAEM,IAAI,CAAC;AACtB,CAAC;AAOD,IAAMK,QAAQ,GAAG,SAAXA,QAAQA,CAAIX,GAAG,EAAK;EACxB,IAAMM,IAAI,GAAGT,KAAK,CAACe,GAAG,CAACZ,GAAG,CAAC;EAC3B,IAAI,CAACM,IAAI,EAAE;IACT,OAAOD,SAAS;EAClB;EAEA,IAAIC,IAAI,CAACC,MAAM,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACC,MAAM,EAAE;IAC3CV,KAAK,CAACgB,MAAM,CAACb,GAAG,CAAC;IACjB,OAAOK,SAAS;EAClB;EAEA,OAAOC,IAAI,CAACL,KAAK;AACnB,CAAC;AAMD,IAAMa,eAAe,GAAG,SAAlBA,eAAeA,CAAId,GAAG,EAAK;EAC/BH,KAAK,CAACgB,MAAM,CAACb,GAAG,CAAC;AACnB,CAAC;AAKD,IAAMe,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;EACvBlB,KAAK,CAACmB,KAAK,CAAC,CAAC;AACf,CAAC;AAED,SAASjB,QAAQ,EAAEY,QAAQ,EAAEG,eAAe,EAAEC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}