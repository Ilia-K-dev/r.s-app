{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar DB_NAME = 'analyticsCacheDB';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'analyticsCache';\nvar CACHE_DURATION_MS = 5 * 60 * 1000;\nvar db = null;\nvar openDatabase = function openDatabase() {\n  return new Promise(function (resolve, reject) {\n    var request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onupgradeneeded = function (event) {\n      var db = event.target.result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        db.createObjectStore(STORE_NAME, {\n          keyPath: 'key'\n        });\n      }\n    };\n    request.onsuccess = function (event) {\n      db = event.target.result;\n      resolve(db);\n    };\n    request.onerror = function (event) {\n      reject('Error opening IndexedDB: ' + event.target.errorCode);\n    };\n  });\n};\nexport var setCache = function () {\n  var _ref = _asyncToGenerator(function* (key, data) {\n    if (!db) {\n      db = yield openDatabase();\n    }\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction([STORE_NAME], 'readwrite');\n      var store = transaction.objectStore(STORE_NAME);\n      var timestamp = Date.now();\n      var putRequest = store.put({\n        key: key,\n        data: data,\n        timestamp: timestamp\n      });\n      putRequest.onsuccess = function () {\n        resolve();\n      };\n      putRequest.onerror = function (event) {\n        reject('Error setting cache in IndexedDB: ' + event.target.errorCode);\n      };\n    });\n  });\n  return function setCache(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCache = function () {\n  var _ref2 = _asyncToGenerator(function* (key) {\n    if (!db) {\n      db = yield openDatabase();\n    }\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction([STORE_NAME], 'readonly');\n      var store = transaction.objectStore(STORE_NAME);\n      var getRequest = store.get(key);\n      getRequest.onsuccess = function (event) {\n        var item = event.target.result;\n        if (item && Date.now() - item.timestamp < CACHE_DURATION_MS) {\n          resolve(item.data);\n        } else {\n          resolve(null);\n        }\n      };\n      getRequest.onerror = function (event) {\n        reject('Error getting cache from IndexedDB: ' + event.target.errorCode);\n      };\n    });\n  });\n  return function getCache(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var clearCache = function () {\n  var _ref3 = _asyncToGenerator(function* (key) {\n    if (!db) {\n      db = yield openDatabase();\n    }\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction([STORE_NAME], 'readwrite');\n      var store = transaction.objectStore(STORE_NAME);\n      var deleteRequest = store.delete(key);\n      deleteRequest.onsuccess = function () {\n        resolve();\n      };\n      deleteRequest.onerror = function (event) {\n        reject('Error clearing cache from IndexedDB: ' + event.target.errorCode);\n      };\n    });\n  });\n  return function clearCache(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var clearExpiredCache = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    if (!db) {\n      db = yield openDatabase();\n    }\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction([STORE_NAME], 'readwrite');\n      var store = transaction.objectStore(STORE_NAME);\n      var now = Date.now();\n      store.openCursor().onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          if (now - cursor.value.timestamp >= CACHE_DURATION_MS) {\n            cursor.delete();\n          }\n          cursor.continue();\n        } else {\n          resolve();\n        }\n      };\n      transaction.onerror = function (event) {\n        reject('Error clearing expired cache from IndexedDB: ' + event.target.errorCode);\n      };\n    });\n  });\n  return function clearExpiredCache() {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["DB_NAME","DB_VERSION","STORE_NAME","CACHE_DURATION_MS","db","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","target","result","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","onerror","errorCode","setCache","_ref","_asyncToGenerator","key","data","transaction","store","objectStore","timestamp","Date","now","putRequest","put","_x","_x2","apply","arguments","getCache","_ref2","getRequest","get","item","_x3","clearCache","_ref3","deleteRequest","delete","_x4","clearExpiredCache","_ref4","openCursor","cursor","value","continue"],"sources":["C:/Users/user/Documents/app.v3/client/src/utils/indexedDbCache.js"],"sourcesContent":["// client/src/utils/indexedDbCache.js\r\n\r\nconst DB_NAME = 'analyticsCacheDB';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'analyticsCache';\r\nconst CACHE_DURATION_MS = 5 * 60 * 1000; // 5 minutes cache duration\r\n\r\nlet db = null;\r\n\r\nconst openDatabase = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n        db.createObjectStore(STORE_NAME, { keyPath: 'key' });\r\n      }\r\n    };\r\n\r\n    request.onsuccess = (event) => {\r\n      db = event.target.result;\r\n      resolve(db);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      reject('Error opening IndexedDB: ' + event.target.errorCode);\r\n    };\r\n  });\r\n};\r\n\r\nexport const setCache = async (key, data) => {\r\n  if (!db) {\r\n    db = await openDatabase();\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const timestamp = Date.now();\r\n    const putRequest = store.put({ key, data, timestamp });\r\n\r\n    putRequest.onsuccess = () => {\r\n      resolve();\r\n    };\r\n\r\n    putRequest.onerror = (event) => {\r\n      reject('Error setting cache in IndexedDB: ' + event.target.errorCode);\r\n    };\r\n  });\r\n};\r\n\r\nexport const getCache = async (key) => {\r\n  if (!db) {\r\n    db = await openDatabase();\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([STORE_NAME], 'readonly');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const getRequest = store.get(key);\r\n\r\n    getRequest.onsuccess = (event) => {\r\n      const item = event.target.result;\r\n      if (item && Date.now() - item.timestamp < CACHE_DURATION_MS) {\r\n        resolve(item.data);\r\n      } else {\r\n        // Item not found or expired\r\n        resolve(null);\r\n      }\r\n    };\r\n\r\n    getRequest.onerror = (event) => {\r\n      reject('Error getting cache from IndexedDB: ' + event.target.errorCode);\r\n    };\r\n  });\r\n};\r\n\r\nexport const clearCache = async (key) => {\r\n  if (!db) {\r\n    db = await openDatabase();\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const deleteRequest = store.delete(key);\r\n\r\n    deleteRequest.onsuccess = () => {\r\n      resolve();\r\n    };\r\n\r\n    deleteRequest.onerror = (event) => {\r\n      reject('Error clearing cache from IndexedDB: ' + event.target.errorCode);\r\n    };\r\n  });\r\n};\r\n\r\n// Optional: Function to clear all expired cache entries\r\nexport const clearExpiredCache = async () => {\r\n  if (!db) {\r\n    db = await openDatabase();\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n    const store = transaction.objectStore(STORE_NAME);\r\n    const now = Date.now();\r\n\r\n    store.openCursor().onsuccess = (event) => {\r\n      const cursor = event.target.result;\r\n      if (cursor) {\r\n        if (now - cursor.value.timestamp >= CACHE_DURATION_MS) {\r\n          cursor.delete();\r\n        }\r\n        cursor.continue();\r\n      } else {\r\n        resolve();\r\n      }\r\n    };\r\n\r\n    transaction.onerror = (event) => {\r\n      reject('Error clearing expired cache from IndexedDB: ' + event.target.errorCode);\r\n    };\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}