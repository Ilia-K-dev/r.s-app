{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport { API_URL } from \"../../../core/config/api.config\";\nimport { isFeatureEnabled } from \"../../../core/config/featureFlags\";\nimport { errorHandler } from \"../../../utils/errorHandler\";\nimport { getCache, setCache, clearCache } from \"../../../utils/indexedDbCache\";\nimport { fetchUserReceipts, fetchReceiptsByYear, fetchUserInventory, fetchStockMovements } from \"../utils/dataFetchers\";\nimport { calculateSpendingByCategory, calculateMonthlySpending, calculateTopMerchants, calculateInventoryValueTrend, calculateInventoryTurnover } from \"../utils/calculators\";\nvar getCacheKey = function getCacheKey(userId, period, year, limit, type) {\n  return `${userId}_${type}_${period || 'default'}_${year || 'default'}_${limit || 'default'}`;\n};\nexport var clearUserCache = function () {\n  var _ref = _asyncToGenerator(function* (userId) {\n    var cacheTypes = ['spendingByCategory', 'monthlySpending', 'topMerchants', 'inventoryValueTrend', 'inventoryTurnover'];\n    var cacheKeysToClear = cacheTypes.map(function (type) {\n      return getCacheKey(userId, null, null, null, type);\n    });\n    for (var key of cacheKeysToClear) {\n      yield clearCache(key);\n    }\n  });\n  return function clearUserCache(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getSpendingByCategory = function () {\n  var _ref2 = _asyncToGenerator(function* (userId) {\n    var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'month';\n    try {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        var cacheKey = getCacheKey(userId, period, null, null, 'spendingByCategory');\n        var cachedData = yield getCache(cacheKey);\n        if (cachedData) {\n          console.log(`Cache hit for ${cacheKey}`);\n          return cachedData;\n        }\n        console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\n        var startTime = performance.now();\n        var receipts = yield fetchUserReceipts(userId, period);\n        var fetchEndTime = performance.now();\n        var result = calculateSpendingByCategory(receipts);\n        var calcEndTime = performance.now();\n        console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\n        yield setCache(cacheKey, result);\n        return result;\n      } else {\n        var response = yield axios.get(`${API_URL}/api/analytics/spending-by-category`, {\n          params: {\n            userId: userId,\n            period: period\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        try {\n          console.warn('Falling back to API for spending by category due to error:', error);\n          var _response = yield axios.get(`${API_URL}/api/analytics/spending-by-category`, {\n            params: {\n              userId: userId,\n              period: period\n            }\n          });\n          return _response.data;\n        } catch (fallbackError) {\n          throw errorHandler(fallbackError, 'Error getting spending by category');\n        }\n      } else {\n        throw errorHandler(error, 'Error getting spending by category');\n      }\n    }\n  });\n  return function getSpendingByCategory(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getMonthlySpending = function () {\n  var _ref3 = _asyncToGenerator(function* (userId) {\n    var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date().getFullYear();\n    try {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        var cacheKey = getCacheKey(userId, null, year, null, 'monthlySpending');\n        var cachedData = yield getCache(cacheKey);\n        if (cachedData) {\n          console.log(`Cache hit for ${cacheKey}`);\n          return cachedData;\n        }\n        console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\n        var startTime = performance.now();\n        var receipts = yield fetchReceiptsByYear(userId, year);\n        var fetchEndTime = performance.now();\n        var result = calculateMonthlySpending(receipts);\n        var calcEndTime = performance.now();\n        console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\n        yield setCache(cacheKey, result);\n        return result;\n      } else {\n        var response = yield axios.get(`${API_URL}/api/analytics/monthly-spending`, {\n          params: {\n            userId: userId,\n            year: year\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        try {\n          console.warn('Falling back to API for monthly spending due to error:', error);\n          var _response2 = yield axios.get(`${API_URL}/api/analytics/monthly-spending`, {\n            params: {\n              userId: userId,\n              year: year\n            }\n          });\n          return _response2.data;\n        } catch (fallbackError) {\n          throw errorHandler(fallbackError, 'Error getting monthly spending');\n        }\n      } else {\n        throw errorHandler(error, 'Error getting monthly spending');\n      }\n    }\n  });\n  return function getMonthlySpending(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getTopMerchants = function () {\n  var _ref4 = _asyncToGenerator(function* (userId) {\n    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    var period = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'month';\n    try {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        var cacheKey = getCacheKey(userId, period, null, limit, 'topMerchants');\n        var cachedData = yield getCache(cacheKey);\n        if (cachedData) {\n          console.log(`Cache hit for ${cacheKey}`);\n          return cachedData;\n        }\n        console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\n        var startTime = performance.now();\n        var receipts = yield fetchUserReceipts(userId, period);\n        var fetchEndTime = performance.now();\n        var result = calculateTopMerchants(receipts, limit);\n        var calcEndTime = performance.now();\n        console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\n        yield setCache(cacheKey, result);\n        return result;\n      } else {\n        var response = yield axios.get(`${API_URL}/api/analytics/top-merchants`, {\n          params: {\n            userId: userId,\n            limit: limit,\n            period: period\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        try {\n          console.warn('Falling back to API for top merchants due to error:', error);\n          var _response3 = yield axios.get(`${API_URL}/api/analytics/top-merchants`, {\n            params: {\n              userId: userId,\n              limit: limit,\n              period: period\n            }\n          });\n          return _response3.data;\n        } catch (fallbackError) {\n          throw errorHandler(fallbackError, 'Error getting top merchants');\n        }\n      } else {\n        throw errorHandler(error, 'Error getting top merchants');\n      }\n    }\n  });\n  return function getTopMerchants(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getInventoryValueTrend = function () {\n  var _ref5 = _asyncToGenerator(function* (userId) {\n    var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'month';\n    try {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        var cacheKey = getCacheKey(userId, period, null, null, 'inventoryValueTrend');\n        var cachedData = yield getCache(cacheKey);\n        if (cachedData) {\n          console.log(`Cache hit for ${cacheKey}`);\n          return cachedData;\n        }\n        console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\n        var startTime = performance.now();\n        var inventory = yield fetchUserInventory(userId);\n        var stockMovements = yield fetchStockMovements(userId, period);\n        var fetchEndTime = performance.now();\n        var result = calculateInventoryValueTrend(inventory, stockMovements);\n        var calcEndTime = performance.now();\n        console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\n        yield setCache(cacheKey, result);\n        return result;\n      } else {\n        var response = yield axios.get(`${API_URL}/api/analytics/inventory-value-trend`, {\n          params: {\n            userId: userId,\n            period: period\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        try {\n          console.warn('Falling back to API for inventory value trend due to error:', error);\n          var _response4 = yield axios.get(`${API_URL}/api/analytics/inventory-value-trend`, {\n            params: {\n              userId: userId,\n              period: period\n            }\n          });\n          return _response4.data;\n        } catch (fallbackError) {\n          throw errorHandler(fallbackError, 'Error getting inventory value trend');\n        }\n      } else {\n        throw errorHandler(error, 'Error getting inventory value trend');\n      }\n    }\n  });\n  return function getInventoryValueTrend(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getInventoryTurnover = function () {\n  var _ref6 = _asyncToGenerator(function* (userId) {\n    try {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        var cacheKey = getCacheKey(userId, null, null, null, 'inventoryTurnover');\n        var cachedData = yield getCache(cacheKey);\n        if (cachedData) {\n          console.log(`Cache hit for ${cacheKey}`);\n          return cachedData;\n        }\n        console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\n        var startTime = performance.now();\n        var inventory = yield fetchUserInventory(userId);\n        var stockMovements = yield fetchStockMovements(userId, 'year');\n        var fetchEndTime = performance.now();\n        var result = calculateInventoryTurnover(inventory, stockMovements);\n        var calcEndTime = performance.now();\n        console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\n        yield setCache(cacheKey, result);\n        return result;\n      } else {\n        var response = yield axios.get(`${API_URL}/api/analytics/inventory-turnover`, {\n          params: {\n            userId: userId\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      if (isFeatureEnabled('firebaseDirectIntegration')) {\n        try {\n          console.warn('Falling back to API for inventory turnover due to error:', error);\n          var _response5 = yield axios.get(`${API_URL}/api/analytics/inventory-turnover`, {\n            params: {\n              userId: userId\n            }\n          });\n          return _response5.data;\n        } catch (fallbackError) {\n          throw errorHandler(fallbackError, 'Error getting inventory turnover');\n        }\n      } else {\n        throw errorHandler(error, 'Error getting inventory turnover');\n      }\n    }\n  });\n  return function getInventoryTurnover(_x6) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var generateReport = function () {\n  var _ref7 = _asyncToGenerator(function* (userId, reportType) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    try {\n      var response = yield axios.post(`${API_URL}/api/analytics/generate-report`, {\n        userId: userId,\n        reportType: reportType,\n        options: options\n      });\n      return response.data;\n    } catch (error) {\n      throw errorHandler(error, 'Error generating report');\n    }\n  });\n  return function generateReport(_x7, _x8) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","API_URL","isFeatureEnabled","errorHandler","getCache","setCache","clearCache","fetchUserReceipts","fetchReceiptsByYear","fetchUserInventory","fetchStockMovements","calculateSpendingByCategory","calculateMonthlySpending","calculateTopMerchants","calculateInventoryValueTrend","calculateInventoryTurnover","getCacheKey","userId","period","year","limit","type","clearUserCache","_ref","_asyncToGenerator","cacheTypes","cacheKeysToClear","map","key","_x","apply","arguments","getSpendingByCategory","_ref2","length","undefined","cacheKey","cachedData","console","log","startTime","performance","now","receipts","fetchEndTime","result","calcEndTime","response","get","params","data","error","warn","fallbackError","_x2","getMonthlySpending","_ref3","Date","getFullYear","_x3","getTopMerchants","_ref4","_x4","getInventoryValueTrend","_ref5","inventory","stockMovements","_x5","getInventoryTurnover","_ref6","_x6","generateReport","_ref7","reportType","options","post","_x7","_x8"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/services/analyticsService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../../../core/config/api.config';\r\nimport { isFeatureEnabled } from '../../../core/config/featureFlags';\r\nimport { errorHandler } from '../../../utils/errorHandler';\r\nimport { getCache, setCache, clearCache } from '../../../utils/indexedDbCache'; // Import IndexedDB cache functions\r\nimport {\r\n  fetchUserReceipts,\r\n  fetchReceiptsByYear,\r\n  fetchUserInventory,\r\n  fetchStockMovements\r\n} from '../utils/dataFetchers';\r\nimport {\r\n  calculateSpendingByCategory,\r\n  calculateMonthlySpending,\r\n  calculateTopMerchants,\r\n  calculateInventoryValueTrend,\r\n  calculateInventoryTurnover\r\n} from '../utils/calculators';\r\n\r\n// Helper to generate cache keys\r\nconst getCacheKey = (userId, period, year, limit, type) => {\r\n  return `${userId}_${type}_${period || 'default'}_${year || 'default'}_${limit || 'default'}`;\r\n};\r\n\r\n// Helper to clear cache for a specific user\r\nexport const clearUserCache = async (userId) => {\r\n  // Clear cache from IndexedDB for the specific user\r\n  // Note: Clearing all keys starting with userId_ might be inefficient for large caches.\r\n  // A more sophisticated approach might involve storing user-specific data in a separate object store or using indexes.\r\n  // For now, we'll iterate and delete.\r\n  const cacheTypes = ['spendingByCategory', 'monthlySpending', 'topMerchants', 'inventoryValueTrend', 'inventoryTurnover'];\r\n  const cacheKeysToClear = cacheTypes.map(type => getCacheKey(userId, null, null, null, type));\r\n\r\n  // Clear from IndexedDB\r\n  for (const key of cacheKeysToClear) {\r\n    await clearCache(key);\r\n  }\r\n};\r\n\r\n// Implementation with feature toggle and IndexedDB caching\r\nexport const getSpendingByCategory = async (userId, period = 'month') => {\r\n  try {\r\n    // Check if feature is enabled\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      const cacheKey = getCacheKey(userId, period, null, null, 'spendingByCategory'); // Include type in key\r\n      // Check IndexedDB cache first\r\n      const cachedData = await getCache(cacheKey);\r\n      if (cachedData) {\r\n        console.log(`Cache hit for ${cacheKey}`);\r\n        return cachedData;\r\n      }\r\n      console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\r\n\r\n      const startTime = performance.now(); // Start timing\r\n      // Fetch data directly from Firestore\r\n      const receipts = await fetchUserReceipts(userId, period);\r\n      const fetchEndTime = performance.now(); // End fetch timing\r\n      const result = calculateSpendingByCategory(receipts);\r\n      const calcEndTime = performance.now(); // End calculation timing\r\n\r\n      console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\r\n\r\n      // Store result in IndexedDB cache\r\n      await setCache(cacheKey, result);\r\n\r\n      return result;\r\n    } else {\r\n      // Fall back to API implementation\r\n      const response = await axios.get(`${API_URL}/api/analytics/spending-by-category`, {\r\n        params: { userId, period },\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    // Handle error and potentially fall back to API\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      try {\r\n        console.warn('Falling back to API for spending by category due to error:', error);\r\n        const response = await axios.get(`${API_URL}/api/analytics/spending-by-category`, {\r\n          params: { userId, period },\r\n        });\r\n        return response.data;\r\n      } catch (fallbackError) {\r\n        throw errorHandler(fallbackError, 'Error getting spending by category');\r\n      }\r\n    } else {\r\n      throw errorHandler(error, 'Error getting spending by category');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getMonthlySpending = async (userId, year = new Date().getFullYear()) => {\r\n  try {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      const cacheKey = getCacheKey(userId, null, year, null, 'monthlySpending'); // Include type in key\r\n      const cachedData = await getCache(cacheKey);\r\n      if (cachedData) {\r\n        console.log(`Cache hit for ${cacheKey}`);\r\n        return cachedData;\r\n      }\r\n      console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\r\n\r\n      const startTime = performance.now(); // Start timing\r\n      const receipts = await fetchReceiptsByYear(userId, year);\r\n      const fetchEndTime = performance.now(); // End fetch timing\r\n      const result = calculateMonthlySpending(receipts);\r\n      const calcEndTime = performance.now(); // End calculation timing\r\n\r\n      console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\r\n\r\n      await setCache(cacheKey, result);\r\n\r\n      return result;\r\n    } else {\r\n      const response = await axios.get(`${API_URL}/api/analytics/monthly-spending`, {\r\n        params: { userId, year },\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      try {\r\n        console.warn('Falling back to API for monthly spending due to error:', error);\r\n        const response = await axios.get(`${API_URL}/api/analytics/monthly-spending`, {\r\n          params: { userId, year },\r\n        });\r\n        return response.data;\r\n      } catch (fallbackError) {\r\n        throw errorHandler(fallbackError, 'Error getting monthly spending');\r\n      }\r\n    } else {\r\n      throw errorHandler(error, 'Error getting monthly spending');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getTopMerchants = async (userId, limit = 5, period = 'month') => {\r\n  try {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      const cacheKey = getCacheKey(userId, period, null, limit, 'topMerchants'); // Include type in key\r\n      const cachedData = await getCache(cacheKey);\r\n      if (cachedData) {\r\n        console.log(`Cache hit for ${cacheKey}`);\r\n        return cachedData;\r\n      }\r\n      console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\r\n\r\n      const startTime = performance.now(); // Start timing\r\n      const receipts = await fetchUserReceipts(userId, period);\r\n      const fetchEndTime = performance.now(); // End fetch timing\r\n      const result = calculateTopMerchants(receipts, limit);\r\n      const calcEndTime = performance.now(); // End calculation timing\r\n\r\n      console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\r\n\r\n      await setCache(cacheKey, result);\r\n\r\n      return result;\r\n    } else {\r\n      const response = await axios.get(`${API_URL}/api/analytics/top-merchants`, {\r\n        params: { userId, limit, period },\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      try {\r\n        console.warn('Falling back to API for top merchants due to error:', error);\r\n        const response = await axios.get(`${API_URL}/api/analytics/top-merchants`, {\r\n          params: { userId, limit, period },\r\n        });\r\n        return response.data;\r\n      } catch (fallbackError) {\r\n        throw errorHandler(fallbackError, 'Error getting top merchants');\r\n      }\r\n    } else {\r\n      throw errorHandler(error, 'Error getting top merchants');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getInventoryValueTrend = async (userId, period = 'month') => {\r\n  try {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      const cacheKey = getCacheKey(userId, period, null, null, 'inventoryValueTrend'); // Include type in key\r\n      const cachedData = await getCache(cacheKey);\r\n      if (cachedData) {\r\n        console.log(`Cache hit for ${cacheKey}`);\r\n        return cachedData;\r\n      }\r\n      console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\r\n\r\n      const startTime = performance.now(); // Start timing\r\n      const inventory = await fetchUserInventory(userId);\r\n      const stockMovements = await fetchStockMovements(userId, period);\r\n      const fetchEndTime = performance.now(); // End fetch timing\r\n      const result = calculateInventoryValueTrend(inventory, stockMovements);\r\n      const calcEndTime = performance.now(); // End calculation timing\r\n\r\n      console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\r\n\r\n      await setCache(cacheKey, result);\r\n\r\n      return result;\r\n    } else {\r\n      const response = await axios.get(`${API_URL}/api/analytics/inventory-value-trend`, {\r\n        params: { userId, period },\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      try {\r\n        console.warn('Falling back to API for inventory value trend due to error:', error);\r\n        const response = await axios.get(`${API_URL}/api/analytics/inventory-value-trend`, {\r\n          params: { userId, period },\r\n        });\r\n        return response.data;\r\n      } catch (fallbackError) {\r\n        throw errorHandler(fallbackError, 'Error getting inventory value trend');\r\n      }\r\n    } else {\r\n      throw errorHandler(error, 'Error getting inventory value trend');\r\n    }\r\n  }\r\n};\r\n\r\nexport const getInventoryTurnover = async (userId) => {\r\n  try {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      const cacheKey = getCacheKey(userId, null, null, null, 'inventoryTurnover'); // Include type in key\r\n      const cachedData = await getCache(cacheKey);\r\n      if (cachedData) {\r\n        console.log(`Cache hit for ${cacheKey}`);\r\n        return cachedData;\r\n      }\r\n      console.log(`Cache miss for ${cacheKey}. Fetching from Firestore.`);\r\n\r\n      const startTime = performance.now(); // Start timing\r\n      const inventory = await fetchUserInventory(userId);\r\n      const stockMovements = await fetchStockMovements(userId, 'year'); // Use a full year for turnover\r\n      const fetchEndTime = performance.now(); // End fetch timing\r\n      const result = calculateInventoryTurnover(inventory, stockMovements);\r\n      const calcEndTime = performance.now(); // End calculation timing\r\n\r\n      console.log(`Performance - ${cacheKey}: Fetch time: ${fetchEndTime - startTime}ms, Calculation time: ${calcEndTime - fetchEndTime}ms`);\r\n\r\n      await setCache(cacheKey, result);\r\n\r\n      return result;\r\n    } else {\r\n      const response = await axios.get(`${API_URL}/api/analytics/inventory-turnover`, {\r\n        params: { userId },\r\n      });\r\n      return response.data;\r\n    }\r\n  } catch (error) {\r\n    if (isFeatureEnabled('firebaseDirectIntegration')) {\r\n      try {\r\n        console.warn('Falling back to API for inventory turnover due to error:', error);\r\n        const response = await axios.get(`${API_URL}/api/analytics/inventory-turnover`, {\r\n          params: { userId },\r\n        });\r\n        return response.data;\r\n      } catch (fallbackError) {\r\n        throw errorHandler(fallbackError, 'Error getting inventory turnover');\r\n      }\r\n    } else {\r\n      throw errorHandler(error, 'Error getting inventory turnover');\r\n    }\r\n  }\r\n};\r\n\r\nexport const generateReport = async (userId, reportType, options = {}) => {\r\n  try {\r\n    // Report generation still uses the API regardless of the feature flag\r\n    const response = await axios.post(`${API_URL}/api/analytics/generate-report`, {\r\n      userId,\r\n      reportType,\r\n      options,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw errorHandler(error, 'Error generating report');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}