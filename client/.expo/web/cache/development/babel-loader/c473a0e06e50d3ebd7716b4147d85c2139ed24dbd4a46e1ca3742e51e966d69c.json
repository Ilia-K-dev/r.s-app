{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar LOG_LEVELS = {\n  DEBUG: 'debug',\n  INFO: 'info',\n  WARN: 'warn',\n  ERROR: 'error'\n};\nvar isDevelopment = process.env.NODE_ENV === 'development';\nvar Logger = function () {\n  function Logger() {\n    _classCallCheck(this, Logger);\n    this.enabled = isDevelopment || localStorage.getItem('debug') === 'true';\n  }\n  return _createClass(Logger, [{\n    key: \"_formatMessage\",\n    value: function _formatMessage(level, message, data) {\n      var timestamp = new Date().toISOString();\n      return {\n        timestamp: timestamp,\n        level: level,\n        message: message,\n        data: data,\n        app: 'Receipt Scanner'\n      };\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(level, message) {\n      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (!this.enabled) return;\n      var formattedMessage = this._formatMessage(level, message, data);\n      switch (level) {\n        case LOG_LEVELS.DEBUG:\n          console.log(formattedMessage);\n          break;\n        case LOG_LEVELS.INFO:\n          console.info(formattedMessage);\n          break;\n        case LOG_LEVELS.WARN:\n          console.warn(formattedMessage);\n          break;\n        case LOG_LEVELS.ERROR:\n          console.error(formattedMessage);\n          break;\n        default:\n          console.log(formattedMessage);\n      }\n      if (!this._logs) this._logs = [];\n      this._logs.push(formattedMessage);\n      if (this._logs.length > 1000) this._logs.shift();\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message, data) {\n      this._log(LOG_LEVELS.DEBUG, message, data);\n    }\n  }, {\n    key: \"info\",\n    value: function info(message, data) {\n      this._log(LOG_LEVELS.INFO, message, data);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message, data) {\n      this._log(LOG_LEVELS.WARN, message, data);\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, _error) {\n      var errorData = _error ? {\n        message: _error.message,\n        stack: _error.stack,\n        code: _error.code\n      } : null;\n      this._log(LOG_LEVELS.ERROR, message, errorData);\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs() {\n      return this._logs || [];\n    }\n  }, {\n    key: \"clearLogs\",\n    value: function clearLogs() {\n      this._logs = [];\n    }\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(enabled) {\n      this.enabled = enabled;\n      localStorage.setItem('debug', enabled.toString());\n    }\n  }, {\n    key: \"addCustomLevel\",\n    value: function addCustomLevel(level, handler) {\n      var _this = this;\n      if (LOG_LEVELS[level]) {\n        throw new Error(`Log level ${level} already exists`);\n      }\n      LOG_LEVELS[level] = level.toLowerCase();\n      this[level.toLowerCase()] = function (message, data) {\n        var formattedMessage = _this._formatMessage(LOG_LEVELS[level], message, data);\n        handler(formattedMessage);\n        _this._logs.push(formattedMessage);\n      };\n    }\n  }]);\n}();\nexport var logger = new Logger();\nexport default logger;","map":{"version":3,"names":["LOG_LEVELS","DEBUG","INFO","WARN","ERROR","isDevelopment","process","env","NODE_ENV","Logger","_classCallCheck","enabled","localStorage","getItem","_createClass","key","value","_formatMessage","level","message","data","timestamp","Date","toISOString","app","_log","arguments","length","undefined","formattedMessage","console","log","info","warn","error","_logs","push","shift","debug","errorData","stack","code","getLogs","clearLogs","setEnabled","setItem","toString","addCustomLevel","handler","_this","Error","toLowerCase","logger"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/logger.js"],"sourcesContent":["const LOG_LEVELS = {\r\n  DEBUG: 'debug',\r\n  INFO: 'info',\r\n  WARN: 'warn',\r\n  ERROR: 'error',\r\n};\r\n\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\nclass Logger {\r\n  constructor() {\r\n    this.enabled = isDevelopment || localStorage.getItem('debug') === 'true';\r\n  }\r\n\r\n  _formatMessage(level, message, data) {\r\n    const timestamp = new Date().toISOString();\r\n    return {\r\n      timestamp,\r\n      level,\r\n      message,\r\n      data,\r\n      app: 'Receipt Scanner',\r\n    };\r\n  }\r\n\r\n  _log(level, message, data = null) {\r\n    if (!this.enabled) return;\r\n\r\n    const formattedMessage = this._formatMessage(level, message, data);\r\n\r\n    switch (level) {\r\n      case LOG_LEVELS.DEBUG:\r\n        console.log(formattedMessage);\r\n        break;\r\n      case LOG_LEVELS.INFO:\r\n        console.info(formattedMessage);\r\n        break;\r\n      case LOG_LEVELS.WARN:\r\n        console.warn(formattedMessage);\r\n        break;\r\n      case LOG_LEVELS.ERROR:\r\n        console.error(formattedMessage);\r\n        // Could add error reporting service integration here\r\n        break;\r\n      default:\r\n        console.log(formattedMessage);\r\n    }\r\n\r\n    // Store logs in memory for debugging\r\n    if (!this._logs) this._logs = [];\r\n    this._logs.push(formattedMessage);\r\n    if (this._logs.length > 1000) this._logs.shift();\r\n  }\r\n\r\n  debug(message, data) {\r\n    this._log(LOG_LEVELS.DEBUG, message, data);\r\n  }\r\n\r\n  info(message, data) {\r\n    this._log(LOG_LEVELS.INFO, message, data);\r\n  }\r\n\r\n  warn(message, data) {\r\n    this._log(LOG_LEVELS.WARN, message, data);\r\n  }\r\n\r\n  error(message, error) {\r\n    const errorData = error\r\n      ? {\r\n          message: error.message,\r\n          stack: error.stack,\r\n          code: error.code,\r\n        }\r\n      : null;\r\n\r\n    this._log(LOG_LEVELS.ERROR, message, errorData);\r\n  }\r\n\r\n  // Get recent logs for debugging\r\n  getLogs() {\r\n    return this._logs || [];\r\n  }\r\n\r\n  // Clear logs\r\n  clearLogs() {\r\n    this._logs = [];\r\n  }\r\n\r\n  // Enable/disable logging\r\n  setEnabled(enabled) {\r\n    this.enabled = enabled;\r\n    localStorage.setItem('debug', enabled.toString());\r\n  }\r\n\r\n  // Add custom log level\r\n  addCustomLevel(level, handler) {\r\n    if (LOG_LEVELS[level]) {\r\n      throw new Error(`Log level ${level} already exists`);\r\n    }\r\n\r\n    LOG_LEVELS[level] = level.toLowerCase();\r\n    this[level.toLowerCase()] = (message, data) => {\r\n      const formattedMessage = this._formatMessage(LOG_LEVELS[level], message, data);\r\n      handler(formattedMessage);\r\n      this._logs.push(formattedMessage);\r\n    };\r\n  }\r\n}\r\n\r\nexport const logger = new Logger();\r\nexport default logger;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}