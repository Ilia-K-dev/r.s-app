{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport { auth } from \"../../core/config/firebase\";\nimport logger from \"./logger\";\nvar api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  timeout: 10000\n});\napi.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    var user = auth.currentUser;\n    if (user) {\n      var token = yield user.getIdToken();\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    if (process.env.NODE_ENV === 'development') {\n      logger.info(`API Request: ${config.method.toUpperCase()} ${config.url}`, {\n        params: config.params,\n        data: config.data\n      });\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  if (process.env.NODE_ENV === 'development') {\n    logger.error('API Request Error:', error.message, {\n      config: error.config\n    });\n  }\n  return Promise.reject(error);\n});\napi.interceptors.response.use(function (response) {\n  if (process.env.NODE_ENV === 'development') {\n    logger.info(`API Response: ${response.config.method.toUpperCase()} ${response.config.url} ${response.status}`, {\n      data: response.data\n    });\n  }\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    var _error$response, _error$response2, _error$response2$data;\n    var originalRequest = error.config;\n    if (((_error$response = error.response) == null ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        var user = auth.currentUser;\n        if (user) {\n          var newToken = yield user.getIdToken(true);\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          logger.info(`Token refreshed, retrying original request: ${originalRequest.method.toUpperCase()} ${originalRequest.url}`);\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        logger.error('Token refresh failed:', refreshError);\n      }\n    }\n    var message = ((_error$response2 = error.response) == null ? void 0 : (_error$response2$data = _error$response2.data) == null ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred.';\n    if (process.env.NODE_ENV === 'development') {\n      var _error$response3, _error$response4;\n      logger.error('API Error:', ((_error$response3 = error.response) == null ? void 0 : _error$response3.data) || error.message, {\n        status: (_error$response4 = error.response) == null ? void 0 : _error$response4.status,\n        config: error.config\n      });\n    }\n    var clientError = new Error(message);\n    clientError.originalError = error;\n    return Promise.reject(clientError);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var receiptApi = {\n  uploadReceipt: function () {\n    var _uploadReceipt = _asyncToGenerator(function* (formData) {\n      try {\n        var response = yield api.post('/receipts', formData);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function uploadReceipt(_x3) {\n      return _uploadReceipt.apply(this, arguments);\n    }\n    return uploadReceipt;\n  }(),\n  getReceipts: function () {\n    var _getReceipts = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/receipts', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getReceipts(_x4) {\n      return _getReceipts.apply(this, arguments);\n    }\n    return getReceipts;\n  }(),\n  getReceiptById: function () {\n    var _getReceiptById = _asyncToGenerator(function* (id) {\n      try {\n        var response = yield api.get(`/receipts/${id}`);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getReceiptById(_x5) {\n      return _getReceiptById.apply(this, arguments);\n    }\n    return getReceiptById;\n  }(),\n  createReceipt: function () {\n    var _createReceipt = _asyncToGenerator(function* (receiptData) {\n      var imageFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      try {\n        if (imageFile) {\n          var formData = new FormData();\n          formData.append('image', imageFile);\n          Object.entries(receiptData).forEach(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n            formData.append(key, value);\n          });\n          var response = yield api.post('/receipts', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          return response.data;\n        } else {\n          var _response = yield api.post('/receipts', receiptData);\n          return _response.data;\n        }\n      } catch (error) {\n        throw error;\n      }\n    });\n    function createReceipt(_x6) {\n      return _createReceipt.apply(this, arguments);\n    }\n    return createReceipt;\n  }(),\n  updateReceipt: function () {\n    var _updateReceipt = _asyncToGenerator(function* (id, receiptData) {\n      var imageFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      try {\n        if (imageFile) {\n          var formData = new FormData();\n          formData.append('image', imageFile);\n          Object.entries(receiptData).forEach(function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 2),\n              key = _ref6[0],\n              value = _ref6[1];\n            formData.append(key, value);\n          });\n          var response = yield api.put(`/receipts/${id}`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          return response.data;\n        } else {\n          var _response2 = yield api.put(`/receipts/${id}`, receiptData);\n          return _response2.data;\n        }\n      } catch (error) {\n        throw error;\n      }\n    });\n    function updateReceipt(_x7, _x8) {\n      return _updateReceipt.apply(this, arguments);\n    }\n    return updateReceipt;\n  }(),\n  deleteReceipt: function () {\n    var _deleteReceipt = _asyncToGenerator(function* (id) {\n      try {\n        var response = yield api.delete(`/receipts/${id}`);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function deleteReceipt(_x9) {\n      return _deleteReceipt.apply(this, arguments);\n    }\n    return deleteReceipt;\n  }(),\n  correctReceipt: function () {\n    var _correctReceipt = _asyncToGenerator(function* (id, correctedData) {\n      try {\n        var response = yield api.put(`/receipts/${id}/correct`, correctedData);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function correctReceipt(_x10, _x11) {\n      return _correctReceipt.apply(this, arguments);\n    }\n    return correctReceipt;\n  }()\n};\nexport var categoryApi = {\n  getCategories: function () {\n    var _getCategories = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.get('/categories');\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getCategories() {\n      return _getCategories.apply(this, arguments);\n    }\n    return getCategories;\n  }(),\n  createCategory: function () {\n    var _createCategory = _asyncToGenerator(function* (data) {\n      try {\n        var response = yield api.post('/categories', data);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function createCategory(_x12) {\n      return _createCategory.apply(this, arguments);\n    }\n    return createCategory;\n  }(),\n  updateCategory: function () {\n    var _updateCategory = _asyncToGenerator(function* (id, data) {\n      try {\n        var response = yield api.put(`/categories/${id}`, data);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function updateCategory(_x13, _x14) {\n      return _updateCategory.apply(this, arguments);\n    }\n    return updateCategory;\n  }(),\n  deleteCategory: function () {\n    var _deleteCategory = _asyncToGenerator(function* (id) {\n      try {\n        var response = yield api.delete(`/categories/${id}`);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function deleteCategory(_x15) {\n      return _deleteCategory.apply(this, arguments);\n    }\n    return deleteCategory;\n  }()\n};\nexport var inventoryApi = {\n  getInventory: function () {\n    var _getInventory = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/inventory', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getInventory(_x16) {\n      return _getInventory.apply(this, arguments);\n    }\n    return getInventory;\n  }(),\n  addItem: function () {\n    var _addItem = _asyncToGenerator(function* (itemData) {\n      try {\n        var response = yield api.post('/inventory', itemData);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function addItem(_x17) {\n      return _addItem.apply(this, arguments);\n    }\n    return addItem;\n  }(),\n  updateItem: function () {\n    var _updateItem = _asyncToGenerator(function* (id, updateData) {\n      try {\n        var response = yield api.put(`/inventory/${id}`, updateData);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function updateItem(_x18, _x19) {\n      return _updateItem.apply(this, arguments);\n    }\n    return updateItem;\n  }(),\n  deleteItem: function () {\n    var _deleteItem = _asyncToGenerator(function* (id) {\n      try {\n        var response = yield api.delete(`/inventory/${id}`);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function deleteItem(_x20) {\n      return _deleteItem.apply(this, arguments);\n    }\n    return deleteItem;\n  }(),\n  updateStock: function () {\n    var _updateStock = _asyncToGenerator(function* (id, updateData) {\n      try {\n        var response = yield api.put(`/inventory/${id}/stock`, updateData);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function updateStock(_x21, _x22) {\n      return _updateStock.apply(this, arguments);\n    }\n    return updateStock;\n  }(),\n  getStockMovements: function () {\n    var _getStockMovements = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/inventory/movements', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getStockMovements(_x23) {\n      return _getStockMovements.apply(this, arguments);\n    }\n    return getStockMovements;\n  }(),\n  createStockMovement: function () {\n    var _createStockMovement = _asyncToGenerator(function* (movementData) {\n      try {\n        var response = yield api.post('/inventory/movements', movementData);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function createStockMovement(_x24) {\n      return _createStockMovement.apply(this, arguments);\n    }\n    return createStockMovement;\n  }(),\n  getLowStockAlerts: function () {\n    var _getLowStockAlerts = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.get('/inventory/low-stock');\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getLowStockAlerts() {\n      return _getLowStockAlerts.apply(this, arguments);\n    }\n    return getLowStockAlerts;\n  }()\n};\nexport var analyticsApi = {\n  getSpendingAnalytics: function () {\n    var _getSpendingAnalytics = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/analytics/spending', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getSpendingAnalytics(_x25) {\n      return _getSpendingAnalytics.apply(this, arguments);\n    }\n    return getSpendingAnalytics;\n  }(),\n  getInventoryAnalytics: function () {\n    var _getInventoryAnalytics = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.get('/analytics/inventory');\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getInventoryAnalytics() {\n      return _getInventoryAnalytics.apply(this, arguments);\n    }\n    return getInventoryAnalytics;\n  }(),\n  getBudgetProgress: function () {\n    var _getBudgetProgress = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/analytics/budget', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getBudgetProgress(_x26) {\n      return _getBudgetProgress.apply(this, arguments);\n    }\n    return getBudgetProgress;\n  }(),\n  getPriceAnalytics: function () {\n    var _getPriceAnalytics = _asyncToGenerator(function* (productId, filters) {\n      try {\n        var response = yield api.get(`/analytics/price/${productId}`, {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getPriceAnalytics(_x27, _x28) {\n      return _getPriceAnalytics.apply(this, arguments);\n    }\n    return getPriceAnalytics;\n  }(),\n  getVendorAnalysis: function () {\n    var _getVendorAnalysis = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/analytics/vendors', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getVendorAnalysis(_x29) {\n      return _getVendorAnalysis.apply(this, arguments);\n    }\n    return getVendorAnalysis;\n  }(),\n  getCategoryAnalysis: function () {\n    var _getCategoryAnalysis = _asyncToGenerator(function* (categoryId, filters) {\n      try {\n        var response = yield api.get(`/analytics/categories/${categoryId}`, {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getCategoryAnalysis(_x30, _x31) {\n      return _getCategoryAnalysis.apply(this, arguments);\n    }\n    return getCategoryAnalysis;\n  }(),\n  getDashboardAnalytics: function () {\n    var _getDashboardAnalytics = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/analytics/dashboard', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getDashboardAnalytics(_x32) {\n      return _getDashboardAnalytics.apply(this, arguments);\n    }\n    return getDashboardAnalytics;\n  }(),\n  getPriceComparisonReport: function () {\n    var _getPriceComparisonReport = _asyncToGenerator(function* (filters) {\n      try {\n        var response = yield api.get('/analytics/reports/price-comparison', {\n          params: filters\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function getPriceComparisonReport(_x33) {\n      return _getPriceComparisonReport.apply(this, arguments);\n    }\n    return getPriceComparisonReport;\n  }()\n};\nexport var exportApi = {\n  generateExport: function () {\n    var _generateExport = _asyncToGenerator(function* (exportOptions) {\n      try {\n        var response = yield api.post('/exports', exportOptions);\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function generateExport(_x34) {\n      return _generateExport.apply(this, arguments);\n    }\n    return generateExport;\n  }(),\n  downloadExport: function () {\n    var _downloadExport = _asyncToGenerator(function* (exportId) {\n      try {\n        var response = yield api.get(`/exports/${exportId}`, {\n          responseType: 'blob'\n        });\n        return response.data;\n      } catch (error) {\n        throw error;\n      }\n    });\n    function downloadExport(_x35) {\n      return _downloadExport.apply(this, arguments);\n    }\n    return downloadExport;\n  }()\n};\nexport default api;","map":{"version":3,"names":["axios","auth","logger","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","interceptors","request","use","_ref","_asyncToGenerator","config","user","currentUser","token","getIdToken","headers","Authorization","NODE_ENV","info","method","toUpperCase","url","params","data","_x","apply","arguments","error","message","Promise","reject","response","status","_ref2","_error$response","_error$response2","_error$response2$data","originalRequest","_retry","newToken","refreshError","_error$response3","_error$response4","clientError","Error","originalError","_x2","receiptApi","uploadReceipt","_uploadReceipt","formData","post","_x3","getReceipts","_getReceipts","filters","get","_x4","getReceiptById","_getReceiptById","id","_x5","createReceipt","_createReceipt","receiptData","imageFile","length","undefined","FormData","append","Object","entries","forEach","_ref3","_ref4","_slicedToArray","key","value","_x6","updateReceipt","_updateReceipt","_ref5","_ref6","put","_x7","_x8","deleteReceipt","_deleteReceipt","delete","_x9","correctReceipt","_correctReceipt","correctedData","_x10","_x11","categoryApi","getCategories","_getCategories","createCategory","_createCategory","_x12","updateCategory","_updateCategory","_x13","_x14","deleteCategory","_deleteCategory","_x15","inventoryApi","getInventory","_getInventory","_x16","addItem","_addItem","itemData","_x17","updateItem","_updateItem","updateData","_x18","_x19","deleteItem","_deleteItem","_x20","updateStock","_updateStock","_x21","_x22","getStockMovements","_getStockMovements","_x23","createStockMovement","_createStockMovement","movementData","_x24","getLowStockAlerts","_getLowStockAlerts","analyticsApi","getSpendingAnalytics","_getSpendingAnalytics","_x25","getInventoryAnalytics","_getInventoryAnalytics","getBudgetProgress","_getBudgetProgress","_x26","getPriceAnalytics","_getPriceAnalytics","productId","_x27","_x28","getVendorAnalysis","_getVendorAnalysis","_x29","getCategoryAnalysis","_getCategoryAnalysis","categoryId","_x30","_x31","getDashboardAnalytics","_getDashboardAnalytics","_x32","getPriceComparisonReport","_getPriceComparisonReport","_x33","exportApi","generateExport","_generateExport","exportOptions","_x34","downloadExport","_downloadExport","exportId","responseType","_x35"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport { auth } from '../../core/config/firebase';\r\nimport logger from './logger';\r\n\r\n/**\r\n * @desc Centralized Axios instance for making API calls to the backend.\r\n * Configured with a base URL and default timeout.\r\n */\r\nconst api = axios.create({\r\n  // Fix the baseURL to remove any duplication of 'api'\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\r\n  timeout: 10000, // Set a default timeout of 10 seconds\r\n});\r\n\r\n/**\r\n * @desc Axios request interceptor to automatically attach the Firebase Auth token to outgoing requests.\r\n */\r\napi.interceptors.request.use(async config => {\r\n  const user = auth.currentUser;\r\n  if (user) {\r\n    const token = await user.getIdToken();\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  // Log request in development\r\n  if (process.env.NODE_ENV === 'development') {\r\n      logger.info(`API Request: ${config.method.toUpperCase()} ${config.url}`, { params: config.params, data: config.data });\r\n  }\r\n  return config;\r\n}, error => {\r\n  if (process.env.NODE_ENV === 'development') {\r\n    logger.error('API Request Error:', error.message, { config: error.config });\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\n/**\r\n * @desc Axios response interceptor for standardized error handling and token refresh.\r\n * Extracts user-friendly messages, logs errors, and retries requests on 401 errors after token refresh.\r\n */\r\napi.interceptors.response.use(\r\n  response => {\r\n    // Log successful response in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n        logger.info(`API Response: ${response.config.method.toUpperCase()} ${response.config.url} ${response.status}`, { data: response.data });\r\n    }\r\n    return response;\r\n  },\r\n  async error => { // Make the error handler async\r\n    const originalRequest = error.config;\r\n\r\n    // Check for 401 Unauthorized response and if it's not a retry attempt\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true; // Mark as retry attempt\r\n\r\n      try {\r\n        // Attempt to refresh the token\r\n        const user = auth.currentUser;\r\n        if (user) {\r\n          const newToken = await user.getIdToken(true); // Force token refresh\r\n          // Update the Authorization header for the original request\r\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n          // Retry the original request with the new token\r\n          logger.info(`Token refreshed, retrying original request: ${originalRequest.method.toUpperCase()} ${originalRequest.url}`);\r\n          return api(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // If token refresh fails, log out the user or handle appropriately\r\n        logger.error('Token refresh failed:', refreshError);\r\n        // Optionally dispatch a logout action here\r\n        // store.dispatch(logoutUser());\r\n      }\r\n    }\r\n\r\n    // Extract user-friendly message from server response (existing logic)\r\n    const message = error.response?.data?.message || error.message || 'An unexpected error occurred.';\r\n    // Log the full error for debugging (existing logic)\r\n    if (process.env.NODE_ENV === 'development') {\r\n        logger.error('API Error:', error.response?.data || error.message, { status: error.response?.status, config: error.config });\r\n    }\r\n    // Create a new Error object with the user-friendly message (existing logic)\r\n    const clientError = new Error(message);\r\n    // Optionally attach original error details for further handling in hooks/components (existing logic)\r\n    clientError.originalError = error;\r\n\r\n    return Promise.reject(clientError);\r\n  }\r\n);\r\n\r\n\r\n/**\r\n * @desc API service methods specifically for Receipt operations.\r\n */\r\nexport const receiptApi = {\r\n  /**\r\n   * @desc Uploads a receipt document via the backend API.\r\n   * @param {FormData} formData - FormData containing the document file and type.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  uploadReceipt: async formData => {\r\n    try {\r\n      const response = await api.post('/receipts', formData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error; // Rethrow the error caught by the interceptor\r\n    }\r\n  },\r\n  /**\r\n   * @desc Fetches receipts with filtering and pagination via the backend API.\r\n   * @param {object} [filters] - Filters and pagination options.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getReceipts: async filters => {\r\n    try {\r\n      const response = await api.get('/receipts', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error; // Rethrow the error caught by the interceptor\r\n    }\r\n  },\r\n  /**\r\n   * @desc Fetches a single receipt by ID via the backend API.\r\n   * @param {string} id - The ID of the receipt.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getReceiptById: async id => {\r\n    try {\r\n      const response = await api.get(`/receipts/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error; // Rethrow the error caught by the interceptor\r\n    }\r\n  },\r\n  // Add other receipt-related API methods here (create, update, delete, correct)\r\n  /**\r\n   * @desc Creates a new receipt via the backend API.\r\n   * @param {object} receiptData - The data for the new receipt.\r\n   * @param {File} [imageFile=null] - Optional image file to upload with the receipt.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  createReceipt: async (receiptData, imageFile = null) => {\r\n    try {\r\n      // Handle file upload if provided\r\n      if (imageFile) {\r\n        const formData = new FormData();\r\n        formData.append('image', imageFile);\r\n        Object.entries(receiptData).forEach(([key, value]) => {\r\n          formData.append(key, value);\r\n        });\r\n        const response = await api.post('/receipts', formData, {\r\n          headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n        return response.data;\r\n      } else {\r\n        const response = await api.post('/receipts', receiptData);\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Updates an existing receipt via the backend API.\r\n   * @param {string} id - The ID of the receipt to update.\r\n   * @param {object} receiptData - The updated data for the receipt.\r\n   * @param {File} [imageFile=null] - Optional new image file to upload.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  updateReceipt: async (id, receiptData, imageFile = null) => {\r\n    try {\r\n      // Handle file upload if provided\r\n      if (imageFile) {\r\n        const formData = new FormData();\r\n        formData.append('image', imageFile);\r\n        Object.entries(receiptData).forEach(([key, value]) => {\r\n          formData.append(key, value);\r\n        });\r\n        const response = await api.put(`/receipts/${id}`, formData, {\r\n          headers: { 'Content-Type': 'multipart/form-data' }\r\n        });\r\n        return response.data;\r\n      } else {\r\n        const response = await api.put(`/receipts/${id}`, receiptData);\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Deletes a receipt via the backend API.\r\n   * @param {string} id - The ID of the receipt to delete.\r\n   * @returns {Promise<void>} - A promise that resolves when the deletion is complete.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  deleteReceipt: async id => {\r\n    try {\r\n      const response = await api.delete(`/receipts/${id}`);\r\n      return response.data; // Or response.status if backend returns 204\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Submits corrected receipt data via the backend API.\r\n   * @param {string} id - The ID of the receipt to correct.\r\n   * @param {object} correctedData - The corrected data.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  correctReceipt: async (id, correctedData) => {\r\n    try {\r\n      const response = await api.put(`/receipts/${id}/correct`, correctedData); // Assuming /correct endpoint\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * @desc API service methods specifically for Category operations.\r\n */\r\nexport const categoryApi = {\r\n  /**\r\n   * @desc Fetches categories via the backend API.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/categories');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error; // Rethrow the error caught by the interceptor\r\n    }\r\n  },\r\n  /**\r\n   * @desc Creates a new category via the backend API.\r\n   * @param {object} data - The data for the new category.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  createCategory: async data => {\r\n    try {\r\n      const response = await api.post('/categories', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error; // Rethrow the error caught by the interceptor\r\n    }\r\n  },\r\n  // Add other category-related API methods here (update, delete)\r\n   /**\r\n   * @desc Updates an existing category via the backend API.\r\n   * @param {string} id - The ID of the category to update.\r\n   * @param {object} data - The updated data for the category.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  updateCategory: async (id, data) => {\r\n    try {\r\n      const response = await api.put(`/categories/${id}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Deletes a category via the backend API.\r\n   * @param {string} id - The ID of the category to delete.\r\n   * @returns {Promise<void>} - A promise that resolves when the deletion is complete.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  deleteCategory: async id => {\r\n    try {\r\n      const response = await api.delete(`/categories/${id}`);\r\n      return response.data; // Or response.status if backend returns 204\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * @desc API service methods specifically for Inventory operations.\r\n */\r\nexport const inventoryApi = {\r\n  /**\r\n   * @desc Fetches inventory items with filtering and pagination via the backend API.\r\n   * @param {object} [filters] - Filters and pagination options.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getInventory: async filters => {\r\n    try {\r\n      const response = await api.get('/inventory', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Adds a new inventory item via the backend API.\r\n   * @param {object} itemData - The data for the new item.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  addItem: async itemData => {\r\n    try {\r\n      const response = await api.post('/inventory', itemData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Updates an existing inventory item via the backend API.\r\n   * @param {string} id - The ID of the item to update.\r\n   * @param {object} updateData - The data to update the item with.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  updateItem: async (id, updateData) => {\r\n    try {\r\n      const response = await api.put(`/inventory/${id}`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Deletes an inventory item via the backend API.\r\n   * @param {string} id - The ID of the item to delete.\r\n   * @returns {Promise<void>} - A promise that resolves when the deletion is complete.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  deleteItem: async id => {\r\n    try {\r\n      const response = await api.delete(`/inventory/${id}`);\r\n      return response.data; // Or response.status if backend returns 204\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Updates the stock level for an inventory item via the backend API.\r\n   * @param {string} id - The ID of the item to update stock for.\r\n   * @param {object} updateData - The stock update data (e.g., { quantity: 10, type: 'purchase' }).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  updateStock: async (id, updateData) => {\r\n    try {\r\n      const response = await api.put(`/inventory/${id}/stock`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Fetches stock movement history for a user via the backend API.\r\n   * @param {object} [filters] - Filters for stock movements.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getStockMovements: async filters => {\r\n    try {\r\n      const response = await api.get('/inventory/movements', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Creates a new stock movement record via the backend API.\r\n   * @param {object} movementData - The data for the new stock movement.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  createStockMovement: async movementData => {\r\n    try {\r\n      const response = await api.post('/inventory/movements', movementData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Fetches low stock alerts for a user via the backend API.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getLowStockAlerts: async () => {\r\n    try {\r\n      const response = await api.get('/inventory/low-stock');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * @desc API service methods specifically for Analytics operations.\r\n */\r\nexport const analyticsApi = {\r\n  /**\r\n   * @desc Fetches spending analytics data via the backend API.\r\n   * @param {object} [filters] - Filters for spending analysis (startDate, endDate, groupBy).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getSpendingAnalytics: async filters => {\r\n    try {\r\n      const response = await api.get('/analytics/spending', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Fetches inventory analytics data via the backend API.\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getInventoryAnalytics: async () => {\r\n    try {\r\n      const response = await api.get('/analytics/inventory');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Fetches budget progress data via the backend API.\r\n   * @param {object} [filters] - Filters for budget progress (period, categoryId).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getBudgetProgress: async filters => {\r\n    try {\r\n      const response = await api.get('/analytics/budget', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  // Add other analytics-related API methods here (price, vendor, category, dashboard, reports)\r\n   /**\r\n   * @desc Fetches price analytics for a product via the backend API.\r\n   * @param {string} productId - The ID of the product.\r\n   * @param {object} [filters] - Filters for price history (startDate, endDate).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getPriceAnalytics: async (productId, filters) => {\r\n    try {\r\n      const response = await api.get(`/analytics/price/${productId}`, { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Fetches vendor analysis data via the backend API.\r\n   * @param {object} [filters] - Filters for vendor analysis (vendorIds, productIds).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getVendorAnalysis: async filters => {\r\n    try {\r\n      const response = await api.get('/analytics/vendors', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Fetches category analysis data via the backend API.\r\n   * @param {string} categoryId - The ID of the category.\r\n   * @param {object} [filters] - Filters for category analysis (startDate, endDate).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getCategoryAnalysis: async (categoryId, filters) => {\r\n    try {\r\n      const response = await api.get(`/analytics/categories/${categoryId}`, { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Fetches dashboard analytics data via the backend API.\r\n   * @param {object} [filters] - Filters for dashboard analytics (period).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getDashboardAnalytics: async filters => {\r\n    try {\r\n      const response = await api.get('/analytics/dashboard', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n   /**\r\n   * @desc Fetches a price comparison report via the backend API.\r\n   * @param {object} [filters] - Filters for the report (productIds, timeframe).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  getPriceComparisonReport: async filters => {\r\n    try {\r\n      const response = await api.get('/analytics/reports/price-comparison', { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n/**\r\n * @desc API service methods specifically for Export operations.\r\n */\r\nexport const exportApi = {\r\n  /**\r\n   * @desc Initiates the generation of a data export file via the backend API.\r\n   * @param {object} exportOptions - Options for the export (reportType, format, filters).\r\n   * @returns {Promise<object>} - A promise that resolves with the API response data (including exportId and downloadUrl).\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  generateExport: async exportOptions => {\r\n    try {\r\n      const response = await api.post('/exports', exportOptions);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /**\r\n   * @desc Downloads a previously generated export file via the backend API.\r\n   * @param {string} exportId - The ID of the export record.\r\n   * @returns {Promise<object>} - A promise that resolves with the file data (Blob).\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  downloadExport: async exportId => {\r\n    try {\r\n      // Assuming the backend returns the file data directly\r\n      const response = await api.get(`/exports/${exportId}`, { responseType: 'blob' }); // Request as Blob\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}