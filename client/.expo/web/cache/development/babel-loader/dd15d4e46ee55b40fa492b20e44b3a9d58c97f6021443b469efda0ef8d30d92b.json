{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { logger } from \"../utils/logger\";\nexport var useLocalStorage = function useLocalStorage(key, initialValue) {\n  var _useState = useState(function () {\n      try {\n        var item = window.localStorage.getItem(key);\n        if (item) {\n          return JSON.parse(item);\n        }\n        return initialValue instanceof Function ? initialValue() : initialValue;\n      } catch (error) {\n        logger.error(`Error reading localStorage key \"${key}\":`, error);\n        return initialValue;\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    storedValue = _useState2[0],\n    setStoredValue = _useState2[1];\n  useEffect(function () {\n    var handleStorageChange = function handleStorageChange(e) {\n      if (e.key === key) {\n        try {\n          if (e.newValue === null) {\n            setStoredValue(initialValue);\n            return;\n          }\n          var newValue = JSON.parse(e.newValue);\n          if (storedValue !== newValue) {\n            setStoredValue(newValue);\n          }\n        } catch (error) {\n          logger.error(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return function () {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key, storedValue, initialValue]);\n  var setValue = function setValue(value) {\n    try {\n      var valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      logger.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n  var removeValue = function removeValue() {\n    try {\n      setStoredValue(initialValue);\n      window.localStorage.removeItem(key);\n    } catch (error) {\n      logger.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  };\n  return [storedValue, setValue, removeValue];\n};\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","logger","useLocalStorage","key","initialValue","_useState","item","window","localStorage","getItem","JSON","parse","Function","error","_useState2","_slicedToArray","storedValue","setStoredValue","handleStorageChange","e","newValue","addEventListener","removeEventListener","setValue","value","valueToStore","setItem","stringify","removeValue","removeItem"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react'; //correct\n\r\nimport { logger } from '../utils/logger'; //correct\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n\r\n      if (item) {\r\n        // Parse stored json or if none return initialValue\r\n        return JSON.parse(item);\r\n      }\r\n\r\n      // Return initial state if no stored value\r\n      return initialValue instanceof Function ? initialValue() : initialValue;\r\n    } catch (error) {\r\n      logger.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Listen for changes in other tabs/windows\r\n  useEffect(() => {\r\n    const handleStorageChange = e => {\r\n      if (e.key === key) {\r\n        try {\r\n          // If value was removed\r\n          if (e.newValue === null) {\r\n            setStoredValue(initialValue);\r\n            return;\r\n          }\r\n\r\n          // Parse and set new value\r\n          const newValue = JSON.parse(e.newValue);\r\n          if (storedValue !== newValue) {\r\n            setStoredValue(newValue);\r\n          }\r\n        } catch (error) {\r\n          logger.error(`Error parsing localStorage value for key \"${key}\":`, error);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Add event listener\r\n    window.addEventListener('storage', handleStorageChange);\r\n\r\n    // Remove event listener on cleanup\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, [key, storedValue, initialValue]);\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      logger.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  // Function to remove item from localStorage\r\n  const removeValue = () => {\r\n    try {\r\n      setStoredValue(initialValue);\r\n      window.localStorage.removeItem(key);\r\n    } catch (error) {\r\n      logger.error(`Error removing localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue, removeValue];\r\n};\r\n\r\nexport default useLocalStorage;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,MAAM;AAEf,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,GAAG,EAAEC,YAAY,EAAK;EAGpD,IAAAC,SAAA,GAAsCN,QAAQ,CAAC,YAAM;MACnD,IAAI;QAEF,IAAMO,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC;QAE7C,IAAIG,IAAI,EAAE;UAER,OAAOI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;QACzB;QAGA,OAAOF,YAAY,YAAYQ,QAAQ,GAAGR,YAAY,CAAC,CAAC,GAAGA,YAAY;MACzE,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdZ,MAAM,CAACY,KAAK,CAAC,mCAAmCV,GAAG,IAAI,EAAEU,KAAK,CAAC;QAC/D,OAAOT,YAAY;MACrB;IACF,CAAC,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAV,SAAA;IAhBKW,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAmBlCd,SAAS,CAAC,YAAM;IACd,IAAMkB,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAGC,CAAC,EAAI;MAC/B,IAAIA,CAAC,CAAChB,GAAG,KAAKA,GAAG,EAAE;QACjB,IAAI;UAEF,IAAIgB,CAAC,CAACC,QAAQ,KAAK,IAAI,EAAE;YACvBH,cAAc,CAACb,YAAY,CAAC;YAC5B;UACF;UAGA,IAAMgB,QAAQ,GAAGV,IAAI,CAACC,KAAK,CAACQ,CAAC,CAACC,QAAQ,CAAC;UACvC,IAAIJ,WAAW,KAAKI,QAAQ,EAAE;YAC5BH,cAAc,CAACG,QAAQ,CAAC;UAC1B;QACF,CAAC,CAAC,OAAOP,KAAK,EAAE;UACdZ,MAAM,CAACY,KAAK,CAAC,6CAA6CV,GAAG,IAAI,EAAEU,KAAK,CAAC;QAC3E;MACF;IACF,CAAC;IAGDN,MAAM,CAACc,gBAAgB,CAAC,SAAS,EAAEH,mBAAmB,CAAC;IAGvD,OAAO,YAAM;MACXX,MAAM,CAACe,mBAAmB,CAAC,SAAS,EAAEJ,mBAAmB,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,CAACf,GAAG,EAAEa,WAAW,EAAEZ,YAAY,CAAC,CAAC;EAIpC,IAAMmB,QAAQ,GAAG,SAAXA,QAAQA,CAAGC,KAAK,EAAI;IACxB,IAAI;MAEF,IAAMC,YAAY,GAAGD,KAAK,YAAYZ,QAAQ,GAAGY,KAAK,CAACR,WAAW,CAAC,GAAGQ,KAAK;MAG3EP,cAAc,CAACQ,YAAY,CAAC;MAG5BlB,MAAM,CAACC,YAAY,CAACkB,OAAO,CAACvB,GAAG,EAAEO,IAAI,CAACiB,SAAS,CAACF,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdZ,MAAM,CAACY,KAAK,CAAC,mCAAmCV,GAAG,IAAI,EAAEU,KAAK,CAAC;IACjE;EACF,CAAC;EAGD,IAAMe,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB,IAAI;MACFX,cAAc,CAACb,YAAY,CAAC;MAC5BG,MAAM,CAACC,YAAY,CAACqB,UAAU,CAAC1B,GAAG,CAAC;IACrC,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdZ,MAAM,CAACY,KAAK,CAAC,oCAAoCV,GAAG,IAAI,EAAEU,KAAK,CAAC;IAClE;EACF,CAAC;EAED,OAAO,CAACG,WAAW,EAAEO,QAAQ,EAAEK,WAAW,CAAC;AAC7C,CAAC;AAED,eAAe1B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}