{"ast":null,"code":"export var classifyDocument = function classifyDocument(text) {\n  if (!text || text.trim() === '') {\n    return {\n      classification: 'generic',\n      confidence: 0.1\n    };\n  }\n  var lowerText = text.toLowerCase();\n  var classification = 'generic';\n  var confidence = 0.5;\n  if (lowerText.includes('receipt') || lowerText.includes('total') || lowerText.includes('cashier') || lowerText.includes('thank you')) {\n    classification = 'receipt';\n    confidence += 0.2;\n  }\n  if (lowerText.includes('invoice') || lowerText.includes('bill to') || lowerText.includes('ship to') || lowerText.includes('due date')) {\n    classification = 'invoice';\n    confidence += 0.2;\n  }\n  if (classification === 'receipt' && lowerText.includes('invoice')) {}\n  confidence = Math.min(1, Math.max(0, confidence));\n  return {\n    classification: classification,\n    confidence: confidence\n  };\n};","map":{"version":3,"names":["classifyDocument","text","trim","classification","confidence","lowerText","toLowerCase","includes","Math","min","max"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/utils/documentClassifier.js"],"sourcesContent":["// client/src/features/documents/utils/documentClassifier.js\r\n\r\n/**\r\n * Classifies a document based on its extracted text content.\r\n * @param {string} text - The extracted text from the document.\r\n * @returns {{classification: 'receipt' | 'invoice' | 'generic', confidence: number}} - The classified document type and a confidence score.\r\n */\r\nexport const classifyDocument = (text) => {\r\n  if (!text || text.trim() === '') {\r\n    return { classification: 'generic', confidence: 0.1 }; // Low confidence for empty text\r\n  }\r\n\r\n  const lowerText = text.toLowerCase();\r\n\r\n  // Simple pattern matching for classification\r\n  let classification = 'generic';\r\n  let confidence = 0.5; // Default confidence for generic\r\n\r\n  // Receipt patterns\r\n  if (lowerText.includes('receipt') || lowerText.includes('total') || lowerText.includes('cashier') || lowerText.includes('thank you')) {\r\n    classification = 'receipt';\r\n    confidence += 0.2; // Increase confidence\r\n  }\r\n\r\n  // Invoice patterns\r\n  if (lowerText.includes('invoice') || lowerText.includes('bill to') || lowerText.includes('ship to') || lowerText.includes('due date')) {\r\n    classification = 'invoice';\r\n    confidence += 0.2; // Increase confidence\r\n  }\r\n\r\n  // If patterns for both receipt and invoice are present, refine or keep generic\r\n  if (classification === 'receipt' && lowerText.includes('invoice')) {\r\n      // More sophisticated logic might be needed here to differentiate\r\n      // For now, if both are present, maybe lean towards generic or the one with more specific keywords\r\n      // Let's keep the first match for simplicity in this basic version\r\n  }\r\n\r\n\r\n  // Ensure confidence is within a reasonable range (0 to 1)\r\n  confidence = Math.min(1, Math.max(0, confidence));\r\n\r\n  // Adjust confidence based on text length or other factors if needed\r\n  // e.g., very short text might have lower confidence regardless of keywords\r\n\r\n  return { classification, confidence };\r\n};\r\n\r\n// Add comments about classification algorithm and accuracy considerations\r\n// Classification algorithm: This is a basic keyword-based pattern matching algorithm. It checks for the presence of specific terms commonly found in receipts and invoices to determine the document type.\r\n// Accuracy considerations: This simple algorithm is prone to errors and has limited accuracy. It can be easily fooled by documents containing keywords from multiple types or by variations in language and formatting.\r\n// To improve accuracy, future iterations could consider:\r\n// - Using more sophisticated text analysis techniques (e.g., natural language processing libraries).\r\n// - Training a machine learning model on a dataset of labeled documents.\r\n// - Analyzing document structure and layout in addition to text content.\r\n// - Using a larger and more diverse set of keywords and phrases.\r\n// - Implementing fuzzy matching for keywords to handle typos or variations.\r\n"],"mappings":"AAOA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,IAAI,EAAK;EACxC,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAC/B,OAAO;MAAEC,cAAc,EAAE,SAAS;MAAEC,UAAU,EAAE;IAAI,CAAC;EACvD;EAEA,IAAMC,SAAS,GAAGJ,IAAI,CAACK,WAAW,CAAC,CAAC;EAGpC,IAAIH,cAAc,GAAG,SAAS;EAC9B,IAAIC,UAAU,GAAG,GAAG;EAGpB,IAAIC,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,OAAO,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;IACpIJ,cAAc,GAAG,SAAS;IAC1BC,UAAU,IAAI,GAAG;EACnB;EAGA,IAAIC,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;IACrIJ,cAAc,GAAG,SAAS;IAC1BC,UAAU,IAAI,GAAG;EACnB;EAGA,IAAID,cAAc,KAAK,SAAS,IAAIE,SAAS,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE,CAInE;EAIAH,UAAU,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEN,UAAU,CAAC,CAAC;EAKjD,OAAO;IAAED,cAAc,EAAdA,cAAc;IAAEC,UAAU,EAAVA;EAAW,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}