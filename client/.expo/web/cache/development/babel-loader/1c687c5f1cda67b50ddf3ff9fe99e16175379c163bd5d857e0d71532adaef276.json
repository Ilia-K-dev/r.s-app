{"ast":null,"code":"import { logger } from \"./logger\";\nexport var formatFileSize = function formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  var k = 1024;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\nexport var validateFileType = function validateFileType(file, allowedTypes) {\n  if (!file || !allowedTypes) return false;\n  return allowedTypes.includes(file.type);\n};\nexport var getFileExtension = function getFileExtension(filename) {\n  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);\n};\nexport var createFilePreview = function createFilePreview(file) {\n  try {\n    return URL.createObjectURL(file);\n  } catch (error) {\n    logger.error('Error creating file preview:', error);\n    return null;\n  }\n};\nexport var revokeFilePreview = function revokeFilePreview(previewUrl) {\n  if (previewUrl) {\n    URL.revokeObjectURL(previewUrl);\n  }\n};\nexport var validateFileSize = function validateFileSize(file, maxSize) {\n  return file.size <= maxSize;\n};\nexport var validateFile = function validateFile(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$maxSize = options.maxSize,\n    maxSize = _options$maxSize === void 0 ? 5 * 1024 * 1024 : _options$maxSize,\n    _options$acceptedType = options.acceptedTypes,\n    acceptedTypes = _options$acceptedType === void 0 ? ['image/jpeg', 'image/png', 'image/heic'] : _options$acceptedType,\n    _options$minDimension = options.minDimensions,\n    minDimensions = _options$minDimension === void 0 ? {\n      width: 500,\n      height: 500\n    } : _options$minDimension,\n    _options$maxDimension = options.maxDimensions,\n    maxDimensions = _options$maxDimension === void 0 ? {\n      width: 5000,\n      height: 5000\n    } : _options$maxDimension;\n  var errors = [];\n  if (!file) {\n    errors.push('No file provided');\n    return {\n      isValid: false,\n      errors: errors\n    };\n  }\n  if (!validateFileSize(file, maxSize)) {\n    errors.push(`File size must not exceed ${formatFileSize(maxSize)}`);\n  }\n  if (!validateFileType(file, acceptedTypes)) {\n    errors.push(`File type must be one of: ${acceptedTypes.join(', ')}`);\n  }\n  return {\n    isValid: errors.length === 0,\n    errors: errors\n  };\n};\nexport var readFileAsDataUrl = function readFileAsDataUrl(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n    reader.onerror = function () {\n      return reject(reader.error);\n    };\n    reader.readAsDataURL(file);\n  });\n};","map":{"version":3,"names":["logger","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","validateFileType","file","allowedTypes","includes","type","getFileExtension","filename","slice","lastIndexOf","createFilePreview","URL","createObjectURL","error","revokeFilePreview","previewUrl","revokeObjectURL","validateFileSize","maxSize","size","validateFile","options","arguments","length","undefined","_options$maxSize","_options$acceptedType","acceptedTypes","_options$minDimension","minDimensions","width","height","_options$maxDimension","maxDimensions","errors","push","isValid","join","readFileAsDataUrl","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/fileHelpers.js"],"sourcesContent":["// src/shared/utils/fileHelpers.js\r\n\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * Formats file size into human-readable format\r\n */\r\nexport const formatFileSize = bytes => {\r\n  if (bytes === 0) return '0 Bytes';\r\n\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\r\n};\r\n\r\n/**\r\n * Validates file type against allowed types\r\n */\r\nexport const validateFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Gets file extension from filename\r\n */\r\nexport const getFileExtension = filename => filename.slice(((filename.lastIndexOf('.') - 1) >>> 0) + 2);\r\n\r\n/**\r\n * Creates an object URL for file preview\r\n */\r\nexport const createFilePreview = file => {\r\n  try {\r\n    return URL.createObjectURL(file);\r\n  } catch (error) {\r\n    logger.error('Error creating file preview:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Revokes an object URL to prevent memory leaks\r\n */\r\nexport const revokeFilePreview = previewUrl => {\r\n  if (previewUrl) {\r\n    URL.revokeObjectURL(previewUrl);\r\n  }\r\n};\r\n\r\n/**\r\n * Validates file size against maximum allowed size\r\n */\r\nexport const validateFileSize = (file, maxSize) => file.size <= maxSize;\r\n\r\n/**\r\n * Comprehensive file validation\r\n */\r\nexport const validateFile = (file, options = {}) => {\r\n  const {\r\n    maxSize = 5 * 1024 * 1024, // Default 5MB\r\n    acceptedTypes = ['image/jpeg', 'image/png', 'image/heic'],\r\n    minDimensions = { width: 500, height: 500 },\r\n    maxDimensions = { width: 5000, height: 5000 },\r\n  } = options;\r\n\r\n  const errors = [];\r\n\r\n  // Check file presence\r\n  if (!file) {\r\n    errors.push('No file provided');\r\n    return { isValid: false, errors };\r\n  }\r\n\r\n  // Check file size\r\n  if (!validateFileSize(file, maxSize)) {\r\n    errors.push(`File size must not exceed ${formatFileSize(maxSize)}`);\r\n  }\r\n\r\n  // Check file type\r\n  if (!validateFileType(file, acceptedTypes)) {\r\n    errors.push(`File type must be one of: ${acceptedTypes.join(', ')}`);\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n};\r\n\r\n/**\r\n * Reads file as Data URL\r\n */\r\nexport const readFileAsDataUrl = file => new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = () => reject(reader.error);\r\n    reader.readAsDataURL(file);\r\n  });\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}