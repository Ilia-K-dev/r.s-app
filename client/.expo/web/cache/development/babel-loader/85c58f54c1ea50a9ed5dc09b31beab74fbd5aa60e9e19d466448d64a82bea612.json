{"ast":null,"code":"import { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nvar requiredEnvKeys = ['REACT_APP_FIREBASE_API_KEY', 'REACT_APP_FIREBASE_AUTH_DOMAIN', 'REACT_APP_FIREBASE_PROJECT_ID', 'REACT_APP_FIREBASE_STORAGE_BUCKET', 'REACT_APP_FIREBASE_MESSAGING_SENDER_ID', 'REACT_APP_FIREBASE_APP_ID'];\nvar validateEnvVariables = function validateEnvVariables() {\n  console.log(\"Validating Firebase environment variables...\");\n  var missingKeys = requiredEnvKeys.filter(function (key) {\n    return !process.env[key] || process.env[key].trim() === '';\n  });\n  if (missingKeys.length > 0) {\n    var errorMsg = `CRITICAL ERROR: Missing or empty Firebase environment variables: ${missingKeys.join(', ')}. Check your .env file and ensure all required REACT_APP_FIREBASE_... variables are set correctly and the development server was restarted.`;\n    console.error(errorMsg);\n    if (process.env.NODE_ENV === 'development') {\n      console.log(\"Available process.env keys:\", Object.keys(process.env).filter(function (k) {\n        return k.startsWith(\"REACT_APP_\");\n      }));\n    }\n    throw new Error(errorMsg);\n  }\n  console.log(\"Firebase environment variables validated successfully.\");\n};\nvalidateEnvVariables();\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\nif (process.env.NODE_ENV === 'development') {\n  console.log('Firebase Config Object:', firebaseConfig);\n}\nvar app;\nvar auth;\nvar db;\nvar storage;\ntry {\n  if (!getApps().length) {\n    console.log(\"Initializing Firebase app...\");\n    app = initializeApp(firebaseConfig);\n    console.log(\"Firebase app initialized.\");\n  } else {\n    console.log(\"Firebase app already initialized.\");\n    app = getApps()[0];\n  }\n  auth = getAuth(app);\n  db = getFirestore(app);\n  storage = getStorage(app);\n  console.log(\"Firebase services (Auth, Firestore, Storage) initialized.\");\n} catch (error) {\n  console.error('Firebase service initialization failed:', error);\n  throw error;\n}\nexport { auth, db, storage, app };\nexport default app;","map":{"version":3,"names":["initializeApp","getApps","getAuth","getFirestore","getStorage","requiredEnvKeys","validateEnvVariables","console","log","missingKeys","filter","key","process","env","trim","length","errorMsg","join","error","NODE_ENV","Object","keys","k","startsWith","Error","firebaseConfig","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","db","storage"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/config/firebase.js"],"sourcesContent":["import { initializeApp, getApps } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\n\r\n// Define required environment variable keys\r\nconst requiredEnvKeys = [\r\n  'REACT_APP_FIREBASE_API_KEY',\r\n  'REACT_APP_FIREBASE_AUTH_DOMAIN',\r\n  'REACT_APP_FIREBASE_PROJECT_ID',\r\n  'REACT_APP_FIREBASE_STORAGE_BUCKET',\r\n  'REACT_APP_FIREBASE_MESSAGING_SENDER_ID',\r\n  'REACT_APP_FIREBASE_APP_ID'\r\n];\r\n\r\n// Validate environment variables before creating the config object\r\nconst validateEnvVariables = () => {\r\n  console.log(\"Validating Firebase environment variables...\");\r\n  const missingKeys = requiredEnvKeys.filter(key => \r\n    !process.env[key] || process.env[key].trim() === ''\r\n  );\r\n  \r\n  if (missingKeys.length > 0) {\r\n    const errorMsg = `CRITICAL ERROR: Missing or empty Firebase environment variables: ${missingKeys.join(', ')}. Check your .env file and ensure all required REACT_APP_FIREBASE_... variables are set correctly and the development server was restarted.`;\r\n    console.error(errorMsg); \r\n    // Log available env vars for debugging (be careful not to log sensitive values in production logs)\r\n    if (process.env.NODE_ENV === 'development') {\r\n        console.log(\"Available process.env keys:\", Object.keys(process.env).filter(k => k.startsWith(\"REACT_APP_\")));\r\n    }\r\n    throw new Error(errorMsg); \r\n  }\r\n  console.log(\"Firebase environment variables validated successfully.\");\r\n};\r\n\r\n// Validate environment variables immediately\r\n// This will throw an error early if config is missing, preventing further execution.\r\nvalidateEnvVariables(); \r\n\r\n// Create the config object using the validated environment variables\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n};\r\n\r\n// Debug logging for development (optional, as validation already happened)\r\nif (process.env.NODE_ENV === 'development') {\r\n  console.log('Firebase Config Object:', firebaseConfig);\r\n}\r\n\r\n// Initialize Firebase\r\nlet app;\r\nlet auth;\r\nlet db;\r\nlet storage;\r\n\r\ntry {\r\n  // Initialization check (safeguard against multiple initializations)\r\n  if (!getApps().length) {\r\n    console.log(\"Initializing Firebase app...\");\r\n    app = initializeApp(firebaseConfig);\r\n    console.log(\"Firebase app initialized.\");\r\n  } else {\r\n    console.log(\"Firebase app already initialized.\");\r\n    app = getApps()[0]; // Get the default app\r\n  }\r\n\r\n  // Initialize services after app initialization\r\n  auth = getAuth(app);\r\n  db = getFirestore(app);\r\n  storage = getStorage(app);\r\n  console.log(\"Firebase services (Auth, Firestore, Storage) initialized.\");\r\n\r\n} catch (error) {\r\n  // Catch errors during initializeApp or getAuth/getFirestore/getStorage\r\n  console.error('Firebase service initialization failed:', error);\r\n  // Re-throw to ensure the app doesn't proceed in a broken state\r\n  throw error; \r\n}\r\n\r\n// Export initialized services\r\nexport { auth, db, storage, app }; \r\nexport default app;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}