{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { openDB } from 'idb';\nvar OfflineSyncManager = function () {\n  function OfflineSyncManager() {\n    _classCallCheck(this, OfflineSyncManager);\n    this.dbName = 'receiptScannerOffline';\n    this.version = 1;\n  }\n  return _createClass(OfflineSyncManager, [{\n    key: \"initDB\",\n    value: function () {\n      var _initDB = _asyncToGenerator(function* () {\n        this.db = yield openDB(this.dbName, this.version, {\n          upgrade: function upgrade(db) {\n            if (!db.objectStoreNames.contains('receipts')) {\n              db.createObjectStore('receipts', {\n                keyPath: 'id'\n              });\n            }\n            if (!db.objectStoreNames.contains('pendingActions')) {\n              db.createObjectStore('pendingActions', {\n                keyPath: 'id',\n                autoIncrement: true\n              });\n            }\n          }\n        });\n      });\n      function initDB() {\n        return _initDB.apply(this, arguments);\n      }\n      return initDB;\n    }()\n  }, {\n    key: \"saveOfflineReceipt\",\n    value: function () {\n      var _saveOfflineReceipt = _asyncToGenerator(function* (receipt) {\n        yield this.db.put('receipts', _objectSpread(_objectSpread({}, receipt), {}, {\n          syncStatus: 'pending'\n        }));\n        yield this.db.add('pendingActions', {\n          type: 'CREATE_RECEIPT',\n          data: receipt,\n          timestamp: Date.now()\n        });\n      });\n      function saveOfflineReceipt(_x) {\n        return _saveOfflineReceipt.apply(this, arguments);\n      }\n      return saveOfflineReceipt;\n    }()\n  }, {\n    key: \"syncPendingActions\",\n    value: function () {\n      var _syncPendingActions = _asyncToGenerator(function* () {\n        var actions = yield this.db.getAll('pendingActions');\n        for (var action of actions) {\n          try {\n            switch (action.type) {\n              case 'CREATE_RECEIPT':\n                yield createReceipt(action.data);\n                break;\n              case 'UPDATE_RECEIPT':\n                yield updateReceipt(action.data.id, action.data);\n                break;\n              case 'DELETE_RECEIPT':\n                yield deleteReceipt(action.data.id);\n                break;\n            }\n            yield this.db.delete('pendingActions', action.id);\n          } catch (error) {\n            console.error('Sync failed for action:', action, error);\n          }\n        }\n      });\n      function syncPendingActions() {\n        return _syncPendingActions.apply(this, arguments);\n      }\n      return syncPendingActions;\n    }()\n  }]);\n}();\nexport var syncManager = new OfflineSyncManager();","map":{"version":3,"names":["openDB","OfflineSyncManager","_classCallCheck","dbName","version","_createClass","key","value","_initDB","_asyncToGenerator","db","upgrade","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","initDB","apply","arguments","_saveOfflineReceipt","receipt","put","_objectSpread","syncStatus","add","type","data","timestamp","Date","now","saveOfflineReceipt","_x","_syncPendingActions","actions","getAll","action","createReceipt","updateReceipt","id","deleteReceipt","delete","error","console","syncPendingActions","syncManager"],"sources":["C:/Users/user/Documents/app.v3/client/src/utils/offline/syncManager.js"],"sourcesContent":["import { openDB } from 'idb';\r\n\r\nclass OfflineSyncManager {\r\n  constructor() {\r\n    this.dbName = 'receiptScannerOffline';\r\n    this.version = 1;\r\n  }\r\n  \r\n  async initDB() {\r\n    this.db = await openDB(this.dbName, this.version, {\r\n      upgrade(db) {\r\n        if (!db.objectStoreNames.contains('receipts')) {\r\n          db.createObjectStore('receipts', { keyPath: 'id' });\r\n        }\r\n        if (!db.objectStoreNames.contains('pendingActions')) {\r\n          db.createObjectStore('pendingActions', { keyPath: 'id', autoIncrement: true });\r\n        }\r\n      },\r\n    });\r\n  }\r\n  \r\n  async saveOfflineReceipt(receipt) {\r\n    await this.db.put('receipts', { ...receipt, syncStatus: 'pending' });\r\n    await this.db.add('pendingActions', {\r\n      type: 'CREATE_RECEIPT',\r\n      data: receipt,\r\n      timestamp: Date.now(),\r\n    });\r\n  }\r\n  \r\n  async syncPendingActions() {\r\n    const actions = await this.db.getAll('pendingActions');\r\n    \r\n    for (const action of actions) {\r\n      try {\r\n        switch (action.type) {\r\n          case 'CREATE_RECEIPT':\r\n            // Assuming createReceipt, updateReceipt, deleteReceipt functions exist and handle online sync\r\n            await createReceipt(action.data);\r\n            break;\r\n          case 'UPDATE_RECEIPT':\r\n            await updateReceipt(action.data.id, action.data);\r\n            break;\r\n          case 'DELETE_RECEIPT':\r\n            await deleteReceipt(action.data.id);\r\n            break;\r\n        }\r\n        \r\n        await this.db.delete('pendingActions', action.id);\r\n      } catch (error) {\r\n        console.error('Sync failed for action:', action, error);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const syncManager = new OfflineSyncManager();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}