{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport var processImage = function () {\n  var _ref = _asyncToGenerator(function* (file) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      var canvas = document.createElement('canvas');\n      var ctx = canvas.getContext('2d');\n      var img = yield createImageBitmap(file);\n      var rotation = options.rotation || 0;\n      var zoom = options.zoom || 1;\n      var maxWidth = 1920;\n      var scaleFactor = maxWidth / img.width;\n      var width = img.width * (scaleFactor < 1 ? scaleFactor : 1) * zoom;\n      var height = img.height * (scaleFactor < 1 ? scaleFactor : 1) * zoom;\n      if (rotation % 180 !== 0) {\n        var _ref2 = [height, width];\n        width = _ref2[0];\n        height = _ref2[1];\n      }\n      canvas.width = width;\n      canvas.height = height;\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.rotate(rotation * Math.PI / 180);\n      ctx.scale(zoom, zoom);\n      ctx.drawImage(img, -img.width * scaleFactor / 2, -img.height * scaleFactor / 2, img.width * scaleFactor, img.height * scaleFactor);\n      return new Promise(function (resolve) {\n        canvas.toBlob(function (blob) {\n          resolve(new File([blob], file.name, {\n            type: 'image/jpeg',\n            lastModified: Date.now()\n          }));\n        }, 'image/jpeg', 0.9);\n      });\n    } catch (error) {\n      console.error('Image processing error:', error);\n      throw new Error('Failed to process image');\n    }\n  });\n  return function processImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["processImage","_ref","_asyncToGenerator","file","options","arguments","length","undefined","canvas","document","createElement","ctx","getContext","img","createImageBitmap","rotation","zoom","maxWidth","scaleFactor","width","height","_ref2","translate","rotate","Math","PI","scale","drawImage","Promise","resolve","toBlob","blob","File","name","type","lastModified","Date","now","error","console","Error","_x","apply"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/utils/imageProcessing.js"],"sourcesContent":["// src/features/documents/utils/imageProcessing.js\r\n\r\nexport const processImage = async (file, options = {}) => {\r\n  try {\r\n    // Create canvas for image processing\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = await createImageBitmap(file);\r\n\r\n    // Apply rotation if specified\r\n    const rotation = options.rotation || 0;\r\n    const zoom = options.zoom || 1;\r\n\r\n    // Set dimensions (max width 1920px)\r\n    const maxWidth = 1920;\r\n    const scaleFactor = maxWidth / img.width;\r\n    let width = img.width * (scaleFactor < 1 ? scaleFactor : 1) * zoom;\r\n    let height = img.height * (scaleFactor < 1 ? scaleFactor : 1) * zoom;\r\n\r\n    // Adjust canvas size for rotation\r\n    if (rotation % 180 !== 0) {\r\n      [width, height] = [height, width];\r\n    }\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    // Apply transformations\r\n    ctx.translate(canvas.width / 2, canvas.height / 2);\r\n    ctx.rotate((rotation * Math.PI) / 180);\r\n    ctx.scale(zoom, zoom);\r\n    ctx.drawImage(\r\n      img,\r\n      (-img.width * scaleFactor) / 2,\r\n      (-img.height * scaleFactor) / 2,\r\n      img.width * scaleFactor,\r\n      img.height * scaleFactor\r\n    );\r\n\r\n    // Convert to blob\r\n    return new Promise(resolve => {\r\n      canvas.toBlob(\r\n        blob => {\r\n          resolve(\r\n            new File([blob], file.name, {\r\n              type: 'image/jpeg',\r\n              lastModified: Date.now(),\r\n            })\r\n          );\r\n        },\r\n        'image/jpeg',\r\n        0.9\r\n      );\r\n    });\r\n  } catch (error) {\r\n    console.error('Image processing error:', error);\r\n    throw new Error('Failed to process image');\r\n  }\r\n};\r\n"],"mappings":";AAEA,OAAO,IAAMA,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,IAAI,EAAmB;IAAA,IAAjBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACnD,IAAI;MAEF,IAAMG,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,IAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACnC,IAAMC,GAAG,SAASC,iBAAiB,CAACX,IAAI,CAAC;MAGzC,IAAMY,QAAQ,GAAGX,OAAO,CAACW,QAAQ,IAAI,CAAC;MACtC,IAAMC,IAAI,GAAGZ,OAAO,CAACY,IAAI,IAAI,CAAC;MAG9B,IAAMC,QAAQ,GAAG,IAAI;MACrB,IAAMC,WAAW,GAAGD,QAAQ,GAAGJ,GAAG,CAACM,KAAK;MACxC,IAAIA,KAAK,GAAGN,GAAG,CAACM,KAAK,IAAID,WAAW,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC,CAAC,GAAGF,IAAI;MAClE,IAAII,MAAM,GAAGP,GAAG,CAACO,MAAM,IAAIF,WAAW,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC,CAAC,GAAGF,IAAI;MAGpE,IAAID,QAAQ,GAAG,GAAG,KAAK,CAAC,EAAE;QAAA,IAAAM,KAAA,GACN,CAACD,MAAM,EAAED,KAAK,CAAC;QAAhCA,KAAK,GAAAE,KAAA;QAAED,MAAM,GAAAC,KAAA;MAChB;MAEAb,MAAM,CAACW,KAAK,GAAGA,KAAK;MACpBX,MAAM,CAACY,MAAM,GAAGA,MAAM;MAGtBT,GAAG,CAACW,SAAS,CAACd,MAAM,CAACW,KAAK,GAAG,CAAC,EAAEX,MAAM,CAACY,MAAM,GAAG,CAAC,CAAC;MAClDT,GAAG,CAACY,MAAM,CAAER,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAI,GAAG,CAAC;MACtCd,GAAG,CAACe,KAAK,CAACV,IAAI,EAAEA,IAAI,CAAC;MACrBL,GAAG,CAACgB,SAAS,CACXd,GAAG,EACF,CAACA,GAAG,CAACM,KAAK,GAAGD,WAAW,GAAI,CAAC,EAC7B,CAACL,GAAG,CAACO,MAAM,GAAGF,WAAW,GAAI,CAAC,EAC/BL,GAAG,CAACM,KAAK,GAAGD,WAAW,EACvBL,GAAG,CAACO,MAAM,GAAGF,WACf,CAAC;MAGD,OAAO,IAAIU,OAAO,CAAC,UAAAC,OAAO,EAAI;QAC5BrB,MAAM,CAACsB,MAAM,CACX,UAAAC,IAAI,EAAI;UACNF,OAAO,CACL,IAAIG,IAAI,CAAC,CAACD,IAAI,CAAC,EAAE5B,IAAI,CAAC8B,IAAI,EAAE;YAC1BC,IAAI,EAAE,YAAY;YAClBC,YAAY,EAAEC,IAAI,CAACC,GAAG,CAAC;UACzB,CAAC,CACH,CAAC;QACH,CAAC,EACD,YAAY,EACZ,GACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAM,IAAIE,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAAA,gBAxDYxC,YAAYA,CAAAyC,EAAA;IAAA,OAAAxC,IAAA,CAAAyC,KAAA,OAAArC,SAAA;EAAA;AAAA,GAwDxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}