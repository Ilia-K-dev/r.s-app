{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { env } from \"../../core/config/environment\";\nimport { logger } from \"../utils/logger\";\nexport var testApiConnection = function () {\n  var _ref = _asyncToGenerator(function* (onSuccess, onFailure) {\n    var apiUrl = env.API_BASE_URL;\n    logger.info(`Testing API connection to: ${apiUrl}`);\n    if (process.env.NODE_ENV !== 'production') {\n      try {\n        var response = yield fetch(`${apiUrl}/api/health-check`);\n        if (response.ok) {\n          logger.info('API connection successful!');\n          if (onSuccess) onSuccess(apiUrl);\n          return true;\n        } else {\n          var fallbackMsg = `API returned status: ${response.status}`;\n          logger.warn(fallbackMsg);\n          if (onFailure) onFailure(fallbackMsg);\n          return false;\n        }\n      } catch (error) {\n        var _fallbackMsg = `API connection failed: ${error.message}`;\n        logger.error(_fallbackMsg);\n        if (onFailure) onFailure(_fallbackMsg);\n        if (apiUrl.includes('localhost') || apiUrl.includes('127.0.0.1')) {\n          logger.warn('Make sure Firebase Emulators are running: firebase emulators:start');\n        }\n        return false;\n      }\n    }\n    logger.info('Production environment detected, assuming API connectivity');\n    if (onSuccess) onSuccess(apiUrl);\n    return true;\n  });\n  return function testApiConnection(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getReliableApiUrl = function getReliableApiUrl() {\n  var configuredUrl = env.API_BASE_URL;\n  if (!configuredUrl || configuredUrl.includes('undefined')) {\n    logger.warn('Invalid API URL detected, falling back to default');\n    if (process.env.NODE_ENV === 'production') {\n      return 'https://me-west1-project-reciept-reader-id.cloudfunctions.net';\n    } else {\n      return 'http://localhost:5001';\n    }\n  }\n  return configuredUrl;\n};","map":{"version":3,"names":["env","logger","testApiConnection","_ref","_asyncToGenerator","onSuccess","onFailure","apiUrl","API_BASE_URL","info","process","NODE_ENV","response","fetch","ok","fallbackMsg","status","warn","error","message","includes","_x","_x2","apply","arguments","getReliableApiUrl","configuredUrl"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/apiConnectionTest.js"],"sourcesContent":["/**\r\n * apiConnectionTest.js\r\n * Last Modified: 2025-05-21 05:06:58\r\n * Modified By: Cline\r\n *\r\n * Purpose: Tests API connectivity with intelligent fallback\r\n * Changes Made: Created utility to verify API connection with proper error handling\r\n */\r\n\r\nimport { env } from '../../core/config/environment';\r\nimport { logger } from '../utils/logger';\r\n\r\n/**\r\n * Tests connection to the configured API endpoint\r\n * @param {Function} onSuccess - Callback when connection succeeds\r\n * @param {Function} onFailure - Callback when connection fails\r\n * @returns {Promise<boolean>} True if connection successful\r\n */\r\nexport const testApiConnection = async (onSuccess, onFailure) => {\r\n  const apiUrl = env.API_BASE_URL;\r\n  logger.info(`Testing API connection to: ${apiUrl}`);\r\n\r\n  // For development/test environment, use a simpler check\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    try {\r\n      // Use a simple health check endpoint available in both emulator and production\r\n      const response = await fetch(`${apiUrl}/api/health-check`);\r\n\r\n      if (response.ok) {\r\n        logger.info('API connection successful!');\r\n        if (onSuccess) onSuccess(apiUrl);\r\n        return true;\r\n      } else {\r\n        const fallbackMsg = `API returned status: ${response.status}`;\r\n        logger.warn(fallbackMsg);\r\n        if (onFailure) onFailure(fallbackMsg);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      const fallbackMsg = `API connection failed: ${error.message}`;\r\n      logger.error(fallbackMsg);\r\n      if (onFailure) onFailure(fallbackMsg);\r\n\r\n      // Check if we're using emulator - if so, remind to start it\r\n      if (apiUrl.includes('localhost') || apiUrl.includes('127.0.0.1')) {\r\n        logger.warn('Make sure Firebase Emulators are running: firebase emulators:start');\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // For production, we'll assume connectivity since we can't test before deployment\r\n  logger.info('Production environment detected, assuming API connectivity');\r\n  if (onSuccess) onSuccess(apiUrl);\r\n  return true;\r\n};\r\n\r\n/**\r\n * Provides the appropriate API URL with fallback logic\r\n * Works in development, production, and test environments\r\n * @returns {string} The appropriate API URL\r\n */\r\nexport const getReliableApiUrl = () => {\r\n  const configuredUrl = env.API_BASE_URL;\r\n\r\n  // Simple validation check\r\n  if (!configuredUrl || configuredUrl.includes('undefined')) {\r\n    logger.warn('Invalid API URL detected, falling back to default');\r\n\r\n    // Determine appropriate fallback\r\n    if (process.env.NODE_ENV === 'production') {\r\n      return 'https://me-west1-project-reciept-reader-id.cloudfunctions.net';\r\n    } else {\r\n      return 'http://localhost:5001';\r\n    }\r\n  }\r\n\r\n  return configuredUrl;\r\n};\r\n"],"mappings":";AASA,SAASA,GAAG;AACZ,SAASC,MAAM;AAQf,OAAO,IAAMC,iBAAiB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,SAAS,EAAEC,SAAS,EAAK;IAC/D,IAAMC,MAAM,GAAGP,GAAG,CAACQ,YAAY;IAC/BP,MAAM,CAACQ,IAAI,CAAC,8BAA8BF,MAAM,EAAE,CAAC;IAGnD,IAAIG,OAAO,CAACV,GAAG,CAACW,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAI;QAEF,IAAMC,QAAQ,SAASC,KAAK,CAAC,GAAGN,MAAM,mBAAmB,CAAC;QAE1D,IAAIK,QAAQ,CAACE,EAAE,EAAE;UACfb,MAAM,CAACQ,IAAI,CAAC,4BAA4B,CAAC;UACzC,IAAIJ,SAAS,EAAEA,SAAS,CAACE,MAAM,CAAC;UAChC,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAMQ,WAAW,GAAG,wBAAwBH,QAAQ,CAACI,MAAM,EAAE;UAC7Df,MAAM,CAACgB,IAAI,CAACF,WAAW,CAAC;UACxB,IAAIT,SAAS,EAAEA,SAAS,CAACS,WAAW,CAAC;UACrC,OAAO,KAAK;QACd;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACd,IAAMH,YAAW,GAAG,0BAA0BG,KAAK,CAACC,OAAO,EAAE;QAC7DlB,MAAM,CAACiB,KAAK,CAACH,YAAW,CAAC;QACzB,IAAIT,SAAS,EAAEA,SAAS,CAACS,YAAW,CAAC;QAGrC,IAAIR,MAAM,CAACa,QAAQ,CAAC,WAAW,CAAC,IAAIb,MAAM,CAACa,QAAQ,CAAC,WAAW,CAAC,EAAE;UAChEnB,MAAM,CAACgB,IAAI,CAAC,oEAAoE,CAAC;QACnF;QAEA,OAAO,KAAK;MACd;IACF;IAGAhB,MAAM,CAACQ,IAAI,CAAC,4DAA4D,CAAC;IACzE,IAAIJ,SAAS,EAAEA,SAAS,CAACE,MAAM,CAAC;IAChC,OAAO,IAAI;EACb,CAAC;EAAA,gBAtCYL,iBAAiBA,CAAAmB,EAAA,EAAAC,GAAA;IAAA,OAAAnB,IAAA,CAAAoB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAsC7B;AAOD,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAAS;EACrC,IAAMC,aAAa,GAAG1B,GAAG,CAACQ,YAAY;EAGtC,IAAI,CAACkB,aAAa,IAAIA,aAAa,CAACN,QAAQ,CAAC,WAAW,CAAC,EAAE;IACzDnB,MAAM,CAACgB,IAAI,CAAC,mDAAmD,CAAC;IAGhE,IAAIP,OAAO,CAACV,GAAG,CAACW,QAAQ,KAAK,YAAY,EAAE;MACzC,OAAO,+DAA+D;IACxE,CAAC,MAAM;MACL,OAAO,uBAAuB;IAChC;EACF;EAEA,OAAOe,aAAa;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}