{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nfunction logFirebaseStatus(message) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(`[Firebase] ${message}`, data);\n}\nfunction getFirebaseConfig() {\n  logFirebaseStatus(\"Collecting Firebase configuration from environment variables\");\n  try {\n    var firebaseConfig = {\n      apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n      authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n      projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n      messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n      appId: process.env.REACT_APP_FIREBASE_APP_ID,\n      measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n    };\n    for (var _ref of Object.entries(firebaseConfig)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var key = _ref2[0];\n      var value = _ref2[1];\n      if (value) {\n        if (key === 'apiKey' || key === 'appId') {\n          var maskedValue = value.length > 6 ? `${value.substring(0, 3)}...${value.substring(value.length - 3)}` : '***';\n          logFirebaseStatus(`${key}: ${maskedValue}`);\n        } else {\n          logFirebaseStatus(`${key}: Found`);\n        }\n      } else {\n        logFirebaseStatus(`${key}: Not found`);\n      }\n    }\n    return firebaseConfig;\n  } catch (error) {\n    logFirebaseStatus(\"Error accessing environment variables:\", error);\n    return {};\n  }\n}\nvar app;\nvar auth;\nvar db;\nvar storage;\ntry {\n  var firebaseConfig = getFirebaseConfig();\n  var hasMinConfig = firebaseConfig.apiKey && firebaseConfig.authDomain && firebaseConfig.projectId;\n  if (!hasMinConfig) {\n    throw new Error('Missing required Firebase configuration. Check environment variables and webpack configuration.');\n  }\n  if (!getApps().length) {\n    app = initializeApp(firebaseConfig);\n    logFirebaseStatus(\"Firebase app initialized successfully\");\n  } else {\n    logFirebaseStatus(\"Firebase app already initialized\");\n    app = getApps()[0];\n  }\n  try {\n    auth = getAuth(app);\n    logFirebaseStatus(\"Auth service initialized\");\n  } catch (authError) {\n    console.error('[Firebase] Auth service initialization failed:', authError);\n    if (authError.code === 'auth/invalid-api-key') {\n      console.error('[Firebase] Invalid API key. Please check REACT_APP_FIREBASE_API_KEY environment variable');\n    }\n  }\n  try {\n    db = getFirestore(app);\n    logFirebaseStatus(\"Firestore service initialized\");\n  } catch (dbError) {\n    console.error('[Firebase] Firestore service initialization failed:', dbError);\n  }\n  try {\n    storage = getStorage(app);\n    logFirebaseStatus(\"Storage service initialized\");\n  } catch (storageError) {\n    console.error('[Firebase] Storage service initialization failed:', storageError);\n  }\n  logFirebaseStatus(\"Firebase initialization process completed\");\n} catch (error) {\n  console.error('CRITICAL ERROR: Firebase initialization failed', error);\n  console.error('[Firebase] Initialization error details:', error);\n}\nexport { app, auth, db, storage };","map":{"version":3,"names":["initializeApp","getApps","getAuth","getFirestore","getStorage","logFirebaseStatus","message","data","arguments","length","undefined","console","log","getFirebaseConfig","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","_ref","Object","entries","_ref2","_slicedToArray","key","value","maskedValue","substring","error","app","auth","db","storage","hasMinConfig","Error","authError","code","dbError","storageError"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/config/firebase.js"],"sourcesContent":["// Modified as part of build error fix task on 2025-05-08, 3:35:31 AM\r\n// Updated Firebase initialization to directly access process.env and enhanced error handling.\r\n\r\nimport { initializeApp, getApps } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\n\r\n// --- Diagnostic Logging Function ---\r\nfunction logFirebaseStatus(message, data = {}) {\r\n  console.log(`[Firebase] ${message}`, data);\r\n}\r\n\r\n// --- Browser-compatible Environment Variable Access ---\r\n// This function attempts to get Firebase config directly from process.env\r\n// It relies on webpack's DefinePlugin to make these variables available.\r\nfunction getFirebaseConfig() {\r\n  logFirebaseStatus(\"Collecting Firebase configuration from environment variables\");\r\n  \r\n  // Attempt to load Firebase configuration from environment variables\r\n  // Added try/catch to prevent errors if process is not available\r\n  try {\r\n    // Default configuration - will be used if environment variables are not available\r\n    const firebaseConfig = {\r\n      apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n      authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n      projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n      storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n      messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n      appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n      measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n    };\r\n    \r\n    // Log the configuration (masking sensitive values)\r\n    for (const [key, value] of Object.entries(firebaseConfig)) {\r\n      if (value) {\r\n        if (key === 'apiKey' || key === 'appId') {\r\n          // Mask sensitive values\r\n          const maskedValue = value.length > 6\r\n            ? `${value.substring(0, 3)}...${value.substring(value.length - 3)}`\r\n            : '***';\r\n          logFirebaseStatus(`${key}: ${maskedValue}`);\r\n        } else {\r\n          logFirebaseStatus(`${key}: Found`);\r\n        }\r\n      } else {\r\n        logFirebaseStatus(`${key}: Not found`);\r\n      }\r\n    }\r\n    \r\n    return firebaseConfig;\r\n  } catch (error) {\r\n    logFirebaseStatus(\"Error accessing environment variables:\", error);\r\n    \r\n    // Return empty config if environment variables can't be accessed\r\n    // This will cause Firebase initialization to fail with a clear error\r\n    return {};\r\n  }\r\n}\r\n\r\n// --- Initialize Firebase Services ---\r\nlet app;\r\nlet auth;\r\nlet db;\r\nlet storage;\r\n\r\ntry {\r\n  const firebaseConfig = getFirebaseConfig();\r\n  \r\n  // Check if minimum required config is present\r\n  const hasMinConfig = firebaseConfig.apiKey && \r\n                      firebaseConfig.authDomain && \r\n                      firebaseConfig.projectId;\r\n  \r\n  if (!hasMinConfig) {\r\n    throw new Error('Missing required Firebase configuration. Check environment variables and webpack configuration.');\r\n  }\r\n  \r\n  // Check if Firebase is already initialized\r\n  if (!getApps().length) {\r\n    app = initializeApp(firebaseConfig);\r\n    logFirebaseStatus(\"Firebase app initialized successfully\");\r\n  } else {\r\n    logFirebaseStatus(\"Firebase app already initialized\");\r\n    app = getApps()[0];\r\n  }\r\n\r\n  // Initialize services with individual error handling\r\n  try {\r\n    auth = getAuth(app);\r\n    logFirebaseStatus(\"Auth service initialized\");\r\n  } catch (authError) {\r\n    console.error('[Firebase] Auth service initialization failed:', authError);\r\n    // Provide more details about the error\r\n    if (authError.code === 'auth/invalid-api-key') {\r\n      console.error('[Firebase] Invalid API key. Please check REACT_APP_FIREBASE_API_KEY environment variable');\r\n    }\r\n  }\r\n\r\n  try {\r\n    db = getFirestore(app);\r\n    logFirebaseStatus(\"Firestore service initialized\");\r\n  } catch (dbError) {\r\n    console.error('[Firebase] Firestore service initialization failed:', dbError);\r\n  }\r\n\r\n  try {\r\n    storage = getStorage(app);\r\n    logFirebaseStatus(\"Storage service initialized\");\r\n  } catch (storageError) {\r\n    console.error('[Firebase] Storage service initialization failed:', storageError);\r\n  }\r\n\r\n  logFirebaseStatus(\"Firebase initialization process completed\");\r\n\r\n} catch (error) {\r\n  console.error('CRITICAL ERROR: Firebase initialization failed', error);\r\n  console.error('[Firebase] Initialization error details:', error);\r\n}\r\n\r\n// Export Firebase services\r\nexport { app, auth, db, storage };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}