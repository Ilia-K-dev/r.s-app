{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useCallback, useRef } from 'react';\nimport { useToast } from \"../../../shared/hooks/useToast\";\nimport { logger } from \"../../../shared/utils/logger\";\nimport { useAuth } from \"../../auth/hooks/useAuth\";\nimport { validateFile } from \"../../../shared/utils/fileHelpers\";\nimport { performOcr } from \"../../receipts/services/receiptOcrService\";\nimport { receiptApi } from \"../../receipts/services/receipts\";\nexport var useDocumentScanner = function useDocumentScanner() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var _useToast = useToast(),\n    showToast = _useToast.showToast;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    document = _useState2[0],\n    setDocument = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState({\n      stage: 'idle',\n      progress: 0\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    processingStatus = _useState8[0],\n    setProcessingStatus = _useState8[1];\n  var cancelTokenRef = useRef(null);\n  var validateDocument = useCallback(function (file) {\n    var validationResult = validateFile(file);\n    if (!validationResult.isValid) {\n      showToast(validationResult.errors[0], 'error');\n      return false;\n    }\n    return true;\n  }, [showToast]);\n  var processDocument = useCallback(function () {\n    var _ref = _asyncToGenerator(function* (file) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      setLoading(true);\n      setError(null);\n      setProcessingStatus({\n        stage: 'preprocessing',\n        progress: 0\n      });\n      try {\n        if (!validateDocument(file)) {\n          throw new Error('Invalid file');\n        }\n        setProcessingStatus({\n          stage: 'ocr-processing',\n          progress: 25\n        });\n        var ocrResult = yield performOcr(file, {});\n        var receiptData = {\n          extractedText: ocrResult.text,\n          ocrConfidence: ocrResult.confidence,\n          documentType: options.documentType || 'receipt'\n        };\n        setProcessingStatus({\n          stage: 'saving-to-firestore',\n          progress: 75\n        });\n        var savedReceipt = yield receiptApi.createReceipt(receiptData, file);\n        setDocument(savedReceipt);\n        setProcessingStatus({\n          stage: 'completed',\n          progress: 100\n        });\n        showToast('Receipt processed and saved successfully', 'success');\n        return savedReceipt;\n      } catch (err) {\n        logger.error('Document processing error', err);\n        var userFriendlyMessage = handleFirebaseError(err, 'Document Processing Hook');\n        setError(userFriendlyMessage);\n        setProcessingStatus({\n          stage: 'error',\n          progress: 0\n        });\n        showToast(userFriendlyMessage, 'error');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [user, showToast, validateDocument]);\n  var cancelProcessing = useCallback(function () {\n    setLoading(false);\n    setProcessingStatus({\n      stage: 'idle',\n      progress: 0\n    });\n    showToast('Document processing cancelled', 'warning');\n  }, [showToast]);\n  var resetScanner = useCallback(function () {\n    setDocument(null);\n    setError(null);\n    setProcessingStatus({\n      stage: 'idle',\n      progress: 0\n    });\n  }, []);\n  return {\n    document: document,\n    loading: loading,\n    error: error,\n    processingStatus: processingStatus,\n    processDocument: processDocument,\n    cancelProcessing: cancelProcessing,\n    resetScanner: resetScanner,\n    isProcessing: loading || processingStatus.stage !== 'idle' && processingStatus.stage !== 'completed' && processingStatus.stage !== 'error'\n  };\n};\nexport default useDocumentScanner;","map":{"version":3,"names":["useState","useCallback","useRef","useToast","logger","useAuth","validateFile","performOcr","receiptApi","useDocumentScanner","_useAuth","user","_useToast","showToast","_useState","_useState2","_slicedToArray","document","setDocument","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","stage","progress","_useState8","processingStatus","setProcessingStatus","cancelTokenRef","validateDocument","file","validationResult","isValid","errors","processDocument","_ref","_asyncToGenerator","options","arguments","length","undefined","Error","ocrResult","receiptData","extractedText","text","ocrConfidence","confidence","documentType","savedReceipt","createReceipt","err","userFriendlyMessage","handleFirebaseError","_x","apply","cancelProcessing","resetScanner","isProcessing"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/documents/hooks/useDocumentScanner.js"],"sourcesContent":["// File: client/src/features/documents/hooks/useDocumentScanner.js\r\n// Date: 2025-05-10 05:06:59\r\n// Description: Custom hook for document scanning and processing, now with client-side OCR and Firebase integration.\r\n// Reasoning: Refactored to use client-side Tesseract.js for OCR and the refactored receiptApi for Firebase Storage/Firestore operations as per work plan Task 2.2.\r\n// Potential Optimizations: Add progress tracking for OCR and Storage upload. Improve error handling granularity.\r\n\r\nimport { useState, useCallback, useRef } from 'react';\r\n\r\nimport { useToast } from '../../../shared/hooks/useToast';\r\nimport { logger } from '../../../shared/utils/logger';\r\nimport { useAuth } from '../../auth/hooks/useAuth';\r\n// Removed import for documentProcessingService as its uploadDocument is replaced\r\n// Removed import for visionService as OCR is now client-side\r\nimport { validateFile } from '../../../shared/utils/fileHelpers';\r\nimport { performOcr } from '../../receipts/services/receiptOcrService'; // Import client-side OCR service\r\nimport { receiptApi } from '../../receipts/services/receipts'; // Import refactored receipt API\r\n\r\n/**\r\n * Custom hook for document scanning and processing\r\n * @returns {Object} Document scanning methods and state\r\n */\r\nexport const useDocumentScanner = () => {\r\n  const { user } = useAuth();\r\n  const { showToast } = useToast();\r\n\r\n  // State for tracking document scanning process\r\n  const [document, setDocument] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [processingStatus, setProcessingStatus] = useState({\r\n    stage: 'idle', // 'idle' | 'preprocessing' | 'ocr-processing' | 'uploading-to-storage' | 'saving-to-firestore' | 'completed' | 'error'\r\n    progress: 0,\r\n  });\r\n\r\n  // Ref to store cancellation token for ongoing operations (if needed for OCR/Upload)\r\n  const cancelTokenRef = useRef(null); // Tesseract.js has its own cancellation\r\n\r\n  /**\r\n   * Validate file before processing\r\n   * @param {File} file - File to validate\r\n   * @returns {boolean} - Validation result\r\n   */\r\n  const validateDocument = useCallback(\r\n    file => {\r\n      const validationResult = validateFile(file);\r\n\r\n      if (!validationResult.isValid) {\r\n        showToast(validationResult.errors[0], 'error');\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n    [showToast]\r\n  );\r\n\r\n  /**\r\n   * Process document from file or camera input\r\n   * Performs client-side OCR and saves receipt data to Firebase.\r\n   * @param {File|Blob} file - Document file to process\r\n   * @param {object} [options={}] - Additional processing options (e.g., documentType)\r\n   * @returns {Promise<object>} Processed document data (saved receipt data)\r\n   */\r\n  const processDocument = useCallback(\r\n    async (file, options = {}) => {\r\n      // Reset previous state\r\n      setLoading(true);\r\n      setError(null);\r\n      setProcessingStatus({ stage: 'preprocessing', progress: 0 });\r\n\r\n      try {\r\n        // Validate file\r\n        if (!validateDocument(file)) {\r\n          throw new Error('Invalid file');\r\n        }\r\n\r\n        // Note: Tesseract.js has its own cancellation mechanism.\r\n        // If needed, integrate AbortController with Tesseract.js worker.terminate()\r\n\r\n        // Preprocess image (if necessary, e.g., for better OCR)\r\n        // This step might be optional depending on imageProcessing utility\r\n        // const processedImage = await documentProcessingService.preprocessImage(file);\r\n        // For now, we'll use the original file for OCR and upload\r\n\r\n        // Perform client-side OCR\r\n        setProcessingStatus({ stage: 'ocr-processing', progress: 25 });\r\n        const ocrResult = await performOcr(file, {\r\n          // Pass OCR options if needed, e.g., language\r\n          // onProgress: (m) => setProcessingStatus(prev => ({ ...prev, progress: 25 + m.progress * 50 })) // Example progress update\r\n        });\r\n\r\n        // Prepare receipt data - this structure needs to match your Firestore model\r\n        // You'll likely need to extract specific fields from ocrResult.text here\r\n        // For now, saving the raw text and confidence\r\n        const receiptData = {\r\n          // Example fields - adjust based on your actual receipt data structure\r\n          // merchant: 'Extracted Merchant Name',\r\n          // date: new Date(), // Or extracted date from OCR\r\n          // total: parseFloat('Extracted Total'),\r\n          extractedText: ocrResult.text,\r\n          ocrConfidence: ocrResult.confidence,\r\n          // Add other relevant data extracted or defaulted\r\n          documentType: options.documentType || 'receipt',\r\n          // userId will be added by receiptApi.createReceipt\r\n          // createdAt, updatedAt will be added by receiptApi.createReceipt\r\n        };\r\n\r\n        // Save receipt data and upload image to Firebase via refactored receiptApi\r\n        setProcessingStatus({ stage: 'saving-to-firestore', progress: 75 });\r\n        // The receiptApi.createReceipt now handles Storage upload and Firestore save\r\n        const savedReceipt = await receiptApi.createReceipt(receiptData, file);\r\n\r\n\r\n        // Update state with the saved receipt data\r\n        setDocument(savedReceipt); // Assuming savedReceipt contains the full document data with ID\r\n        setProcessingStatus({ stage: 'completed', progress: 100 });\r\n\r\n        // Show success toast\r\n        showToast('Receipt processed and saved successfully', 'success');\r\n\r\n        return savedReceipt;\r\n      } catch (err) {\r\n        // Log error\r\n        logger.error('Document processing error', err);\r\n\r\n        // Set error state\r\n        // Use handleFirebaseError for user-friendly messages\r\n        const userFriendlyMessage = handleFirebaseError(err, 'Document Processing Hook');\r\n        setError(userFriendlyMessage);\r\n        setProcessingStatus({ stage: 'error', progress: 0 });\r\n\r\n        // Show error toast\r\n        showToast(userFriendlyMessage, 'error');\r\n\r\n        throw err; // Re-throw the handled error message\r\n      } finally {\r\n        // Reset loading state\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [user, showToast, validateDocument] // Add dependencies used in useCallback\r\n  );\r\n\r\n  /**\r\n   * Cancel ongoing document processing\r\n   */\r\n  const cancelProcessing = useCallback(() => {\r\n    // If Tesseract.js worker is active, terminate it here\r\n    // Tesseract.js v5+ uses workers, need to manage their lifecycle if cancellation is required\r\n    // For simplicity, this basic implementation doesn't include Tesseract worker cancellation.\r\n    // If implemented, also need to handle potential partial Storage uploads/Firestore writes.\r\n\r\n    // Reset state to idle\r\n    setLoading(false);\r\n    setProcessingStatus({ stage: 'idle', progress: 0 });\r\n    showToast('Document processing cancelled', 'warning');\r\n\r\n  }, [showToast]);\r\n\r\n  /**\r\n   * Reset document scanner state\r\n   */\r\n  const resetScanner = useCallback(() => {\r\n    setDocument(null);\r\n    setError(null);\r\n    setProcessingStatus({ stage: 'idle', progress: 0 });\r\n  }, []);\r\n\r\n  return {\r\n    // State\r\n    document,\r\n    loading,\r\n    error,\r\n    processingStatus,\r\n\r\n    // Methods\r\n    processDocument,\r\n    cancelProcessing,\r\n    resetScanner,\r\n\r\n    // Utility state\r\n    isProcessing: loading || (processingStatus.stage !== 'idle' && processingStatus.stage !== 'completed' && processingStatus.stage !== 'error'),\r\n  };\r\n};\r\n\r\nexport default useDocumentScanner;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}