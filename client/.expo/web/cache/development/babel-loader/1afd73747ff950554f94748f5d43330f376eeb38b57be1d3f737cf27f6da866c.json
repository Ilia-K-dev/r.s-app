{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { collection, query, where, getDocs, orderBy } from 'firebase/firestore';\nimport { db } from \"../../../core/config/firebase\";\nexport var reportsApi = {\n  getSpendingByCategory: function () {\n    var _getSpendingByCategory = _asyncToGenerator(function* (userId, startDate, endDate) {\n      try {\n        var receiptsRef = collection(db, 'receipts');\n        var q = query(receiptsRef, where('userId', '==', userId), where('date', '>=', startDate), where('date', '<=', endDate), orderBy('date', 'desc'));\n        var snapshot = yield getDocs(q);\n        var receipts = snapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        var categoryTotals = receipts.reduce(function (acc, receipt) {\n          var category = receipt.category,\n            total = receipt.total;\n          acc[category] = (acc[category] || 0) + total;\n          return acc;\n        }, {});\n        return Object.entries(categoryTotals).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            category = _ref2[0],\n            total = _ref2[1];\n          return {\n            category: category,\n            total: total\n          };\n        });\n      } catch (error) {\n        throw new Error('Failed to fetch spending by category');\n      }\n    });\n    function getSpendingByCategory(_x, _x2, _x3) {\n      return _getSpendingByCategory.apply(this, arguments);\n    }\n    return getSpendingByCategory;\n  }(),\n  getMonthlySpending: function () {\n    var _getMonthlySpending = _asyncToGenerator(function* (userId, year) {\n      try {\n        var startDate = new Date(year, 0, 1).toISOString();\n        var endDate = new Date(year, 11, 31).toISOString();\n        var receiptsRef = collection(db, 'receipts');\n        var q = query(receiptsRef, where('userId', '==', userId), where('date', '>=', startDate), where('date', '<=', endDate), orderBy('date', 'asc'));\n        var snapshot = yield getDocs(q);\n        var receipts = snapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        var monthlyTotals = receipts.reduce(function (acc, receipt) {\n          var month = new Date(receipt.date).getMonth();\n          acc[month] = (acc[month] || 0) + receipt.total;\n          return acc;\n        }, {});\n        var months = Array.from({\n          length: 12\n        }, function (_, i) {\n          return {\n            month: new Date(year, i).toLocaleString('default', {\n              month: 'short'\n            }),\n            total: monthlyTotals[i] || 0\n          };\n        });\n        return months;\n      } catch (error) {\n        throw new Error('Failed to fetch monthly spending');\n      }\n    });\n    function getMonthlySpending(_x4, _x5) {\n      return _getMonthlySpending.apply(this, arguments);\n    }\n    return getMonthlySpending;\n  }(),\n  getBudgetProgress: function () {\n    var _getBudgetProgress = _asyncToGenerator(function* (userId) {\n      try {\n        var categoriesRef = collection(db, 'categories');\n        var categoriesSnapshot = yield getDocs(query(categoriesRef, where('userId', '==', userId)));\n        var categories = categoriesSnapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        var startOfMonth = new Date();\n        startOfMonth.setDate(1);\n        startOfMonth.setHours(0, 0, 0, 0);\n        var receiptsRef = collection(db, 'receipts');\n        var receiptsSnapshot = yield getDocs(query(receiptsRef, where('userId', '==', userId), where('date', '>=', startOfMonth.toISOString())));\n        var receipts = receiptsSnapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        var spending = receipts.reduce(function (acc, receipt) {\n          acc[receipt.category] = (acc[receipt.category] || 0) + receipt.total;\n          return acc;\n        }, {});\n        return categories.map(function (category) {\n          return {\n            id: category.id,\n            name: category.name,\n            budget: category.budget || 0,\n            spent: spending[category.name] || 0\n          };\n        });\n      } catch (error) {\n        throw new Error('Failed to fetch budget progress');\n      }\n    });\n    function getBudgetProgress(_x6) {\n      return _getBudgetProgress.apply(this, arguments);\n    }\n    return getBudgetProgress;\n  }()\n};","map":{"version":3,"names":["collection","query","where","getDocs","orderBy","db","reportsApi","getSpendingByCategory","_getSpendingByCategory","_asyncToGenerator","userId","startDate","endDate","receiptsRef","q","snapshot","receipts","docs","map","doc","_objectSpread","id","data","categoryTotals","reduce","acc","receipt","category","total","Object","entries","_ref","_ref2","_slicedToArray","error","Error","_x","_x2","_x3","apply","arguments","getMonthlySpending","_getMonthlySpending","year","Date","toISOString","monthlyTotals","month","date","getMonth","months","Array","from","length","_","i","toLocaleString","_x4","_x5","getBudgetProgress","_getBudgetProgress","categoriesRef","categoriesSnapshot","categories","startOfMonth","setDate","setHours","receiptsSnapshot","spending","name","budget","spent","_x6"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/services/reports.js"],"sourcesContent":["import { collection, query, where, getDocs, orderBy } from 'firebase/firestore'; //correct\n\r\nimport { db } from '../../../core/config/firebase'; //correct\r\n\r\nexport const reportsApi = {\r\n  getSpendingByCategory: async (userId, startDate, endDate) => {\r\n    try {\r\n      const receiptsRef = collection(db, 'receipts');\r\n      const q = query(\r\n        receiptsRef,\r\n        where('userId', '==', userId),\r\n        where('date', '>=', startDate),\r\n        where('date', '<=', endDate),\r\n        orderBy('date', 'desc')\r\n      );\r\n\r\n      const snapshot = await getDocs(q);\r\n      const receipts = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n\r\n      // Group and sum by category\r\n      const categoryTotals = receipts.reduce((acc, receipt) => {\r\n        const { category, total } = receipt;\r\n        acc[category] = (acc[category] || 0) + total;\r\n        return acc;\r\n      }, {});\r\n\r\n      return Object.entries(categoryTotals).map(([category, total]) => ({\r\n        category,\r\n        total,\r\n      }));\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch spending by category');\r\n    }\r\n  },\r\n\r\n  getMonthlySpending: async (userId, year) => {\r\n    try {\r\n      const startDate = new Date(year, 0, 1).toISOString();\r\n      const endDate = new Date(year, 11, 31).toISOString();\r\n\r\n      const receiptsRef = collection(db, 'receipts');\r\n      const q = query(\r\n        receiptsRef,\r\n        where('userId', '==', userId),\r\n        where('date', '>=', startDate),\r\n        where('date', '<=', endDate),\r\n        orderBy('date', 'asc')\r\n      );\r\n\r\n      const snapshot = await getDocs(q);\r\n      const receipts = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n\r\n      // Group by month\r\n      const monthlyTotals = receipts.reduce((acc, receipt) => {\r\n        const month = new Date(receipt.date).getMonth();\r\n        acc[month] = (acc[month] || 0) + receipt.total;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Fill in missing months with 0\r\n      const months = Array.from({ length: 12 }, (_, i) => ({\r\n          month: new Date(year, i).toLocaleString('default', { month: 'short' }),\r\n          total: monthlyTotals[i] || 0,\r\n        }));\r\n\r\n      return months;\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch monthly spending');\r\n    }\r\n  },\r\n\r\n  getBudgetProgress: async userId => {\r\n    try {\r\n      // Get categories with budgets\r\n      const categoriesRef = collection(db, 'categories');\r\n      const categoriesSnapshot = await getDocs(query(categoriesRef, where('userId', '==', userId)));\r\n      const categories = categoriesSnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n\r\n      // Get current month's receipts\r\n      const startOfMonth = new Date();\r\n      startOfMonth.setDate(1);\r\n      startOfMonth.setHours(0, 0, 0, 0);\r\n\r\n      const receiptsRef = collection(db, 'receipts');\r\n      const receiptsSnapshot = await getDocs(\r\n        query(\r\n          receiptsRef,\r\n          where('userId', '==', userId),\r\n          where('date', '>=', startOfMonth.toISOString())\r\n        )\r\n      );\r\n\r\n      const receipts = receiptsSnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n\r\n      // Calculate spending by category\r\n      const spending = receipts.reduce((acc, receipt) => {\r\n        acc[receipt.category] = (acc[receipt.category] || 0) + receipt.total;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Combine budget and spending data\r\n      return categories.map(category => ({\r\n        id: category.id,\r\n        name: category.name,\r\n        budget: category.budget || 0,\r\n        spent: spending[category.name] || 0,\r\n      }));\r\n    } catch (error) {\r\n      throw new Error('Failed to fetch budget progress');\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}