{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { auth } from \"../../src/core/config/firebase\";\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { getReceipts, getReceiptById, createReceipt, updateReceipt, deleteReceipt } from \"../../src/features/receipts/services/receipts\";\ndescribe('Receipt Management Integration', function () {\n  var testEmail = 'test@example.com';\n  var testPassword = 'password123';\n  var testUserId;\n  var createdReceiptId;\n  beforeAll(_asyncToGenerator(function* () {\n    var userCredential = yield signInWithEmailAndPassword(auth, testEmail, testPassword);\n    testUserId = userCredential.user.uid;\n  }));\n  it('should create, read, update, and delete a receipt', _asyncToGenerator(function* () {\n    var newReceipt = {\n      userId: testUserId,\n      merchant: 'Test Store',\n      total: 42.99,\n      date: new Date(),\n      category: 'testing'\n    };\n    var createResult = yield createReceipt(newReceipt);\n    expect(createResult).toHaveProperty('id');\n    createdReceiptId = createResult.id;\n    var retrievedReceipt = yield getReceiptById(createdReceiptId);\n    expect(retrievedReceipt.merchant).toBe('Test Store');\n    expect(retrievedReceipt.total).toBe(42.99);\n    var updateData = {\n      merchant: 'Updated Store',\n      total: 50.00\n    };\n    yield updateReceipt(createdReceiptId, updateData);\n    var updatedReceipt = yield getReceiptById(createdReceiptId);\n    expect(updatedReceipt.merchant).toBe('Updated Store');\n    expect(updatedReceipt.total).toBe(50.00);\n    yield deleteReceipt(createdReceiptId);\n    try {\n      yield getReceiptById(createdReceiptId);\n      fail('Receipt should have been deleted');\n    } catch (error) {\n      expect(error.message).toContain('not found');\n    }\n  }));\n  it('should list all receipts for the user', _asyncToGenerator(function* () {\n    var testReceipts = [{\n      userId: testUserId,\n      merchant: 'Store A',\n      total: 10.00,\n      date: new Date(),\n      category: 'food'\n    }, {\n      userId: testUserId,\n      merchant: 'Store B',\n      total: 20.00,\n      date: new Date(),\n      category: 'transport'\n    }];\n    var createdIds = [];\n    for (var receipt of testReceipts) {\n      var result = yield createReceipt(receipt);\n      createdIds.push(result.id);\n    }\n    var allReceipts = yield getReceipts(testUserId);\n    expect(allReceipts.length).toBeGreaterThanOrEqual(testReceipts.length);\n    for (var id of createdIds) {\n      yield deleteReceipt(id);\n    }\n  }));\n});","map":{"version":3,"names":["auth","signInWithEmailAndPassword","getReceipts","getReceiptById","createReceipt","updateReceipt","deleteReceipt","describe","testEmail","testPassword","testUserId","createdReceiptId","beforeAll","_asyncToGenerator","userCredential","user","uid","it","newReceipt","userId","merchant","total","date","Date","category","createResult","expect","toHaveProperty","id","retrievedReceipt","toBe","updateData","updatedReceipt","fail","error","message","toContain","testReceipts","createdIds","receipt","result","push","allReceipts","length","toBeGreaterThanOrEqual"],"sources":["C:/Users/user/Documents/app.v3/client/tests/integration/receiptManagement.integration.test.js"],"sourcesContent":["// Note: This needs to be run with the Firebase emulator\r\nimport { auth } from '../../src/core/config/firebase';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport {\r\n  getReceipts,\r\n  getReceiptById,\r\n  createReceipt,\r\n  updateReceipt,\r\n  deleteReceipt\r\n} from '../../src/features/receipts/services/receipts';\r\n\r\ndescribe('Receipt Management Integration', () => {\r\n  // Test user credentials - should match a user in the emulator\r\n  const testEmail = 'test@example.com';\r\n  const testPassword = 'password123';\r\n  let testUserId;\r\n  let createdReceiptId;\r\n\r\n  // Setup - sign in before tests\r\n  beforeAll(async () => {\r\n    // Sign in to get authenticated user\r\n    const userCredential = await signInWithEmailAndPassword(auth, testEmail, testPassword);\r\n    testUserId = userCredential.user.uid;\r\n  });\r\n\r\n  it('should create, read, update, and delete a receipt', async () => {\r\n    // 1. Create a new receipt\r\n    const newReceipt = {\r\n      userId: testUserId,\r\n      merchant: 'Test Store',\r\n      total: 42.99,\r\n      date: new Date(),\r\n      category: 'testing'\r\n    };\r\n\r\n    const createResult = await createReceipt(newReceipt);\r\n    expect(createResult).toHaveProperty('id');\r\n    createdReceiptId = createResult.id;\r\n\r\n    // 2. Verify it can be retrieved by ID\r\n    const retrievedReceipt = await getReceiptById(createdReceiptId);\r\n    expect(retrievedReceipt.merchant).toBe('Test Store');\r\n    expect(retrievedReceipt.total).toBe(42.99);\r\n\r\n    // 3. Update the receipt\r\n    const updateData = {\r\n      merchant: 'Updated Store',\r\n      total: 50.00\r\n    };\r\n    await updateReceipt(createdReceiptId, updateData);\r\n\r\n    // 4. Verify the update\r\n    const updatedReceipt = await getReceiptById(createdReceiptId);\r\n    expect(updatedReceipt.merchant).toBe('Updated Store');\r\n    expect(updatedReceipt.total).toBe(50.00);\r\n\r\n    // 5. Delete the receipt\r\n    await deleteReceipt(createdReceiptId);\r\n\r\n    // 6. Verify deletion\r\n    try {\r\n      await getReceiptById(createdReceiptId);\r\n      fail('Receipt should have been deleted');\r\n    } catch (error) {\r\n      expect(error.message).toContain('not found');\r\n    }\r\n  });\r\n\r\n  it('should list all receipts for the user', async () => {\r\n    // Create a few test receipts first\r\n    const testReceipts = [\r\n      { userId: testUserId, merchant: 'Store A', total: 10.00, date: new Date(), category: 'food' },\r\n      { userId: testUserId, merchant: 'Store B', total: 20.00, date: new Date(), category: 'transport' }\r\n    ];\r\n\r\n    // Create each test receipt\r\n    const createdIds = [];\r\n    for (const receipt of testReceipts) {\r\n      const result = await createReceipt(receipt);\r\n      createdIds.push(result.id);\r\n    }\r\n\r\n    // Get all receipts\r\n    const allReceipts = await getReceipts(testUserId);\r\n\r\n    // Verify receipts exist\r\n    expect(allReceipts.length).toBeGreaterThanOrEqual(testReceipts.length);\r\n\r\n    // Cleanup - delete test receipts\r\n    for (const id of createdIds) {\r\n      await deleteReceipt(id);\r\n    }\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}