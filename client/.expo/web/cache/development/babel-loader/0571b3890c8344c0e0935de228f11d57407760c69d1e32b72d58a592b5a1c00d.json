{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { collection, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy, getDocs, getDoc } from 'firebase/firestore';\nimport { ref, uploadBytes, deleteObject, getDownloadURL } from 'firebase/storage';\nimport { isFeatureEnabled, startPerformanceTimer, stopPerformanceTimer } from '@/core/config/featureFlags';\nimport { handleError, handleFirebaseError } from '@/utils/errorHandler';\nimport { getReceiptsApi, getReceiptByIdApi, createReceiptApi, updateReceiptApi, deleteReceiptApi, correctReceiptApi } from '@/services/api/receipts';\nimport receiptsService from \"../services/receipts\";\njest.mock('firebase/firestore');\njest.mock('firebase/storage');\njest.mock('@/core/config/featureFlags');\njest.mock('@/utils/errorHandler');\njest.mock('@/services/api/receipts');\njest.mock('axios');\ndescribe('Receipts Service Unit Tests', function () {\n  var mockUserId = 'test-user-id';\n  var mockReceiptId = 'test-receipt-id';\n  var mockReceiptData = {\n    field: 'value'\n  };\n  var mockImageFile = new File(['dummy content'], 'test.jpg', {\n    type: 'image/jpeg'\n  });\n  var mockUpdateData = {\n    field: 'new value'\n  };\n  var mockCorrectedData = {\n    correctedField: 'new value'\n  };\n  var mockError = new Error('Firestore error');\n  var mockApiError = new Error('API error');\n  var mockDocSnapshot = {\n    exists: jest.fn(),\n    data: jest.fn(),\n    id: mockReceiptId\n  };\n  var mockQuerySnapshot = {\n    docs: [],\n    empty: true,\n    size: 0,\n    forEach: jest.fn()\n  };\n  var mockDocRef = {\n    get: jest.fn(function () {\n      return Promise.resolve(mockDocSnapshot);\n    }),\n    set: jest.fn(function () {\n      return Promise.resolve();\n    }),\n    update: jest.fn(function () {\n      return Promise.resolve();\n    }),\n    delete: jest.fn(function () {\n      return Promise.resolve();\n    }),\n    collection: jest.fn()\n  };\n  var mockCollectionRef = {\n    doc: jest.fn(function () {\n      return mockDocRef;\n    }),\n    where: jest.fn(function () {\n      return mockCollectionRef;\n    }),\n    orderBy: jest.fn(function () {\n      return mockCollectionRef;\n    }),\n    limit: jest.fn(function () {\n      return mockCollectionRef;\n    }),\n    startAfter: jest.fn(function () {\n      return mockCollectionRef;\n    }),\n    get: jest.fn(function () {\n      return Promise.resolve(mockQuerySnapshot);\n    }),\n    add: jest.fn(function () {\n      return Promise.resolve(mockDocRef);\n    })\n  };\n  var mockStorageRef = {\n    put: jest.fn(),\n    child: jest.fn(function () {\n      return mockStorageRef;\n    }),\n    delete: jest.fn(function () {\n      return Promise.resolve();\n    }),\n    getDownloadURL: jest.fn(function () {\n      return Promise.resolve('https://example.com/test-image.jpg');\n    })\n  };\n  beforeEach(function () {\n    collection.mockClear();\n    doc.mockClear();\n    addDoc.mockClear();\n    updateDoc.mockClear();\n    deleteDoc.mockClear();\n    query.mockClear();\n    where.mockClear();\n    orderBy.mockClear();\n    getDocs.mockClear();\n    getDoc.mockClear();\n    ref.mockClear();\n    uploadBytes.mockClear();\n    deleteObject.mockClear();\n    if (getDownloadURL) getDownloadURL.mockClear();\n    isFeatureEnabled.mockClear();\n    startPerformanceTimer.mockClear();\n    stopPerformanceTimer.mockClear();\n    handleError.mockClear();\n    handleFirebaseError.mockClear();\n    getReceiptsApi.mockClear();\n    getReceiptByIdApi.mockClear();\n    createReceiptApi.mockClear();\n    updateReceiptApi.mockClear();\n    deleteReceiptApi.mockClear();\n    correctReceiptApi.mockClear();\n    mockCollectionRef.doc.mockClear();\n    mockCollectionRef.where.mockClear();\n    mockCollectionRef.orderBy.mockClear();\n    mockCollectionRef.limit.mockClear();\n    mockCollectionRef.startAfter.mockClear();\n    mockCollectionRef.get.mockClear();\n    mockCollectionRef.add.mockClear();\n    mockDocRef.get.mockClear();\n    mockDocRef.set.mockClear();\n    mockDocRef.update.mockClear();\n    mockDocRef.delete.mockClear();\n    mockDocRef.collection.mockClear();\n    mockStorageRef.put.mockClear();\n    mockStorageRef.child.mockClear();\n    mockStorageRef.delete.mockClear();\n    mockStorageRef.getDownloadURL.mockClear();\n    collection.mockReturnValue(mockCollectionRef);\n    doc.mockReturnValue(mockDocRef);\n    query.mockReturnValue(mockCollectionRef);\n    where.mockReturnValue(mockCollectionRef);\n    orderBy.mockReturnValue(mockCollectionRef);\n    getDocs.mockResolvedValue(mockQuerySnapshot);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    addDoc.mockResolvedValue({\n      id: 'new-receipt-id'\n    });\n    updateDoc.mockResolvedValue(undefined);\n    deleteDoc.mockResolvedValue(undefined);\n    ref.mockReturnValue(mockStorageRef);\n    uploadBytes.mockResolvedValue({\n      ref: mockStorageRef\n    });\n    deleteObject.mockResolvedValue(undefined);\n    if (getDownloadURL) getDownloadURL.mockResolvedValue('https://example.com/test-image.jpg');\n    getReceiptsApi.mockResolvedValue({\n      receipts: [],\n      lastVisible: null\n    });\n    getReceiptByIdApi.mockResolvedValue({\n      id: 'api-id'\n    });\n    createReceiptApi.mockResolvedValue({\n      id: 'api-id'\n    });\n    updateReceiptApi.mockResolvedValue(undefined);\n    deleteReceiptApi.mockResolvedValue(undefined);\n    correctReceiptApi.mockResolvedValue(undefined);\n    isFeatureEnabled.mockReturnValue(true);\n  });\n  it('getReceipts should fetch receipts from Firestore when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockReceipts = [{\n      id: 'r1'\n    }, {\n      id: 'r2'\n    }];\n    var mockLastVisible = {\n      id: 'r2'\n    };\n    var mockQuerySnapshotWithData = {\n      docs: mockReceipts.map(function (_data) {\n        return {\n          id: _data.id,\n          data: function data() {\n            return _data;\n          }\n        };\n      }),\n      empty: false,\n      size: 2,\n      forEach: jest.fn(function (callback) {\n        return mockReceipts.forEach(callback);\n      }),\n      docs: [{\n        id: 'r1',\n        data: function data() {\n          return mockReceipts[0];\n        }\n      }, {\n        id: 'r2',\n        data: function data() {\n          return mockReceipts[1];\n        }\n      }]\n    };\n    mockQuerySnapshotWithData.docs[1].data = function () {\n      return mockReceipts[1];\n    };\n    mockQuerySnapshotWithData.docs[1].id = 'r2';\n    mockQuerySnapshotWithData.docs[1].exists = true;\n    getDocs.mockResolvedValue(mockQuerySnapshotWithData);\n    var result = yield receiptsService.getReceipts(mockUserId, {});\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\n    expect(query).toHaveBeenCalledWith(mockCollectionRef, where('userId', '==', mockUserId), orderBy('date', 'desc'));\n    expect(getDocs).toHaveBeenCalledWith(mockCollectionRef);\n    expect(result.receipts).toEqual(mockReceipts);\n    expect(getReceiptsApi).not.toHaveBeenCalled();\n  }));\n  it('getReceipts should fallback to API when Firebase fetch fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    getDocs.mockRejectedValue(mockError);\n    getReceiptsApi.mockResolvedValue({\n      receipts: [{\n        id: 'api-r1'\n      }],\n      lastVisible: null\n    });\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield receiptsService.getReceipts(mockUserId, {});\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\n    expect(query).toHaveBeenCalledWith(mockCollectionRef, where('userId', '==', mockUserId), orderBy('date', 'desc'));\n    expect(getDocs).toHaveBeenCalledWith(mockCollectionRef);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - getReceipts');\n    expect(getReceiptsApi).toHaveBeenCalledWith(mockUserId, {});\n    expect(result).toEqual({\n      receipts: [{\n        id: 'api-r1'\n      }],\n      lastVisible: null\n    });\n  }));\n  it('getReceipts should call API when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    getReceiptsApi.mockResolvedValue({\n      receipts: [{\n        id: 'api-r1'\n      }],\n      lastVisible: null\n    });\n    var result = yield receiptsService.getReceipts(mockUserId, {});\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).not.toHaveBeenCalled();\n    expect(getDocs).not.toHaveBeenCalled();\n    expect(getReceiptsApi).toHaveBeenCalledWith(mockUserId, {});\n    expect(result).toEqual({\n      receipts: [{\n        id: 'api-r1'\n      }],\n      lastVisible: null\n    });\n  }));\n  it('getReceiptById should fetch receipt from Firestore when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      data: 'mock data'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    var result = yield receiptsService.getReceiptById(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(result).toEqual(mockReceipt);\n    expect(getReceiptByIdApi).not.toHaveBeenCalled();\n  }));\n  it('getReceiptById should return null if receipt not found or not owned when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    mockDocSnapshot.exists.mockReturnValue(false);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    var result = yield receiptsService.getReceiptById(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(result).toBeNull();\n    expect(getReceiptByIdApi).not.toHaveBeenCalled();\n  }));\n  it('getReceiptById should fallback to API when Firebase fetch fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    getDoc.mockRejectedValue(mockError);\n    getReceiptByIdApi.mockResolvedValue({\n      id: 'api-id'\n    });\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield receiptsService.getReceiptById(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - getReceiptById');\n    expect(getReceiptByIdApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\n    expect(result).toEqual({\n      id: 'api-id'\n    });\n  }));\n  it('getReceiptById should call API when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    getReceiptByIdApi.mockResolvedValue({\n      id: 'api-id'\n    });\n    var result = yield receiptsService.getReceiptById(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).not.toHaveBeenCalled();\n    expect(getDoc).not.toHaveBeenCalled();\n    expect(getReceiptByIdApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\n    expect(result).toEqual({\n      id: 'api-id'\n    });\n  }));\n  it('createReceipt should add document to Firestore and upload image to Storage when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var expectedReceiptData = _objectSpread(_objectSpread({}, mockReceiptData), {}, {\n      userId: mockUserId,\n      createdAt: expect.any(Date)\n    });\n    addDoc.mockResolvedValue({\n      id: 'new-receipt-id'\n    });\n    uploadBytes.mockResolvedValue({\n      ref: mockStorageRef\n    });\n    getDownloadURL.mockResolvedValue('https://example.com/new-image.jpg');\n    var result = yield receiptsService.createReceipt(mockUserId, mockReceiptData, mockImageFile);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\n    expect(addDoc).toHaveBeenCalledWith(mockCollectionRef, _objectSpread(_objectSpread({}, expectedReceiptData), {}, {\n      imageUrl: 'https://example.com/new-image.jpg'\n    }));\n    expect(ref).toHaveBeenCalledWith(expect.any(Object), `receipt_images/${mockUserId}/${expect.any(String)}`);\n    expect(uploadBytes).toHaveBeenCalledWith(mockStorageRef, mockImageFile);\n    expect(getDownloadURL).toHaveBeenCalledWith(mockStorageRef);\n    expect(result).toEqual({\n      id: 'new-receipt-id'\n    });\n    expect(createReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('createReceipt should add document to Firestore without image when no imageFile is provided and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var expectedReceiptData = _objectSpread(_objectSpread({}, mockReceiptData), {}, {\n      userId: mockUserId,\n      createdAt: expect.any(Date)\n    });\n    addDoc.mockResolvedValue({\n      id: 'new-receipt-id'\n    });\n    var result = yield receiptsService.createReceipt(mockUserId, mockReceiptData, null);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\n    expect(addDoc).toHaveBeenCalledWith(mockCollectionRef, expectedReceiptData);\n    expect(ref).not.toHaveBeenCalled();\n    expect(uploadBytes).not.toHaveBeenCalled();\n    expect(getDownloadURL).not.toHaveBeenCalled();\n    expect(result).toEqual({\n      id: 'new-receipt-id'\n    });\n    expect(createReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('createReceipt should fallback to API when Firebase creation fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    addDoc.mockRejectedValue(mockError);\n    createReceiptApi.mockResolvedValue({\n      id: 'api-id'\n    });\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield receiptsService.createReceipt(mockUserId, mockReceiptData, mockImageFile);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\n    expect(addDoc).toHaveBeenCalled();\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - createReceipt');\n    expect(createReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptData, mockImageFile);\n    expect(result).toEqual({\n      id: 'api-id'\n    });\n  }));\n  it('createReceipt should call API when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    createReceiptApi.mockResolvedValue({\n      id: 'api-id'\n    });\n    var result = yield receiptsService.createReceipt(mockUserId, mockReceiptData, mockImageFile);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(collection).not.toHaveBeenCalled();\n    expect(addDoc).not.toHaveBeenCalled();\n    expect(ref).not.toHaveBeenCalled();\n    expect(uploadBytes).not.toHaveBeenCalled();\n    expect(getDownloadURL).not.toHaveBeenCalled();\n    expect(createReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptData, mockImageFile);\n    expect(result).toEqual({\n      id: 'api-id'\n    });\n  }));\n  it('updateReceipt should update document in Firestore and handle image upload/deletion when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: 'https://example.com/old-image.jpg'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    updateDoc.mockResolvedValue(undefined);\n    deleteObject.mockResolvedValue(undefined);\n    uploadBytes.mockResolvedValue({\n      ref: mockStorageRef\n    });\n    getDownloadURL.mockResolvedValue('https://example.com/new-image.jpg');\n    var result = yield receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, mockImageFile);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteObject).toHaveBeenCalled();\n    expect(ref).toHaveBeenCalledWith(expect.any(Object), `receipt_images/${mockUserId}/${expect.any(String)}`);\n    expect(uploadBytes).toHaveBeenCalledWith(mockStorageRef, mockImageFile);\n    expect(getDownloadURL).toHaveBeenCalledWith(mockStorageRef);\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, _objectSpread(_objectSpread({}, mockUpdateData), {}, {\n      imageUrl: 'https://example.com/new-image.jpg'\n    }));\n    expect(result).toBeUndefined();\n    expect(updateReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('updateReceipt should delete image if imageUrl is set to null and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: 'https://example.com/old-image.jpg'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    updateDoc.mockResolvedValue(undefined);\n    deleteObject.mockResolvedValue(undefined);\n    var result = yield receiptsService.updateReceipt(mockUserId, mockReceiptId, {\n      imageUrl: null\n    }, null);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteObject).toHaveBeenCalled();\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, {\n      imageUrl: null\n    });\n    expect(result).toBeUndefined();\n    expect(updateReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('updateReceipt should not delete image if imageUrl is not changed and no new image is provided and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: 'https://example.com/old-image.jpg'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    updateDoc.mockResolvedValue(undefined);\n    deleteObject.mockResolvedValue(undefined);\n    var result = yield receiptsService.updateReceipt(mockUserId, mockReceiptId, {\n      field: 'new value'\n    }, null);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteObject).not.toHaveBeenCalled();\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, {\n      field: 'new value'\n    });\n    expect(result).toBeUndefined();\n    expect(updateReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('updateReceipt should throw error if receipt not found or not owned when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    mockDocSnapshot.exists.mockReturnValue(false);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    handleFirebaseError.mockImplementation(function (error) {\n      throw error;\n    });\n    yield expect(receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, null)).rejects.toThrow('Receipt not found or unauthorized');\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(handleFirebaseError).toHaveBeenCalledWith(expect.any(Error), 'Receipt Service - updateReceipt');\n    expect(updateDoc).not.toHaveBeenCalled();\n    expect(deleteObject).not.toHaveBeenCalled();\n    expect(uploadBytes).not.toHaveBeenCalled();\n    expect(updateReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('updateReceipt should fallback to API when Firebase update fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: 'https://example.com/old-image.jpg'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    updateDoc.mockRejectedValue(mockError);\n    updateReceiptApi.mockResolvedValue(undefined);\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, null);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, mockUpdateData);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - updateReceipt');\n    expect(updateReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockUpdateData, null);\n    expect(result).toBeUndefined();\n  }));\n  it('updateReceipt should call API when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    updateReceiptApi.mockResolvedValue(undefined);\n    var result = yield receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, mockImageFile);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).not.toHaveBeenCalled();\n    expect(getDoc).not.toHaveBeenCalled();\n    expect(updateDoc).not.toHaveBeenCalled();\n    expect(deleteObject).not.toHaveBeenCalled();\n    expect(uploadBytes).not.toHaveBeenCalled();\n    expect(updateReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockUpdateData, mockImageFile);\n    expect(result).toBeUndefined();\n  }));\n  it('deleteReceipt should delete document from Firestore and image from Storage when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: 'https://example.com/old-image.jpg'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    deleteDoc.mockResolvedValue(undefined);\n    deleteObject.mockResolvedValue(undefined);\n    var result = yield receiptsService.deleteReceipt(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteObject).toHaveBeenCalled();\n    expect(result).toBeUndefined();\n    expect(deleteReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('deleteReceipt should delete document from Firestore without deleting image if no imageUrl and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: null\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    deleteDoc.mockResolvedValue(undefined);\n    deleteObject.mockResolvedValue(undefined);\n    var result = yield receiptsService.deleteReceipt(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteObject).not.toHaveBeenCalled();\n    expect(result).toBeUndefined();\n    expect(deleteReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('deleteReceipt should throw error if receipt not found or not owned when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    mockDocSnapshot.exists.mockReturnValue(false);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    handleFirebaseError.mockImplementation(function (error) {\n      throw error;\n    });\n    yield expect(receiptsService.deleteReceipt(mockUserId, mockReceiptId)).rejects.toThrow('Receipt not found or unauthorized');\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(handleFirebaseError).toHaveBeenCalledWith(expect.any(Error), 'Receipt Service - deleteReceipt');\n    expect(deleteDoc).not.toHaveBeenCalled();\n    expect(deleteObject).not.toHaveBeenCalled();\n    expect(deleteReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('deleteReceipt should fallback to API when Firebase deletion fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      imageUrl: 'https://example.com/old-image.jpg'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    deleteDoc.mockRejectedValue(mockError);\n    deleteReceiptApi.mockResolvedValue(undefined);\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield receiptsService.deleteReceipt(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - deleteReceipt');\n    expect(deleteReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\n    expect(result).toBeUndefined();\n  }));\n  it('deleteReceipt should call API when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    deleteReceiptApi.mockResolvedValue(undefined);\n    var result = yield receiptsService.deleteReceipt(mockUserId, mockReceiptId);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).not.toHaveBeenCalled();\n    expect(getDoc).not.toHaveBeenCalled();\n    expect(deleteDoc).not.toHaveBeenCalled();\n    expect(deleteObject).not.toHaveBeenCalled();\n    expect(deleteReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\n    expect(result).toBeUndefined();\n  }));\n  it('correctReceipt should update document in Firestore when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      data: 'old data'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    updateDoc.mockResolvedValue(undefined);\n    var result = yield receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, mockCorrectedData);\n    expect(result).toBeUndefined();\n    expect(correctReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('correctReceipt should throw error if receipt not found or not owned when feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    mockDocSnapshot.exists.mockReturnValue(false);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    handleFirebaseError.mockImplementation(function (error) {\n      throw error;\n    });\n    yield expect(receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData)).rejects.toThrow('Receipt not found or unauthorized');\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(handleFirebaseError).toHaveBeenCalledWith(expect.any(Error), 'Receipt Service - correctReceipt');\n    expect(updateDoc).not.toHaveBeenCalled();\n    expect(correctReceiptApi).not.toHaveBeenCalled();\n  }));\n  it('correctReceipt should fallback to API when Firebase update fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    var mockExistingReceipt = {\n      id: mockReceiptId,\n      userId: mockUserId,\n      data: 'old data'\n    };\n    mockDocSnapshot.exists.mockReturnValue(true);\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\n    getDoc.mockResolvedValue(mockDocSnapshot);\n    updateDoc.mockRejectedValue(mockError);\n    correctReceiptApi.mockResolvedValue(undefined);\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, mockCorrectedData);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - correctReceipt');\n    expect(correctReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockCorrectedData);\n    expect(result).toBeUndefined();\n  }));\n  it('correctReceipt should call API when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    correctReceiptApi.mockResolvedValue(undefined);\n    var result = yield receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(doc).not.toHaveBeenCalled();\n    expect(getDoc).not.toHaveBeenCalled();\n    expect(updateDoc).not.toHaveBeenCalled();\n    expect(correctReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockCorrectedData);\n    expect(result).toBeUndefined();\n  }));\n});","map":{"version":3,"names":["collection","doc","addDoc","updateDoc","deleteDoc","query","where","orderBy","getDocs","getDoc","ref","uploadBytes","deleteObject","getDownloadURL","isFeatureEnabled","startPerformanceTimer","stopPerformanceTimer","handleError","handleFirebaseError","getReceiptsApi","getReceiptByIdApi","createReceiptApi","updateReceiptApi","deleteReceiptApi","correctReceiptApi","receiptsService","jest","mock","describe","mockUserId","mockReceiptId","mockReceiptData","field","mockImageFile","File","type","mockUpdateData","mockCorrectedData","correctedField","mockError","Error","mockApiError","mockDocSnapshot","exists","fn","data","id","mockQuerySnapshot","docs","empty","size","forEach","mockDocRef","get","Promise","resolve","set","update","delete","mockCollectionRef","limit","startAfter","add","mockStorageRef","put","child","beforeEach","mockClear","mockReturnValue","mockResolvedValue","undefined","receipts","lastVisible","it","_asyncToGenerator","mockReceipts","mockLastVisible","mockQuerySnapshotWithData","map","callback","result","getReceipts","expect","toHaveBeenCalledWith","any","Object","toEqual","not","toHaveBeenCalled","mockRejectedValue","mockImplementation","mockReceipt","userId","getReceiptById","toBeNull","expectedReceiptData","_objectSpread","createdAt","Date","createReceipt","imageUrl","String","mockExistingReceipt","updateReceipt","toBeUndefined","error","rejects","toThrow","deleteReceipt","correctReceipt"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/receipts/__tests__/receipts.test.js"],"sourcesContent":["import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  getDocs,\r\n  getDoc,\r\n} from 'firebase/firestore'; // Assuming direct import from firebase/firestore\r\n\r\nimport {\r\n  ref,\r\n  uploadBytes,\r\n  deleteObject,\r\n  getDownloadURL // Assuming getDownloadURL is used\r\n} from 'firebase/storage'; // Assuming direct import from firebase/storage\r\n\r\nimport {\r\n  isFeatureEnabled,\r\n  startPerformanceTimer,\r\n  stopPerformanceTimer\r\n} from '@/core/config/featureFlags'; // Assuming direct import from featureFlags\r\n\r\nimport {\r\n  handleError,\r\n  handleFirebaseError\r\n} from '@/utils/errorHandler'; // Assuming direct import from errorHandler\r\n\r\n// Assuming API functions are imported from a separate module\r\nimport {\r\n  getReceiptsApi,\r\n  getReceiptByIdApi,\r\n  createReceiptApi,\r\n  updateReceiptApi,\r\n  deleteReceiptApi,\r\n  correctReceiptApi,\r\n} from '@/services/api/receipts'; // Assuming API functions are in this path\r\n\r\nimport receiptsService from '../services/receipts'; // Assuming the service is imported like this\r\n\r\n// Mock the necessary modules\r\njest.mock('firebase/firestore');\r\njest.mock('firebase/storage');\r\njest.mock('@/core/config/featureFlags');\r\njest.mock('@/utils/errorHandler');\r\njest.mock('@/services/api/receipts'); // Mock the API functions\r\njest.mock('axios'); // Mock axios if used directly in the service\r\n\r\ndescribe('Receipts Service Unit Tests', () => {\r\n  const mockUserId = 'test-user-id';\r\n  const mockReceiptId = 'test-receipt-id';\r\n  const mockReceiptData = { field: 'value' };\r\n  const mockImageFile = new File(['dummy content'], 'test.jpg', { type: 'image/jpeg' });\r\n  const mockUpdateData = { field: 'new value' };\r\n  const mockCorrectedData = { correctedField: 'new value' };\r\n  const mockError = new Error('Firestore error');\r\n  const mockApiError = new Error('API error');\r\n\r\n  // Mock the return values of chained Firestore methods\r\n  const mockDocSnapshot = {\r\n    exists: jest.fn(),\r\n    data: jest.fn(),\r\n    id: mockReceiptId,\r\n  };\r\n\r\n  const mockQuerySnapshot = {\r\n    docs: [],\r\n    empty: true,\r\n    size: 0,\r\n    forEach: jest.fn(),\r\n  };\r\n\r\n  const mockDocRef = {\r\n    get: jest.fn(() => Promise.resolve(mockDocSnapshot)),\r\n    set: jest.fn(() => Promise.resolve()),\r\n    update: jest.fn(() => Promise.resolve()),\r\n    delete: jest.fn(() => Promise.resolve()),\r\n    collection: jest.fn(),\r\n  };\r\n\r\n  const mockCollectionRef = {\r\n    doc: jest.fn(() => mockDocRef),\r\n    where: jest.fn(() => mockCollectionRef),\r\n    orderBy: jest.fn(() => mockCollectionRef),\r\n    limit: jest.fn(() => mockCollectionRef),\r\n    startAfter: jest.fn(() => mockCollectionRef),\r\n    get: jest.fn(() => Promise.resolve(mockQuerySnapshot)),\r\n    add: jest.fn(() => Promise.resolve(mockDocRef)),\r\n  };\r\n\r\n  // Mock the return values of chained Storage methods\r\n  const mockStorageRef = {\r\n    put: jest.fn(),\r\n    child: jest.fn(() => mockStorageRef),\r\n    delete: jest.fn(() => Promise.resolve()),\r\n    getDownloadURL: jest.fn(() => Promise.resolve('https://example.com/test-image.jpg')),\r\n  };\r\n\r\n\r\n  beforeEach(() => {\r\n    // Clear mocks before each test\r\n    collection.mockClear();\r\n    doc.mockClear();\r\n    addDoc.mockClear();\r\n    updateDoc.mockClear();\r\n    deleteDoc.mockClear();\r\n    query.mockClear();\r\n    where.mockClear();\r\n    orderBy.mockClear();\r\n    getDocs.mockClear();\r\n    getDoc.mockClear();\r\n    ref.mockClear();\r\n    uploadBytes.mockClear();\r\n    deleteObject.mockClear();\r\n    if (getDownloadURL) getDownloadURL.mockClear(); // Clear if imported\r\n    isFeatureEnabled.mockClear();\r\n    startPerformanceTimer.mockClear();\r\n    stopPerformanceTimer.mockClear();\r\n    handleError.mockClear();\r\n    handleFirebaseError.mockClear();\r\n    getReceiptsApi.mockClear();\r\n    getReceiptByIdApi.mockClear();\r\n    createReceiptApi.mockClear();\r\n    updateReceiptApi.mockClear();\r\n    deleteReceiptApi.mockClear();\r\n    correctReceiptApi.mockClear();\r\n    // Clear axios mocks if needed\r\n    // axios.get.mockClear();\r\n    // axios.post.mockClear();\r\n    // axios.put.mockClear();\r\n    // axios.delete.mockClear();\r\n\r\n\r\n    // Reset mock implementations for chained methods if needed\r\n    mockCollectionRef.doc.mockClear();\r\n    mockCollectionRef.where.mockClear();\r\n    mockCollectionRef.orderBy.mockClear();\r\n    mockCollectionRef.limit.mockClear();\r\n    mockCollectionRef.startAfter.mockClear();\r\n    mockCollectionRef.get.mockClear();\r\n    mockCollectionRef.add.mockClear();\r\n    mockDocRef.get.mockClear();\r\n    mockDocRef.set.mockClear();\r\n    mockDocRef.update.mockClear();\r\n    mockDocRef.delete.mockClear();\r\n    mockDocRef.collection.mockClear();\r\n    mockStorageRef.put.mockClear();\r\n    mockStorageRef.child.mockClear();\r\n    mockStorageRef.delete.mockClear();\r\n    mockStorageRef.getDownloadURL.mockClear();\r\n\r\n\r\n    // Mock the top-level Firestore functions\r\n    collection.mockReturnValue(mockCollectionRef);\r\n    doc.mockReturnValue(mockDocRef);\r\n    query.mockReturnValue(mockCollectionRef);\r\n    where.mockReturnValue(mockCollectionRef);\r\n    orderBy.mockReturnValue(mockCollectionRef);\r\n    getDocs.mockResolvedValue(mockQuerySnapshot); // Default to empty results\r\n    getDoc.mockResolvedValue(mockDocSnapshot); // Default to mock doc snapshot\r\n    addDoc.mockResolvedValue({ id: 'new-receipt-id' });\r\n    updateDoc.mockResolvedValue(undefined);\r\n    deleteDoc.mockResolvedValue(undefined);\r\n\r\n\r\n    // Mock the top-level Storage functions\r\n    ref.mockReturnValue(mockStorageRef);\r\n    uploadBytes.mockResolvedValue({ ref: mockStorageRef }); // Mock upload success\r\n    deleteObject.mockResolvedValue(undefined); // Mock delete success\r\n    if (getDownloadURL) getDownloadURL.mockResolvedValue('https://example.com/test-image.jpg'); // Mock getDownloadURL success\r\n\r\n\r\n    // Mock API function return values\r\n    getReceiptsApi.mockResolvedValue({ receipts: [], lastVisible: null });\r\n    getReceiptByIdApi.mockResolvedValue({ id: 'api-id' });\r\n    createReceiptApi.mockResolvedValue({ id: 'api-id' });\r\n    updateReceiptApi.mockResolvedValue(undefined);\r\n    deleteReceiptApi.mockResolvedValue(undefined);\r\n    correctReceiptApi.mockResolvedValue(undefined);\r\n\r\n\r\n    // Set default feature flag state\r\n    isFeatureEnabled.mockReturnValue(true); // Assume Firebase direct integration is enabled by default\r\n  });\r\n\r\n  // Add your test cases here based on the original file's tests\r\n  // Example test cases based on the error messages and common receipts flows:\r\n\r\n  it('getReceipts should fetch receipts from Firestore when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockReceipts = [{ id: 'r1' }, { id: 'r2' }];\r\n    const mockLastVisible = { id: 'r2' };\r\n    const mockQuerySnapshotWithData = {\r\n      docs: mockReceipts.map(data => ({ id: data.id, data: () => data })),\r\n      empty: false,\r\n      size: 2,\r\n      forEach: jest.fn(callback => mockReceipts.forEach(callback)),\r\n      docs: [{ id: 'r1', data: () => mockReceipts[0] }, { id: 'r2', data: () => mockReceipts[1] }],\r\n    };\r\n    mockQuerySnapshotWithData.docs[1].data = () => mockReceipts[1]; // Ensure data function exists\r\n    mockQuerySnapshotWithData.docs[1].id = 'r2'; // Ensure id exists\r\n    mockQuerySnapshotWithData.docs[1].exists = true; // Ensure exists exists\r\n\r\n    getDocs.mockResolvedValue(mockQuerySnapshotWithData);\r\n\r\n    const result = await receiptsService.getReceipts(mockUserId, {});\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\r\n    expect(query).toHaveBeenCalledWith(mockCollectionRef, where('userId', '==', mockUserId), orderBy('date', 'desc'));\r\n    expect(getDocs).toHaveBeenCalledWith(mockCollectionRef);\r\n    expect(result.receipts).toEqual(mockReceipts);\r\n    // expect(result.lastVisible).toEqual(mockLastVisible); // Check lastVisible if implemented\r\n    expect(getReceiptsApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('getReceipts should fallback to API when Firebase fetch fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    getDocs.mockRejectedValue(mockError);\r\n    getReceiptsApi.mockResolvedValue({ receipts: [{ id: 'api-r1' }], lastVisible: null });\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n\r\n    const result = await receiptsService.getReceipts(mockUserId, {});\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\r\n    expect(query).toHaveBeenCalledWith(mockCollectionRef, where('userId', '==', mockUserId), orderBy('date', 'desc'));\r\n    expect(getDocs).toHaveBeenCalledWith(mockCollectionRef);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - getReceipts');\r\n    expect(getReceiptsApi).toHaveBeenCalledWith(mockUserId, {});\r\n    expect(result).toEqual({ receipts: [{ id: 'api-r1' }], lastVisible: null });\r\n  });\r\n\r\n  it('getReceipts should call API when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    getReceiptsApi.mockResolvedValue({ receipts: [{ id: 'api-r1' }], lastVisible: null });\r\n\r\n    const result = await receiptsService.getReceipts(mockUserId, {});\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getDocs).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getReceiptsApi).toHaveBeenCalledWith(mockUserId, {});\r\n    expect(result).toEqual({ receipts: [{ id: 'api-r1' }], lastVisible: null });\r\n  });\r\n\r\n  it('getReceiptById should fetch receipt from Firestore when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockReceipt = { id: mockReceiptId, userId: mockUserId, data: 'mock data' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n\r\n    const result = await receiptsService.getReceiptById(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(result).toEqual(mockReceipt);\r\n    expect(getReceiptByIdApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('getReceiptById should return null if receipt not found or not owned when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    mockDocSnapshot.exists.mockReturnValue(false); // Receipt not found\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n\r\n    const result = await receiptsService.getReceiptById(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(result).toBeNull();\r\n    expect(getReceiptByIdApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('getReceiptById should fallback to API when Firebase fetch fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    getDoc.mockRejectedValue(mockError);\r\n    getReceiptByIdApi.mockResolvedValue({ id: 'api-id' });\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n\r\n    const result = await receiptsService.getReceiptById(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - getReceiptById');\r\n    expect(getReceiptByIdApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\r\n    expect(result).toEqual({ id: 'api-id' });\r\n  });\r\n\r\n  it('getReceiptById should call API when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    getReceiptByIdApi.mockResolvedValue({ id: 'api-id' });\r\n\r\n    const result = await receiptsService.getReceiptById(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getDoc).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getReceiptByIdApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\r\n    expect(result).toEqual({ id: 'api-id' });\r\n  });\r\n\r\n  it('createReceipt should add document to Firestore and upload image to Storage when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const expectedReceiptData = { ...mockReceiptData, userId: mockUserId, createdAt: expect.any(Date) };\r\n    addDoc.mockResolvedValue({ id: 'new-receipt-id' });\r\n    uploadBytes.mockResolvedValue({ ref: mockStorageRef });\r\n    getDownloadURL.mockResolvedValue('https://example.com/new-image.jpg');\r\n\r\n    const result = await receiptsService.createReceipt(mockUserId, mockReceiptData, mockImageFile);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\r\n    expect(addDoc).toHaveBeenCalledWith(mockCollectionRef, { ...expectedReceiptData, imageUrl: 'https://example.com/new-image.jpg' });\r\n    expect(ref).toHaveBeenCalledWith(expect.any(Object), `receipt_images/${mockUserId}/${expect.any(String)}`);\r\n    expect(uploadBytes).toHaveBeenCalledWith(mockStorageRef, mockImageFile);\r\n    expect(getDownloadURL).toHaveBeenCalledWith(mockStorageRef);\r\n    expect(result).toEqual({ id: 'new-receipt-id' });\r\n    expect(createReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('createReceipt should add document to Firestore without image when no imageFile is provided and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const expectedReceiptData = { ...mockReceiptData, userId: mockUserId, createdAt: expect.any(Date) };\r\n    addDoc.mockResolvedValue({ id: 'new-receipt-id' });\r\n\r\n    const result = await receiptsService.createReceipt(mockUserId, mockReceiptData, null);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\r\n    expect(addDoc).toHaveBeenCalledWith(mockCollectionRef, expectedReceiptData);\r\n    expect(ref).not.toHaveBeenCalled(); // Ensure Storage was not called\r\n    expect(uploadBytes).not.toHaveBeenCalled();\r\n    expect(getDownloadURL).not.toHaveBeenCalled();\r\n    expect(result).toEqual({ id: 'new-receipt-id' });\r\n    expect(createReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('createReceipt should fallback to API when Firebase creation fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    addDoc.mockRejectedValue(mockError);\r\n    createReceiptApi.mockResolvedValue({ id: 'api-id' });\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n\r\n    const result = await receiptsService.createReceipt(mockUserId, mockReceiptData, mockImageFile);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).toHaveBeenCalledWith(expect.any(Object), 'receipts');\r\n    expect(addDoc).toHaveBeenCalled();\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - createReceipt');\r\n    expect(createReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptData, mockImageFile);\r\n    expect(result).toEqual({ id: 'api-id' });\r\n  });\r\n\r\n  it('createReceipt should call API when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    createReceiptApi.mockResolvedValue({ id: 'api-id' });\r\n\r\n    const result = await receiptsService.createReceipt(mockUserId, mockReceiptData, mockImageFile);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(collection).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(addDoc).not.toHaveBeenCalled();\r\n    expect(ref).not.toHaveBeenCalled(); // Ensure Storage was not called\r\n    expect(uploadBytes).not.toHaveBeenCalled();\r\n    expect(getDownloadURL).not.toHaveBeenCalled();\r\n    expect(createReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptData, mockImageFile);\r\n    expect(result).toEqual({ id: 'api-id' });\r\n  });\r\n\r\n  it('updateReceipt should update document in Firestore and handle image upload/deletion when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: 'https://example.com/old-image.jpg' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    updateDoc.mockResolvedValue(undefined);\r\n    deleteObject.mockResolvedValue(undefined);\r\n    uploadBytes.mockResolvedValue({ ref: mockStorageRef });\r\n    getDownloadURL.mockResolvedValue('https://example.com/new-image.jpg');\r\n\r\n    const result = await receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, mockImageFile);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteObject).toHaveBeenCalled(); // Ensure old image is deleted\r\n    expect(ref).toHaveBeenCalledWith(expect.any(Object), `receipt_images/${mockUserId}/${expect.any(String)}`);\r\n    expect(uploadBytes).toHaveBeenCalledWith(mockStorageRef, mockImageFile);\r\n    expect(getDownloadURL).toHaveBeenCalledWith(mockStorageRef);\r\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, { ...mockUpdateData, imageUrl: 'https://example.com/new-image.jpg' });\r\n    expect(result).toBeUndefined();\r\n    expect(updateReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('updateReceipt should delete image if imageUrl is set to null and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: 'https://example.com/old-image.jpg' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    updateDoc.mockResolvedValue(undefined);\r\n    deleteObject.mockResolvedValue(undefined);\r\n\r\n    const result = await receiptsService.updateReceipt(mockUserId, mockReceiptId, { imageUrl: null }, null);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteObject).toHaveBeenCalled(); // Ensure old image is deleted\r\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, { imageUrl: null });\r\n    expect(result).toBeUndefined();\r\n    expect(updateReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('updateReceipt should not delete image if imageUrl is not changed and no new image is provided and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: 'https://example.com/old-image.jpg' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    updateDoc.mockResolvedValue(undefined);\r\n    deleteObject.mockResolvedValue(undefined); // Clear mock from previous tests\r\n\r\n    const result = await receiptsService.updateReceipt(mockUserId, mockReceiptId, { field: 'new value' }, null);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteObject).not.toHaveBeenCalled(); // Ensure old image is NOT deleted\r\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, { field: 'new value' });\r\n    expect(result).toBeUndefined();\r\n    expect(updateReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('updateReceipt should throw error if receipt not found or not owned when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    mockDocSnapshot.exists.mockReturnValue(false); // Receipt not found\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    handleFirebaseError.mockImplementation(error => { throw error; }); // Re-throw in test\r\n\r\n    await expect(receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, null)).rejects.toThrow('Receipt not found or unauthorized');\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(expect.any(Error), 'Receipt Service - updateReceipt');\r\n    expect(updateDoc).not.toHaveBeenCalled();\r\n    expect(deleteObject).not.toHaveBeenCalled();\r\n    expect(uploadBytes).not.toHaveBeenCalled();\r\n    expect(updateReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('updateReceipt should fallback to API when Firebase update fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: 'https://example.com/old-image.jpg' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    updateDoc.mockRejectedValue(mockError);\r\n    updateReceiptApi.mockResolvedValue(undefined);\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n\r\n    const result = await receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, null);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, mockUpdateData);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - updateReceipt');\r\n    expect(updateReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockUpdateData, null);\r\n    expect(result).toBeUndefined();\r\n  });\r\n\r\n  it('updateReceipt should call API when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    updateReceiptApi.mockResolvedValue(undefined);\r\n\r\n    const result = await receiptsService.updateReceipt(mockUserId, mockReceiptId, mockUpdateData, mockImageFile);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getDoc).not.toHaveBeenCalled();\r\n    expect(updateDoc).not.toHaveBeenCalled();\r\n    expect(deleteObject).not.toHaveBeenCalled();\r\n    expect(uploadBytes).not.toHaveBeenCalled();\r\n    expect(updateReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockUpdateData, mockImageFile);\r\n    expect(result).toBeUndefined();\r\n  });\r\n\r\n  it('deleteReceipt should delete document from Firestore and image from Storage when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: 'https://example.com/old-image.jpg' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    deleteDoc.mockResolvedValue(undefined);\r\n    deleteObject.mockResolvedValue(undefined);\r\n\r\n    const result = await receiptsService.deleteReceipt(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteObject).toHaveBeenCalled(); // Ensure image is deleted\r\n    expect(result).toBeUndefined();\r\n    expect(deleteReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('deleteReceipt should delete document from Firestore without deleting image if no imageUrl and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: null };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    deleteDoc.mockResolvedValue(undefined);\r\n    deleteObject.mockResolvedValue(undefined); // Clear mock from previous tests\r\n\r\n    const result = await receiptsService.deleteReceipt(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteObject).not.toHaveBeenCalled(); // Ensure image is NOT deleted\r\n    expect(result).toBeUndefined();\r\n    expect(deleteReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('deleteReceipt should throw error if receipt not found or not owned when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    mockDocSnapshot.exists.mockReturnValue(false); // Receipt not found\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    handleFirebaseError.mockImplementation(error => { throw error; }); // Re-throw in test\r\n\r\n    await expect(receiptsService.deleteReceipt(mockUserId, mockReceiptId)).rejects.toThrow('Receipt not found or unauthorized');\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(expect.any(Error), 'Receipt Service - deleteReceipt');\r\n    expect(deleteDoc).not.toHaveBeenCalled();\r\n    expect(deleteObject).not.toHaveBeenCalled();\r\n    expect(deleteReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('deleteReceipt should fallback to API when Firebase deletion fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, imageUrl: 'https://example.com/old-image.jpg' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    deleteDoc.mockRejectedValue(mockError);\r\n    deleteReceiptApi.mockResolvedValue(undefined);\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n\r\n    const result = await receiptsService.deleteReceipt(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(deleteDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - deleteReceipt');\r\n    expect(deleteReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\r\n    expect(result).toBeUndefined();\r\n  });\r\n\r\n  it('deleteReceipt should call API when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    deleteReceiptApi.mockResolvedValue(undefined);\r\n\r\n    const result = await receiptsService.deleteReceipt(mockUserId, mockReceiptId);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getDoc).not.toHaveBeenCalled();\r\n    expect(deleteDoc).not.toHaveBeenCalled();\r\n    expect(deleteObject).not.toHaveBeenCalled();\r\n    expect(deleteReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId);\r\n    expect(result).toBeUndefined();\r\n  });\r\n\r\n  it('correctReceipt should update document in Firestore when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, data: 'old data' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    updateDoc.mockResolvedValue(undefined);\r\n\r\n    const result = await receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, mockCorrectedData);\r\n    expect(result).toBeUndefined();\r\n    expect(correctReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n  it('correctReceipt should throw error if receipt not found or not owned when feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    mockDocSnapshot.exists.mockReturnValue(false); // Receipt not found\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    handleFirebaseError.mockImplementation(error => { throw error; }); // Re-throw in test\r\n\r\n    await expect(receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData)).rejects.toThrow('Receipt not found or unauthorized');\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(expect.any(Error), 'Receipt Service - correctReceipt');\r\n    expect(updateDoc).not.toHaveBeenCalled();\r\n    expect(correctReceiptApi).not.toHaveBeenCalled(); // Ensure API was not called\r\n  });\r\n\r\n\r\n  it('correctReceipt should fallback to API when Firebase update fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    const mockExistingReceipt = { id: mockReceiptId, userId: mockUserId, data: 'old data' };\r\n    mockDocSnapshot.exists.mockReturnValue(true);\r\n    mockDocSnapshot.data.mockReturnValue(mockExistingReceipt);\r\n    getDoc.mockResolvedValue(mockDocSnapshot);\r\n    updateDoc.mockRejectedValue(mockError);\r\n    correctReceiptApi.mockResolvedValue(undefined);\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n\r\n    const result = await receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).toHaveBeenCalledWith(expect.any(Object), 'receipts', mockReceiptId);\r\n    expect(getDoc).toHaveBeenCalledWith(mockDocRef);\r\n    expect(updateDoc).toHaveBeenCalledWith(mockDocRef, mockCorrectedData);\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Receipt Service - correctReceipt');\r\n    expect(correctReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockCorrectedData);\r\n    expect(result).toBeUndefined();\r\n  });\r\n\r\n  it('correctReceipt should call API when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    correctReceiptApi.mockResolvedValue(undefined);\r\n\r\n    const result = await receiptsService.correctReceipt(mockUserId, mockReceiptId, mockCorrectedData);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(doc).not.toHaveBeenCalled(); // Ensure Firebase was not called\r\n    expect(getDoc).not.toHaveBeenCalled();\r\n    expect(updateDoc).not.toHaveBeenCalled();\r\n    expect(correctReceiptApi).toHaveBeenCalledWith(mockUserId, mockReceiptId, mockCorrectedData);\r\n    expect(result).toBeUndefined();\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}