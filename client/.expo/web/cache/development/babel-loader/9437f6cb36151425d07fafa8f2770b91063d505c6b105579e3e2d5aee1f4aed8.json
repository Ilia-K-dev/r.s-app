{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';\nimport { useState, useEffect, useCallback } from 'react';\nimport { db } from \"../../../core/config/firebase\";\nimport { useAuth } from \"../../../features/auth/hooks/useAuth\";\nimport { useToast } from \"../../../shared/hooks/useToast\";\nimport { localCache } from \"../../../shared/services/storage\";\nimport { logger } from \"../../../shared/utils/logger\";\nvar DEFAULT_SETTINGS = {\n  notifications: {\n    email: true,\n    push: false,\n    receiptUploads: true,\n    monthlyReports: true,\n    budgetAlerts: true\n  },\n  display: {\n    theme: 'light',\n    currency: 'USD',\n    dateFormat: 'MM/DD/YYYY',\n    language: 'en'\n  },\n  receipts: {\n    defaultCategory: null,\n    autoCategories: true,\n    saveImages: true,\n    parseItems: true\n  },\n  reports: {\n    defaultDateRange: '30d',\n    defaultGrouping: 'day',\n    showBudget: true,\n    charts: {\n      preferredType: 'bar',\n      colorScheme: 'default'\n    }\n  },\n  categories: {\n    showInactive: false,\n    sortBy: 'name',\n    budgetWarningThreshold: 80\n  },\n  privacy: {\n    shareAnalytics: true,\n    storageConsent: true\n  }\n};\nexport var useSettings = function useSettings() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var _useToast = useToast(),\n    showToast = _useToast.showToast;\n  var _useState = useState(DEFAULT_SETTINGS),\n    _useState2 = _slicedToArray(_useState, 2),\n    settings = _useState2[0],\n    setSettings = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var fetchSettings = useCallback(_asyncToGenerator(function* () {\n    if (!user) return;\n    try {\n      setLoading(true);\n      setError(null);\n      var cacheKey = `settings_${user.uid}`;\n      var cachedSettings = localCache.get(cacheKey);\n      if (cachedSettings) {\n        setSettings(cachedSettings);\n        setLoading(false);\n        return;\n      }\n      var settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\n      var settingsDoc = yield getDoc(settingsRef);\n      if (settingsDoc.exists()) {\n        var userSettings = settingsDoc.data();\n        setSettings(function (prevSettings) {\n          return _objectSpread(_objectSpread({}, prevSettings), userSettings);\n        });\n        localCache.set(cacheKey, userSettings, 30 * 60 * 1000);\n      } else {\n        yield setDoc(settingsRef, DEFAULT_SETTINGS);\n      }\n    } catch (err) {\n      setError('Failed to load settings');\n      logger.error('Error fetching settings:', err);\n      showToast('Failed to load settings', 'error');\n    } finally {\n      setLoading(false);\n    }\n  }), [user, showToast]);\n  var updateSettings = function () {\n    var _ref2 = _asyncToGenerator(function* (newSettings) {\n      var section = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (!user) return;\n      try {\n        var settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\n        var updatedSettings = section ? _objectSpread(_objectSpread({}, settings), {}, _defineProperty({}, section, _objectSpread(_objectSpread({}, settings[section]), newSettings))) : _objectSpread(_objectSpread({}, settings), newSettings);\n        yield updateDoc(settingsRef, updatedSettings);\n        setSettings(updatedSettings);\n        localCache.set(`settings_${user.uid}`, updatedSettings, 30 * 60 * 1000);\n        showToast('Settings updated successfully', 'success');\n      } catch (err) {\n        logger.error('Error updating settings:', err);\n        showToast('Failed to update settings', 'error');\n        throw err;\n      }\n    });\n    return function updateSettings(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var resetSettings = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var section = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      try {\n        var resetValues = section ? _defineProperty({}, section, DEFAULT_SETTINGS[section]) : DEFAULT_SETTINGS;\n        yield updateSettings(resetValues);\n        showToast('Settings reset successfully', 'success');\n      } catch (err) {\n        logger.error('Error resetting settings:', err);\n        showToast('Failed to reset settings', 'error');\n      }\n    });\n    return function resetSettings() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getSetting = function getSetting(path) {\n    try {\n      return path.split('.').reduce(function (obj, key) {\n        return obj[key];\n      }, settings);\n    } catch (err) {\n      logger.error('Error getting setting:', path, err);\n      return null;\n    }\n  };\n  var exportSettings = function exportSettings() {\n    try {\n      var settingsJson = JSON.stringify(settings, null, 2);\n      var blob = new Blob([settingsJson], {\n        type: 'application/json'\n      });\n      var url = URL.createObjectURL(blob);\n      var link = document.createElement('a');\n      link.href = url;\n      link.download = 'receipt-scanner-settings.json';\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      logger.error('Error exporting settings:', err);\n      showToast('Failed to export settings', 'error');\n    }\n  };\n  var importSettings = function () {\n    var _ref5 = _asyncToGenerator(function* (file) {\n      try {\n        var reader = new FileReader();\n        reader.onload = function () {\n          var _ref6 = _asyncToGenerator(function* (e) {\n            try {\n              var importedSettings = JSON.parse(e.target.result);\n              yield updateSettings(importedSettings);\n              showToast('Settings imported successfully', 'success');\n            } catch (err) {\n              throw new Error('Invalid settings file');\n            }\n          });\n          return function (_x3) {\n            return _ref6.apply(this, arguments);\n          };\n        }();\n        reader.readAsText(file);\n      } catch (err) {\n        logger.error('Error importing settings:', err);\n        showToast('Failed to import settings', 'error');\n      }\n    });\n    return function importSettings(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    if (user) {\n      fetchSettings();\n    }\n  }, [user, fetchSettings]);\n  return {\n    settings: settings,\n    loading: loading,\n    error: error,\n    updateSettings: updateSettings,\n    resetSettings: resetSettings,\n    getSetting: getSetting,\n    exportSettings: exportSettings,\n    importSettings: importSettings\n  };\n};\nexport default useSettings;","map":{"version":3,"names":["doc","getDoc","setDoc","updateDoc","useState","useEffect","useCallback","db","useAuth","useToast","localCache","logger","DEFAULT_SETTINGS","notifications","email","push","receiptUploads","monthlyReports","budgetAlerts","display","theme","currency","dateFormat","language","receipts","defaultCategory","autoCategories","saveImages","parseItems","reports","defaultDateRange","defaultGrouping","showBudget","charts","preferredType","colorScheme","categories","showInactive","sortBy","budgetWarningThreshold","privacy","shareAnalytics","storageConsent","useSettings","_useAuth","user","_useToast","showToast","_useState","_useState2","_slicedToArray","settings","setSettings","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","fetchSettings","_asyncToGenerator","cacheKey","uid","cachedSettings","get","settingsRef","settingsDoc","exists","userSettings","data","prevSettings","_objectSpread","set","err","updateSettings","_ref2","newSettings","section","arguments","length","undefined","updatedSettings","_defineProperty","_x","apply","resetSettings","_ref3","resetValues","getSetting","path","split","reduce","obj","key","exportSettings","settingsJson","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","importSettings","_ref5","file","reader","FileReader","onload","_ref6","e","importedSettings","parse","target","result","Error","_x3","readAsText","_x2"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/settings/hooks/useSettings.js"],"sourcesContent":["import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore'; //correct\r\nimport { useState, useEffect, useCallback } from 'react'; //correct\n\r\nimport { db } from '../../../core/config/firebase'; //correct\r\nimport { useAuth } from '../../../features/auth/hooks/useAuth'; //correct\r\nimport { useToast } from '../../../shared/hooks/useToast'; //correct\r\nimport { localCache } from '../../../shared/services/storage'; //correct\r\nimport { logger } from '../../../shared/utils/logger'; //correct\r\n\r\nconst DEFAULT_SETTINGS = {\r\n  notifications: {\r\n    email: true,\r\n    push: false,\r\n    receiptUploads: true,\r\n    monthlyReports: true,\r\n    budgetAlerts: true,\r\n  },\r\n  display: {\r\n    theme: 'light',\r\n    currency: 'USD',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    language: 'en',\r\n  },\r\n  receipts: {\r\n    defaultCategory: null,\r\n    autoCategories: true,\r\n    saveImages: true,\r\n    parseItems: true,\r\n  },\r\n  reports: {\r\n    defaultDateRange: '30d',\r\n    defaultGrouping: 'day',\r\n    showBudget: true,\r\n    charts: {\r\n      preferredType: 'bar',\r\n      colorScheme: 'default',\r\n    },\r\n  },\r\n  categories: {\r\n    showInactive: false,\r\n    sortBy: 'name',\r\n    budgetWarningThreshold: 80, // percentage\r\n  },\r\n  privacy: {\r\n    shareAnalytics: true,\r\n    storageConsent: true,\r\n  },\r\n};\r\n\r\nexport const useSettings = () => {\r\n  const { user } = useAuth();\r\n  const { showToast } = useToast();\r\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch user settings\r\n  const fetchSettings = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Check cache first\r\n      const cacheKey = `settings_${user.uid}`;\r\n      const cachedSettings = localCache.get(cacheKey);\r\n\r\n      if (cachedSettings) {\r\n        setSettings(cachedSettings);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Fetch from Firestore\r\n      const settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\r\n      const settingsDoc = await getDoc(settingsRef);\r\n\r\n      if (settingsDoc.exists()) {\r\n        const userSettings = settingsDoc.data();\r\n        setSettings(prevSettings => ({\r\n          ...prevSettings,\r\n          ...userSettings,\r\n        }));\r\n\r\n        // Cache the settings\r\n        localCache.set(cacheKey, userSettings, 30 * 60 * 1000); // Cache for 30 minutes\r\n      } else {\r\n        // Initialize default settings for new user\r\n        await setDoc(settingsRef, DEFAULT_SETTINGS);\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to load settings');\r\n      logger.error('Error fetching settings:', err);\r\n      showToast('Failed to load settings', 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, showToast]);\r\n\r\n  // Update settings\r\n  const updateSettings = async (newSettings, section = null) => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      const settingsRef = doc(db, 'users', user.uid, 'settings', 'preferences');\r\n      const updatedSettings = section\r\n        ? {\r\n            ...settings,\r\n            [section]: {\r\n              ...settings[section],\r\n              ...newSettings,\r\n            },\r\n          }\r\n        : {\r\n            ...settings,\r\n            ...newSettings,\r\n          };\r\n\r\n      await updateDoc(settingsRef, updatedSettings);\r\n      setSettings(updatedSettings);\r\n\r\n      // Update cache\r\n      localCache.set(`settings_${user.uid}`, updatedSettings, 30 * 60 * 1000);\r\n\r\n      showToast('Settings updated successfully', 'success');\r\n    } catch (err) {\r\n      logger.error('Error updating settings:', err);\r\n      showToast('Failed to update settings', 'error');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Reset settings to default\r\n  const resetSettings = async (section = null) => {\r\n    try {\r\n      const resetValues = section ? { [section]: DEFAULT_SETTINGS[section] } : DEFAULT_SETTINGS;\r\n\r\n      await updateSettings(resetValues);\r\n      showToast('Settings reset successfully', 'success');\r\n    } catch (err) {\r\n      logger.error('Error resetting settings:', err);\r\n      showToast('Failed to reset settings', 'error');\r\n    }\r\n  };\r\n\r\n  // Get a specific setting value\r\n  const getSetting = path => {\r\n    try {\r\n      return path.split('.').reduce((obj, key) => obj[key], settings);\r\n    } catch (err) {\r\n      logger.error('Error getting setting:', path, err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Export settings\r\n  const exportSettings = () => {\r\n    try {\r\n      const settingsJson = JSON.stringify(settings, null, 2);\r\n      const blob = new Blob([settingsJson], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'receipt-scanner-settings.json';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.remove();\r\n      URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      logger.error('Error exporting settings:', err);\r\n      showToast('Failed to export settings', 'error');\r\n    }\r\n  };\r\n\r\n  // Import settings\r\n  const importSettings = async file => {\r\n    try {\r\n      const reader = new FileReader();\r\n      reader.onload = async e => {\r\n        try {\r\n          const importedSettings = JSON.parse(e.target.result);\r\n          await updateSettings(importedSettings);\r\n          showToast('Settings imported successfully', 'success');\r\n        } catch (err) {\r\n          throw new Error('Invalid settings file');\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    } catch (err) {\r\n      logger.error('Error importing settings:', err);\r\n      showToast('Failed to import settings', 'error');\r\n    }\r\n  };\r\n\r\n  // Load settings on mount and when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchSettings();\r\n    }\r\n  }, [user, fetchSettings]);\r\n\r\n  return {\r\n    settings,\r\n    loading,\r\n    error,\r\n    updateSettings,\r\n    resetSettings,\r\n    getSetting,\r\n    exportSettings,\r\n    importSettings,\r\n  };\r\n};\r\n\r\nexport default useSettings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}