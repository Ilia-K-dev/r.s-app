{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { getSpendingByCategory, clearUserCache, generateReport } from \"../services/analyticsService\";\nimport { isFeatureEnabled, startPerformanceTimer, stopPerformanceTimer } from '@/core/config/featureFlags';\nimport { handleError, handleFirebaseError } from '@/utils/errorHandler';\njest.mock(\"../services/analyticsService\");\njest.mock('@/core/config/featureFlags');\njest.mock('@/utils/errorHandler');\njest.mock('axios');\njest.mock('@/utils/indexedDbCache', function () {\n  var indexedDbCacheModule = {\n    getCache: jest.fn(),\n    setCache: jest.fn(),\n    clearCache: jest.fn()\n  };\n  return indexedDbCacheModule;\n});\nimport * as indexedDbCacheModule from '@/utils/indexedDbCache';\ndescribe('Analytics Service Unit Tests', function () {\n  var mockUserId = 'test-user-id';\n  var mockPeriod = 'month';\n  var mockCachedData = {\n    category: 'mock',\n    amount: 100\n  };\n  var mockFirebaseData = [{\n    category: 'firebase',\n    amount: 200\n  }];\n  var mockApiData = {\n    category: 'api',\n    amount: 300\n  };\n  var mockError = new Error('Firestore error');\n  var mockApiError = new Error('API error');\n  var mockReportType = 'spending';\n  beforeEach(function () {\n    getSpendingByCategory.mockClear();\n    clearUserCache.mockClear();\n    generateReport.mockClear();\n    isFeatureEnabled.mockClear();\n    startPerformanceTimer.mockClear();\n    stopPerformanceTimer.mockClear();\n    handleError.mockClear();\n    handleFirebaseError.mockClear();\n    indexedDbCacheModule.getCache.mockClear();\n    indexedDbCacheModule.setCache.mockClear();\n    indexedDbCacheModule.clearCache.mockClear();\n    isFeatureEnabled.mockReturnValue(true);\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\n  });\n  it('getSpendingByCategory should return cached data if available and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    indexedDbCacheModule.getCache.mockResolvedValue(mockCachedData);\n    var result = yield getSpendingByCategory(mockUserId, mockPeriod);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\n    expect(result).toEqual(mockCachedData);\n  }));\n  it('getSpendingByCategory should fetch data, calculate, and cache if no cached data and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\n    indexedDbCacheModule.setCache.mockResolvedValue(undefined);\n    var result = yield getSpendingByCategory(mockUserId, mockPeriod);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\n    expect(indexedDbCacheModule.setCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`, expect.any(Object));\n  }));\n  it('getSpendingByCategory should fallback to API if Firebase fetch fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\n    axios.get.mockResolvedValue({\n      data: mockApiData\n    });\n    handleFirebaseError.mockImplementation(function () {});\n    var result = yield getSpendingByCategory(mockUserId, mockPeriod);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Analytics Service - getSpendingByCategory');\n    expect(axios.get).toHaveBeenCalled();\n  }));\n  it('getSpendingByCategory should call global errorHandler if API fallback fails and feature is enabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(true);\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\n    axios.get.mockRejectedValue(mockApiError);\n    handleFirebaseError.mockImplementation(function () {});\n    handleError.mockImplementation(function (error) {\n      throw error;\n    });\n    yield expect(getSpendingByCategory(mockUserId, mockPeriod)).rejects.toThrow('API error');\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Analytics Service - getSpendingByCategory');\n    expect(axios.get).toHaveBeenCalled();\n    expect(handleError).toHaveBeenCalledWith(mockApiError, 'Analytics Service - getSpendingByCategory', 'firebaseDirectIntegration');\n  }));\n  it('getSpendingByCategory should call API directly when feature is disabled', _asyncToGenerator(function* () {\n    isFeatureEnabled.mockReturnValue(false);\n    axios.get.mockResolvedValue({\n      data: mockApiData\n    });\n    var result = yield getSpendingByCategory(mockUserId, mockPeriod);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(indexedDbCacheModule.getCache).not.toHaveBeenCalled();\n    expect(axios.get).toHaveBeenCalled();\n    expect(indexedDbCacheModule.setCache).not.toHaveBeenCalled();\n  }));\n  it('clearUserCache should call clearCache for relevant keys', _asyncToGenerator(function* () {\n    yield clearUserCache(mockUserId);\n    expect(indexedDbCacheModule.clearCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_default_default_default`);\n    expect(indexedDbCacheModule.clearCache).toHaveBeenCalledWith(`${mockUserId}_monthlySpending_default_default_default`);\n  }));\n  it('generateReport should always call API', _asyncToGenerator(function* () {\n    var mockOptions = {\n      period: 'year'\n    };\n    axios.post.mockResolvedValue({\n      data: 'report data'\n    });\n    var result = yield generateReport(mockUserId, mockReportType, mockOptions);\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(axios.post).toHaveBeenCalledWith(`${API_URL}/api/analytics/generate-report`, {\n      userId: mockUserId,\n      reportType: mockReportType,\n      options: mockOptions\n    });\n    expect(result).toEqual('report data');\n  }));\n  it('generateReport should call global errorHandler on failure', _asyncToGenerator(function* () {\n    var mockOptions = {\n      period: 'year'\n    };\n    axios.post.mockRejectedValue(mockApiError);\n    handleError.mockImplementation(function (error) {\n      throw error;\n    });\n    yield expect(generateReport(mockUserId, mockReportType, mockOptions)).rejects.toThrow('API error');\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\n    expect(axios.post).toHaveBeenCalledWith(`${API_URL}/api/analytics/generate-report`, {\n      userId: mockUserId,\n      reportType: mockReportType,\n      options: mockOptions\n    });\n    expect(handleError).toHaveBeenCalledWith(mockApiError, 'Analytics Service - generateReport', 'firebaseDirectIntegration');\n  }));\n});","map":{"version":3,"names":["getSpendingByCategory","clearUserCache","generateReport","isFeatureEnabled","startPerformanceTimer","stopPerformanceTimer","handleError","handleFirebaseError","jest","mock","indexedDbCacheModule","getCache","fn","setCache","clearCache","describe","mockUserId","mockPeriod","mockCachedData","category","amount","mockFirebaseData","mockApiData","mockError","Error","mockApiError","mockReportType","beforeEach","mockClear","mockReturnValue","mockResolvedValue","it","_asyncToGenerator","result","expect","toHaveBeenCalledWith","toEqual","undefined","any","Object","axios","get","data","mockImplementation","toHaveBeenCalled","mockRejectedValue","error","rejects","toThrow","not","mockOptions","period","post","API_URL","userId","reportType","options"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/__tests__/analyticsService.test.js"],"sourcesContent":["import {\r\n  getSpendingByCategory,\r\n  clearUserCache,\r\n  generateReport\r\n} from '../services/analyticsService'; // Assuming direct import of service functions\r\n\r\nimport {\r\n  isFeatureEnabled,\r\n  startPerformanceTimer,\r\n  stopPerformanceTimer\r\n} from '@/core/config/featureFlags'; // Assuming direct import from featureFlags\r\n\r\nimport {\r\n  handleError,\r\n  handleFirebaseError\r\n} from '@/utils/errorHandler'; // Assuming direct import from errorHandler\r\n\r\n// Mock the necessary modules\r\njest.mock('../services/analyticsService'); // Mock the service itself\r\njest.mock('@/core/config/featureFlags');\r\njest.mock('@/utils/errorHandler');\r\njest.mock('axios');\r\n// Define the indexedDbCache mock directly within the jest.mock call's factory function\r\njest.mock('@/utils/indexedDbCache', () => {\r\n  const indexedDbCacheModule = {\r\n    getCache: jest.fn(),\r\n    setCache: jest.fn(),\r\n    clearCache: jest.fn(),\r\n  };\r\n  return indexedDbCacheModule;\r\n});\r\n\r\n// Import the mocked indexedDbCacheModule\r\nimport * as indexedDbCacheModule from '@/utils/indexedDbCache';\r\n\r\n\r\ndescribe('Analytics Service Unit Tests', () => {\r\n  const mockUserId = 'test-user-id';\r\n  const mockPeriod = 'month';\r\n  const mockCachedData = { category: 'mock', amount: 100 };\r\n  const mockFirebaseData = [{ category: 'firebase', amount: 200 }];\r\n  const mockApiData = { category: 'api', amount: 300 };\r\n  const mockError = new Error('Firestore error');\r\n  const mockApiError = new Error('API error');\r\n  const mockReportType = 'spending';\r\n\r\n  beforeEach(() => {\r\n    // Clear mocks before each test\r\n    getSpendingByCategory.mockClear();\r\n    clearUserCache.mockClear();\r\n    generateReport.mockClear();\r\n    isFeatureEnabled.mockClear();\r\n    startPerformanceTimer.mockClear();\r\n    stopPerformanceTimer.mockClear();\r\n    handleError.mockClear();\r\n    handleFirebaseError.mockClear();\r\n    indexedDbCacheModule.getCache.mockClear();\r\n    indexedDbCacheModule.setCache.mockClear();\r\n    indexedDbCacheModule.clearCache.mockClear();\r\n    // Clear axios mocks if needed, assuming they are used in the service\r\n    // axios.get.mockClear();\r\n    // axios.post.mockClear();\r\n\r\n\r\n    // Set default mock return values\r\n    isFeatureEnabled.mockReturnValue(true); // Assume feature is enabled by default\r\n    indexedDbCacheModule.getCache.mockResolvedValue(null); // Assume no cached data by default\r\n    // Mock Firebase functions used in the service if they are not directly imported and mocked\r\n    // e.g., firestore.collection, firestore.getDocs, etc.\r\n    // Since the service is mocked, these might not be called directly in the tests,\r\n    // but if they are used in the actual service implementation, their mocks from firebaseMocks.js will be used.\r\n  });\r\n\r\n  // Add your test cases here based on the original file's tests\r\n  // Example test cases based on the error messages and common analytics flows:\r\n\r\n  it('getSpendingByCategory should return cached data if available and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    indexedDbCacheModule.getCache.mockResolvedValue(mockCachedData);\r\n\r\n    const result = await getSpendingByCategory(mockUserId, mockPeriod);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\r\n    expect(result).toEqual(mockCachedData);\r\n    // Ensure Firebase and API are not called\r\n    // expect(firestore.getDocs).not.toHaveBeenCalled();\r\n    // expect(axios.get).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('getSpendingByCategory should fetch data, calculate, and cache if no cached data and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\r\n    // Mock Firebase fetch if used in the service\r\n    // firestore.getDocs.mockResolvedValue({ docs: mockFirebaseData.map(data => ({ data: () => data })) });\r\n    indexedDbCacheModule.setCache.mockResolvedValue(undefined); // Successful cache set\r\n\r\n    const result = await getSpendingByCategory(mockUserId, mockPeriod);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\r\n    // expect(firestore.getDocs).toHaveBeenCalled(); // Ensure Firebase was called\r\n    // expect(calculateSpendingByCategory).toHaveBeenCalledWith(mockFirebaseData); // Assuming a calculate function exists\r\n    expect(indexedDbCacheModule.setCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`, expect.any(Object)); // Check if data was cached\r\n    // expect(result).toEqual(calculatedData); // Expect calculated data\r\n    // expect(axios.get).not.toHaveBeenCalled(); // Ensure API is not called\r\n  });\r\n\r\n  it('getSpendingByCategory should fallback to API if Firebase fetch fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\r\n    // Mock Firebase fetch failure\r\n    // firestore.getDocs.mockRejectedValue(mockError);\r\n    axios.get.mockResolvedValue({ data: mockApiData }); // Mock API success\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing in test\r\n\r\n    const result = await getSpendingByCategory(mockUserId, mockPeriod);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\r\n    // expect(firestore.getDocs).toHaveBeenCalled(); // Ensure Firebase was called\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Analytics Service - getSpendingByCategory'); // Ensure Firebase error was handled\r\n    expect(axios.get).toHaveBeenCalled(); // Ensure API was called\r\n    // expect(calculateSpendingByCategory).toHaveBeenCalledWith(mockApiData); // Assuming calculation on API data\r\n    // expect(result).toEqual(calculatedApiData); // Expect calculated API data\r\n    // expect(indexedDbCacheModule.setCache).toHaveBeenCalled(); // Ensure data was cached\r\n  });\r\n\r\n  it('getSpendingByCategory should call global errorHandler if API fallback fails and feature is enabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(true);\r\n    indexedDbCacheModule.getCache.mockResolvedValue(null);\r\n    // Mock Firebase fetch failure\r\n    // firestore.getDocs.mockRejectedValue(mockError);\r\n    axios.get.mockRejectedValue(mockApiError); // Mock API failure\r\n    handleFirebaseError.mockImplementation(() => {}); // Prevent re-throwing Firebase error\r\n    handleError.mockImplementation(error => { throw error; }); // Re-throw API error in test\r\n\r\n    await expect(getSpendingByCategory(mockUserId, mockPeriod)).rejects.toThrow('API error');\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(indexedDbCacheModule.getCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_${mockPeriod}_default_default`);\r\n    // expect(firestore.getDocs).toHaveBeenCalled(); // Ensure Firebase was called\r\n    expect(handleFirebaseError).toHaveBeenCalledWith(mockError, 'Analytics Service - getSpendingByCategory'); // Ensure Firebase error was handled\r\n    expect(axios.get).toHaveBeenCalled(); // Ensure API was called\r\n    expect(handleError).toHaveBeenCalledWith(mockApiError, 'Analytics Service - getSpendingByCategory', 'firebaseDirectIntegration'); // Ensure API error was handled\r\n    // expect(indexedDbCacheModule.setCache).not.toHaveBeenCalled(); // Ensure data was not cached on failure\r\n  });\r\n\r\n\r\n  it('getSpendingByCategory should call API directly when feature is disabled', async () => {\r\n    isFeatureEnabled.mockReturnValue(false);\r\n    axios.get.mockResolvedValue({ data: mockApiData });\r\n\r\n    const result = await getSpendingByCategory(mockUserId, mockPeriod);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    expect(indexedDbCacheModule.getCache).not.toHaveBeenCalled(); // Ensure cache is not checked\r\n    // expect(firestore.getDocs).not.toHaveBeenCalled(); // Ensure Firebase is not called\r\n    expect(axios.get).toHaveBeenCalled(); // Ensure API was called\r\n    // expect(calculateSpendingByCategory).toHaveBeenCalledWith(mockApiData); // Assuming calculation on API data\r\n    // expect(result).toEqual(calculatedApiData); // Expect calculated API data\r\n    expect(indexedDbCacheModule.setCache).not.toHaveBeenCalled(); // Ensure data is not cached\r\n  });\r\n\r\n  it('clearUserCache should call clearCache for relevant keys', async () => {\r\n    await clearUserCache(mockUserId);\r\n\r\n    expect(indexedDbCacheModule.clearCache).toHaveBeenCalledWith(`${mockUserId}_spendingByCategory_default_default_default`);\r\n    expect(indexedDbCacheModule.clearCache).toHaveBeenCalledWith(`${mockUserId}_monthlySpending_default_default_default`);\r\n    // Add expectations for other cache keys if they exist in the service\r\n  });\r\n\r\n  it('generateReport should always call API', async () => {\r\n    const mockOptions = { period: 'year' };\r\n    axios.post.mockResolvedValue({ data: 'report data' });\r\n\r\n    const result = await generateReport(mockUserId, mockReportType, mockOptions);\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration'); // Still checks flag, but logic is bypassed\r\n    // expect(firestore.collection).not.toHaveBeenCalled(); // Ensure Firebase is not called\r\n    expect(axios.post).toHaveBeenCalledWith(`${API_URL}/api/analytics/generate-report`, {\r\n      userId: mockUserId,\r\n      reportType: mockReportType,\r\n      options: mockOptions,\r\n    });\r\n    expect(result).toEqual('report data');\r\n  });\r\n\r\n  it('generateReport should call global errorHandler on failure', async () => {\r\n    const mockOptions = { period: 'year' };\r\n    axios.post.mockRejectedValue(mockApiError);\r\n    handleError.mockImplementation(error => { throw error; }); // Re-throw in test\r\n\r\n    await expect(generateReport(mockUserId, mockReportType, mockOptions)).rejects.toThrow('API error');\r\n\r\n    expect(isFeatureEnabled).toHaveBeenCalledWith('firebaseDirectIntegration');\r\n    // expect(firestore.collection).not.toHaveBeenCalled(); // Ensure Firebase is not called\r\n    expect(axios.post).toHaveBeenCalledWith(`${API_URL}/api/analytics/generate-report`, {\r\n      userId: mockUserId,\r\n      reportType: mockReportType,\r\n      options: mockOptions,\r\n    });\r\n    expect(handleError).toHaveBeenCalledWith(mockApiError, 'Analytics Service - generateReport', 'firebaseDirectIntegration');\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}