{"ast":null,"code":"import { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport Constants from 'expo-constants';\nfunction logFirebaseStatus(message) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(`[Firebase] ${message}`, data);\n}\nvar firebaseConfig = {\n  apiKey: Constants.manifest.extra.firebase.apiKey,\n  authDomain: Constants.manifest.extra.firebase.authDomain,\n  projectId: Constants.manifest.extra.firebase.projectId,\n  storageBucket: Constants.manifest.extra.firebase.storageBucket,\n  messagingSenderId: Constants.manifest.extra.firebase.messagingSenderId,\n  appId: Constants.manifest.extra.firebase.appId,\n  measurementId: Constants.manifest.extra.firebase.measurementId\n};\nvar app;\nvar auth;\nvar db;\nvar storage;\ntry {\n  if (!getApps().length) {\n    logFirebaseStatus(\"Initializing Firebase app...\");\n    app = initializeApp(firebaseConfig);\n    logFirebaseStatus(\"Firebase app initialized successfully\");\n  } else {\n    logFirebaseStatus(\"Firebase app already initialized\");\n    app = getApps()[0];\n  }\n  auth = getAuth(app);\n  db = getFirestore(app);\n  storage = getStorage(app);\n  logFirebaseStatus(\"Firebase services initialized successfully\", {\n    services: [\"Authentication\", \"Firestore\", \"Storage\"]\n  });\n} catch (error) {\n  console.error(\"CRITICAL ERROR: Firebase initialization failed\", error);\n  throw error;\n}\nexport { auth, db, storage, app };","map":{"version":3,"names":["initializeApp","getApps","getAuth","getFirestore","getStorage","Constants","logFirebaseStatus","message","data","arguments","length","undefined","console","log","firebaseConfig","apiKey","manifest","extra","firebase","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","storage","services","error"],"sources":["C:/Users/user/Documents/app.v3/client/src/core/config/firebase.js"],"sourcesContent":["import { initializeApp, getApps } from 'firebase/app';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getStorage } from 'firebase/storage';\r\nimport Constants from 'expo-constants';\r\n\r\n// --- Diagnostic Logging Function ---\r\nfunction logFirebaseStatus(message, data = {}) {\r\n  console.log(`[Firebase] ${message}`, data);\r\n}\r\n\r\n// --- Firebase Configuration from app.json ---\r\nconst firebaseConfig = {\r\n  apiKey: Constants.manifest.extra.firebase.apiKey,\r\n  authDomain: Constants.manifest.extra.firebase.authDomain,\r\n  projectId: Constants.manifest.extra.firebase.projectId,\r\n  storageBucket: Constants.manifest.extra.firebase.storageBucket,\r\n  messagingSenderId: Constants.manifest.extra.firebase.messagingSenderId,\r\n  appId: Constants.manifest.extra.firebase.appId,\r\n  measurementId: Constants.manifest.extra.firebase.measurementId\r\n};\r\n\r\n// --- Core Firebase Services ---\r\nlet app;\r\nlet auth;\r\nlet db;\r\nlet storage;\r\n\r\n// --- Initialize Firebase ---\r\ntry {\r\n  // Check if Firebase is already initialized\r\n  if (!getApps().length) {\r\n    logFirebaseStatus(\"Initializing Firebase app...\");\r\n    app = initializeApp(firebaseConfig);\r\n    logFirebaseStatus(\"Firebase app initialized successfully\");\r\n  } else {\r\n    logFirebaseStatus(\"Firebase app already initialized\");\r\n    app = getApps()[0];\r\n  }\r\n\r\n  // Initialize services\r\n  auth = getAuth(app);\r\n  db = getFirestore(app);\r\n  storage = getStorage(app);\r\n  logFirebaseStatus(\"Firebase services initialized successfully\", {\r\n    services: [\"Authentication\", \"Firestore\", \"Storage\"]\r\n  });\r\n} catch (error) {\r\n  console.error(\"CRITICAL ERROR: Firebase initialization failed\", error);\r\n  throw error;\r\n}\r\n\r\n// Export Firebase services\r\nexport { auth, db, storage, app };\r\n// Export default for backward compatibility (optional, depending on usage)\r\n// export default firebaseConfig; // Removed as config is now accessed via Constants\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,OAAO,QAAQ,cAAc;AACrD,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,SAAS,MAAM,gBAAgB;AAGtC,SAASC,iBAAiBA,CAACC,OAAO,EAAa;EAAA,IAAXC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC3CG,OAAO,CAACC,GAAG,CAAC,cAAcN,OAAO,EAAE,EAAEC,IAAI,CAAC;AAC5C;AAGA,IAAMM,cAAc,GAAG;EACrBC,MAAM,EAAEV,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACH,MAAM;EAChDI,UAAU,EAAEd,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACC,UAAU;EACxDC,SAAS,EAAEf,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACE,SAAS;EACtDC,aAAa,EAAEhB,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACG,aAAa;EAC9DC,iBAAiB,EAAEjB,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACI,iBAAiB;EACtEC,KAAK,EAAElB,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACK,KAAK;EAC9CC,aAAa,EAAEnB,SAAS,CAACW,QAAQ,CAACC,KAAK,CAACC,QAAQ,CAACM;AACnD,CAAC;AAGD,IAAIC,GAAG;AACP,IAAIC,IAAI;AACR,IAAIC,EAAE;AACN,IAAIC,OAAO;AAGX,IAAI;EAEF,IAAI,CAAC3B,OAAO,CAAC,CAAC,CAACS,MAAM,EAAE;IACrBJ,iBAAiB,CAAC,8BAA8B,CAAC;IACjDmB,GAAG,GAAGzB,aAAa,CAACc,cAAc,CAAC;IACnCR,iBAAiB,CAAC,uCAAuC,CAAC;EAC5D,CAAC,MAAM;IACLA,iBAAiB,CAAC,kCAAkC,CAAC;IACrDmB,GAAG,GAAGxB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB;EAGAyB,IAAI,GAAGxB,OAAO,CAACuB,GAAG,CAAC;EACnBE,EAAE,GAAGxB,YAAY,CAACsB,GAAG,CAAC;EACtBG,OAAO,GAAGxB,UAAU,CAACqB,GAAG,CAAC;EACzBnB,iBAAiB,CAAC,4CAA4C,EAAE;IAC9DuB,QAAQ,EAAE,CAAC,gBAAgB,EAAE,WAAW,EAAE,SAAS;EACrD,CAAC,CAAC;AACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;EACdlB,OAAO,CAACkB,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;EACtE,MAAMA,KAAK;AACb;AAGA,SAASJ,IAAI,EAAEC,EAAE,EAAEC,OAAO,EAAEH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}