{"ast":null,"code":"import { useTranslation } from 'react-i18next';\nvar formatEnglishCurrency = function formatEnglishCurrency(amount) {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\nvar formatEnglishDate = function formatEnglishDate(date) {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(new Date(date));\n};\nimport { formatHebrewCurrency, formatHebrewDate } from \"./hebrew\";\nexport var useFormatters = function useFormatters() {\n  var _useTranslation = useTranslation(),\n    i18n = _useTranslation.i18n;\n  return {\n    formatCurrency: function formatCurrency(amount) {\n      if (i18n.language === 'he') {\n        return formatHebrewCurrency(amount);\n      }\n      return formatEnglishCurrency(amount);\n    },\n    formatDate: function formatDate(date) {\n      if (i18n.language === 'he') {\n        return formatHebrewDate(date);\n      }\n      return formatEnglishDate(date);\n    }\n  };\n};","map":{"version":3,"names":["useTranslation","formatEnglishCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatEnglishDate","date","DateTimeFormat","year","month","day","Date","formatHebrewCurrency","formatHebrewDate","useFormatters","_useTranslation","i18n","formatCurrency","language","formatDate"],"sources":["C:/Users/user/Documents/app.v3/client/src/utils/formatters.js"],"sourcesContent":["import { useTranslation } from 'react-i18next';\r\n\r\n// Assuming English formatters exist or will be created\r\nconst formatEnglishCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD', // Or your default currency\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  }).format(amount);\r\n};\r\n\r\nconst formatEnglishDate = (date) => {\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  }).format(new Date(date));\r\n};\r\n\r\nimport { formatHebrewCurrency, formatHebrewDate } from './hebrew';\r\n\r\nexport const useFormatters = () => {\r\n  const { i18n } = useTranslation();\r\n  \r\n  return {\r\n    formatCurrency: (amount) => {\r\n      if (i18n.language === 'he') {\r\n        return formatHebrewCurrency(amount);\r\n      }\r\n      return formatEnglishCurrency(amount);\r\n    },\r\n    formatDate: (date) => {\r\n      if (i18n.language === 'he') {\r\n        return formatHebrewDate(date);\r\n      }\r\n      return formatEnglishDate(date);\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,eAAe;AAG9C,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,MAAM,EAAK;EACxC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACnB,CAAC;AAED,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,IAAI,EAAK;EAClC,OAAO,IAAIR,IAAI,CAACS,cAAc,CAAC,OAAO,EAAE;IACtCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC,CAACN,MAAM,CAAC,IAAIO,IAAI,CAACL,IAAI,CAAC,CAAC;AAC3B,CAAC;AAED,SAASM,oBAAoB,EAAEC,gBAAgB;AAE/C,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EACjC,IAAAC,eAAA,GAAiBpB,cAAc,CAAC,CAAC;IAAzBqB,IAAI,GAAAD,eAAA,CAAJC,IAAI;EAEZ,OAAO;IACLC,cAAc,EAAE,SAAhBA,cAAcA,CAAGpB,MAAM,EAAK;MAC1B,IAAImB,IAAI,CAACE,QAAQ,KAAK,IAAI,EAAE;QAC1B,OAAON,oBAAoB,CAACf,MAAM,CAAC;MACrC;MACA,OAAOD,qBAAqB,CAACC,MAAM,CAAC;IACtC,CAAC;IACDsB,UAAU,EAAE,SAAZA,UAAUA,CAAGb,IAAI,EAAK;MACpB,IAAIU,IAAI,CAACE,QAAQ,KAAK,IAAI,EAAE;QAC1B,OAAOL,gBAAgB,CAACP,IAAI,CAAC;MAC/B;MACA,OAAOD,iBAAiB,CAACC,IAAI,CAAC;IAChC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}