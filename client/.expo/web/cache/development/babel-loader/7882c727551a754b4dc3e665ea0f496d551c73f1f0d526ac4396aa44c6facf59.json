{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from \"../../auth/hooks/useAuth\";\nimport { db } from \"../../../core/config/firebase\";\nimport { collection, query, where, orderBy, limit, startAfter, getDocs } from 'firebase/firestore';\nimport errorHandler from \"../../../shared/utils/errorHandler\";\nimport { useToast } from \"../../../shared/hooks/useToast\";\nexport var useReceipts = function useReceipts() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    receipts = _useState2[0],\n    setReceipts = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    error = _useState6[0],\n    setError = _useState6[1];\n  var _useState7 = useState(10),\n    _useState8 = _slicedToArray(_useState7, 2),\n    limit = _useState8[0],\n    setLimit = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    lastVisibleDoc = _useState10[0],\n    setLastVisibleDoc = _useState10[1];\n  var _useState11 = useState(true),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasMore = _useState12[0],\n    setHasMore = _useState12[1];\n  var _useState13 = useState({}),\n    _useState14 = _slicedToArray(_useState13, 2),\n    filters = _useState14[0],\n    setFilters = _useState14[1];\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var _useToast = useToast(),\n    showToast = _useToast.showToast;\n  var fetchReceipts = useCallback(_asyncToGenerator(function* () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      setLoading(true);\n      setError(null);\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n      var fetchOptions = _objectSpread(_objectSpread({\n        limit: options.limit || limit,\n        startAfterDoc: options.startAfterDoc || lastVisibleDoc\n      }, filters), options);\n      var receiptsCollectionRef = collection(db, 'receipts');\n      var receiptsQuery = query(receiptsCollectionRef, where('userId', '==', user.uid), orderBy('createdAt', 'desc'), limit(fetchOptions.limit));\n      if (fetchOptions.startAfterDoc) {\n        receiptsQuery = query(receiptsQuery, startAfter(fetchOptions.startAfterDoc));\n      }\n      var snapshot = yield getDocs(receiptsQuery);\n      var newReceipts = snapshot.docs.map(function (doc) {\n        return _objectSpread({\n          id: doc.id\n        }, doc.data());\n      });\n      setReceipts(function (prevReceipts) {\n        return fetchOptions.startAfterDoc ? [].concat(_toConsumableArray(prevReceipts), _toConsumableArray(newReceipts)) : newReceipts;\n      });\n      setLastVisibleDoc(snapshot.docs[snapshot.docs.length - 1] || null);\n      setHasMore(newReceipts.length === fetchOptions.limit);\n    } catch (err) {\n      var userFriendlyMessage = errorHandler(err, 'Failed to fetch receipts.');\n      setError(userFriendlyMessage);\n      showToast(userFriendlyMessage, 'error');\n    } finally {\n      setLoading(false);\n    }\n  }), [user, limit, lastVisibleDoc, filters, showToast]);\n  var loadMore = useCallback(_asyncToGenerator(function* () {\n    if (hasMore && !loading && lastVisibleDoc) {\n      yield fetchReceipts({\n        startAfterDoc: lastVisibleDoc\n      });\n    }\n  }), [hasMore, loading, lastVisibleDoc, fetchReceipts]);\n  var addReceipt = useCallback(function () {\n    var _ref3 = _asyncToGenerator(function* (receiptData) {\n      var imageFile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      try {\n        setLoading(true);\n        setError(null);\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n        var result = yield receiptApi.createReceipt(receiptData, imageFile);\n        yield fetchReceipts({\n          startAfter: null\n        });\n        showToast('Receipt added successfully', 'success');\n        return result;\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to add receipt.');\n        setError(userFriendlyMessage);\n        showToast(userFriendlyMessage, 'error');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [user, fetchReceipts, showToast]);\n  var updateReceipt = useCallback(function () {\n    var _ref4 = _asyncToGenerator(function* (receiptId, receiptData) {\n      var imageFile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      try {\n        setLoading(true);\n        setError(null);\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n        var result = yield receiptApi.updateReceipt(receiptId, receiptData, imageFile);\n        yield fetchReceipts();\n        showToast('Receipt updated successfully', 'success');\n        return result;\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to update receipt.');\n        setError(userFriendlyMessage);\n        showToast(userFriendlyMessage, 'error');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function (_x2, _x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [user, fetchReceipts, showToast]);\n  var deleteReceipt = useCallback(function () {\n    var _ref5 = _asyncToGenerator(function* (receiptId) {\n      try {\n        setLoading(true);\n        setError(null);\n        if (!user) {\n          throw new Error('User not authenticated');\n        }\n        yield receiptApi.deleteReceipt(receiptId);\n        yield fetchReceipts({\n          startAfter: null\n        });\n        showToast('Receipt deleted successfully', 'success');\n      } catch (err) {\n        var userFriendlyMessage = errorHandler(err, 'Failed to delete receipt.');\n        setError(userFriendlyMessage);\n        showToast(userFriendlyMessage, 'error');\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function (_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [user, fetchReceipts, showToast]);\n  useEffect(function () {\n    if (user) {\n      fetchReceipts();\n    } else {\n      setReceipts([]);\n    }\n  }, [user, fetchReceipts]);\n  return {\n    receipts: receipts,\n    loading: loading,\n    error: error,\n    pagination: pagination,\n    setPagination: setPagination,\n    filters: filters,\n    setFilters: setFilters,\n    fetchReceipts: fetchReceipts,\n    addReceipt: addReceipt,\n    updateReceipt: updateReceipt,\n    deleteReceipt: deleteReceipt\n  };\n};\nexport default useReceipts;","map":{"version":3,"names":["useState","useEffect","useCallback","useAuth","db","collection","query","where","orderBy","limit","startAfter","getDocs","errorHandler","useToast","useReceipts","_useState","_useState2","_slicedToArray","receipts","setReceipts","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","_useState8","setLimit","_useState9","_useState10","lastVisibleDoc","setLastVisibleDoc","_useState11","_useState12","hasMore","setHasMore","_useState13","_useState14","filters","setFilters","_useAuth","user","_useToast","showToast","fetchReceipts","_asyncToGenerator","options","arguments","length","undefined","Error","fetchOptions","_objectSpread","startAfterDoc","receiptsCollectionRef","receiptsQuery","uid","snapshot","newReceipts","docs","map","doc","id","data","prevReceipts","concat","_toConsumableArray","err","userFriendlyMessage","loadMore","addReceipt","_ref3","receiptData","imageFile","result","receiptApi","createReceipt","_x","apply","updateReceipt","_ref4","receiptId","_x2","_x3","deleteReceipt","_ref5","_x4","pagination","setPagination"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/receipts/hooks/useReceipts.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../../auth/hooks/useAuth';\r\nimport { db } from '../../../core/config/firebase'; // Import Firestore instance\r\nimport { collection, query, where, orderBy, limit, startAfter, getDocs } from 'firebase/firestore'; // Import Firestore functions\r\nimport errorHandler from '../../../shared/utils/errorHandler';\r\nimport { useToast } from '../../../shared/hooks/useToast';\r\n\r\n/**\r\n * @typedef {object} Receipt\r\n * @property {string} id - The receipt ID.\r\n * @property {string} userId - The ID of the user who owns the receipt.\r\n * @property {string} merchant - The merchant name.\r\n * @property {Date} date - The date of the receipt.\r\n * @property {number} total - The total amount of the receipt.\r\n * // Add other relevant receipt properties here\r\n */\r\n\r\n/**\r\n * @typedef {object} PaginationInfo\r\n * @property {number} limit - The number of items per page.\r\n * @property {string|null} startAfter - The ID of the last item from the previous page (for cursor-based pagination).\r\n * @property {boolean} hasNextPage - Indicates if there are more pages.\r\n */\r\n\r\n/**\r\n * @typedef {object} ReceiptFilters\r\n * @property {string} [category] - Filter by category.\r\n * @property {string} [merchant] - Filter by merchant name.\r\n * @property {string} [startDate] - Filter by start date (ISO 8601).\r\n * @property {string} [endDate] - Filter by end date (ISO 8601).\r\n * // Add other relevant filter properties here\r\n */\r\n\r\n/**\r\n * @typedef {object} UseReceiptsReturn\r\n * @property {Receipt[]} receipts - Array of fetched receipts.\r\n * @property {boolean} loading - Loading state.\r\n * @property {string|null} error - Error message if fetching/mutating failed.\r\n * @property {PaginationInfo} pagination - Pagination information.\r\n * @property {function(PaginationInfo): void} setPagination - Function to update pagination state.\r\n * @property {ReceiptFilters} filters - Current filter state.\r\n * @property {function(ReceiptFilters): void} setFilters - Function to update filter state.\r\n * @property {function(object): Promise<void>} fetchReceipts - Function to fetch receipts with optional filters/pagination.\r\n * @property {function(object, File): Promise<object>} addReceipt - Function to add a new receipt.\r\n * @property {function(string, object, File): Promise<object>} updateReceipt - Function to update an existing receipt.\r\n * @property {function(string): Promise<void>} deleteReceipt - Function to delete a receipt.\r\n */\r\n\r\n/**\r\n * @desc Custom hook for fetching, adding, updating, and deleting user receipts.\r\n * Manages loading, error, pagination, and filter states.\r\n * @returns {UseReceiptsReturn} - Object containing receipts data, state, and functions.\r\n */\r\nexport const useReceipts = () => {\r\n  const [receipts, setReceipts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [limit, setLimit] = useState(10); // Number of items per page\r\n  const [lastVisibleDoc, setLastVisibleDoc] = useState(null); // Last document snapshot for pagination\r\n  const [hasMore, setHasMore] = useState(true); // Indicates if there are more pages\r\n  const [filters, setFilters] = useState({});\r\n  const { user } = useAuth();\r\n  const { showToast } = useToast(); // Get showToast function from useToast hook\r\n\r\n  /**\r\n   * @desc Fetches receipts from Firestore with specified options.\r\n   * Updates receipts and pagination state.\r\n   * @param {object} [options] - Options to override current filters and pagination (e.g., { limit: 20, startAfterDoc: docSnapshot, category: 'food' }).\r\n   * @returns {Promise<void>}\r\n   */\r\n  const fetchReceipts = useCallback(async (options = {}) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      // Merge current limit and filters with provided options\r\n      const fetchOptions = {\r\n          limit: options.limit || limit,\r\n          startAfterDoc: options.startAfterDoc || lastVisibleDoc,\r\n          ...filters,\r\n          ...options\r\n      };\r\n\r\n      const receiptsCollectionRef = collection(db, 'receipts');\r\n      let receiptsQuery = query(\r\n        receiptsCollectionRef,\r\n        where('userId', '==', user.uid),\r\n        orderBy('createdAt', 'desc'), // Assuming receipts are ordered by creation date\r\n        limit(fetchOptions.limit)\r\n      );\r\n\r\n      if (fetchOptions.startAfterDoc) {\r\n        receiptsQuery = query(receiptsQuery, startAfter(fetchOptions.startAfterDoc));\r\n      }\r\n\r\n      const snapshot = await getDocs(receiptsQuery);\r\n\r\n      const newReceipts = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      // Append new receipts if loading more, otherwise replace\r\n      setReceipts(prevReceipts =>\r\n        fetchOptions.startAfterDoc ? [...prevReceipts, ...newReceipts] : newReceipts\r\n      );\r\n\r\n      // Update last visible document for the next page\r\n      setLastVisibleDoc(snapshot.docs[snapshot.docs.length - 1] || null);\r\n\r\n      // Determine if there are more pages\r\n      setHasMore(newReceipts.length === fetchOptions.limit);\r\n\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to fetch receipts.');\r\n      setError(userFriendlyMessage);\r\n      // Show toast with the error message\r\n      showToast(userFriendlyMessage, 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, limit, lastVisibleDoc, filters, showToast]); // Dependencies updated\r\n\r\n  /**\r\n   * @desc Loads the next page of receipts.\r\n   * @returns {Promise<void>}\r\n   */\r\n  const loadMore = useCallback(async () => {\r\n    if (hasMore && !loading && lastVisibleDoc) {\r\n      await fetchReceipts({ startAfterDoc: lastVisibleDoc });\r\n    }\r\n  }, [hasMore, loading, lastVisibleDoc, fetchReceipts]);\r\n\r\n  /**\r\n   * @desc Adds a new receipt via the backend API.\r\n   * Refreshes the receipt list after successful addition.\r\n   * @param {object} receiptData - The data for the new receipt.\r\n   * @param {File} [imageFile=null] - Optional image file to upload with the receipt.\r\n   * @returns {Promise<object>} - A promise that resolves with the result from the API.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  const addReceipt = useCallback(async (receiptData, imageFile = null) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      const result = await receiptApi.createReceipt(receiptData, imageFile);\r\n\r\n      // Refresh receipts list\r\n      await fetchReceipts({ startAfter: null });\r\n\r\n      showToast('Receipt added successfully', 'success');\r\n      return result;\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to add receipt.');\r\n      setError(userFriendlyMessage);\r\n      showToast(userFriendlyMessage, 'error');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, fetchReceipts, showToast]);\r\n\r\n  /**\r\n   * @desc Updates an existing receipt via the backend API.\r\n   * Refreshes the receipt list after successful update.\r\n   * @param {string} receiptId - The ID of the receipt to update.\r\n   * @param {object} receiptData - The updated data for the receipt.\r\n   * @param {File} [imageFile=null] - Optional new image file to upload.\r\n   * @returns {Promise<object>} - A promise that resolves with the result from the API.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  const updateReceipt = useCallback(async (receiptId, receiptData, imageFile = null) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      const result = await receiptApi.updateReceipt(receiptId, receiptData, imageFile);\r\n\r\n      // Refresh receipts list\r\n      await fetchReceipts();\r\n\r\n      showToast('Receipt updated successfully', 'success');\r\n      return result;\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to update receipt.');\r\n      setError(userFriendlyMessage);\r\n      showToast(userFriendlyMessage, 'error');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, fetchReceipts, showToast]);\r\n\r\n  /**\r\n   * @desc Deletes a receipt via the backend API.\r\n   * Refreshes the receipt list after successful deletion.\r\n   * @param {string} receiptId - The ID of the receipt to delete.\r\n   * @returns {Promise<void>} - A promise that resolves when the deletion is complete.\r\n   * @throws {Error} - Throws an error if the API request fails.\r\n   */\r\n  const deleteReceipt = useCallback(async (receiptId) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      await receiptApi.deleteReceipt(receiptId);\r\n\r\n      // Refresh receipts list\r\n      await fetchReceipts({ startAfter: null });\r\n\r\n      showToast('Receipt deleted successfully', 'success');\r\n    } catch (err) {\r\n      const userFriendlyMessage = errorHandler(err, 'Failed to delete receipt.');\r\n      setError(userFriendlyMessage);\r\n      showToast(userFriendlyMessage, 'error');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, fetchReceipts, showToast]);\r\n\r\n  // Fetch receipts when user changes or pagination/filters change\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchReceipts();\r\n    } else {\r\n      setReceipts([]);\r\n    }\r\n  }, [user, fetchReceipts]);\r\n\r\n  return {\r\n    receipts,\r\n    loading,\r\n    error,\r\n    pagination,\r\n    setPagination,\r\n    filters,\r\n    setFilters,\r\n    fetchReceipts,\r\n    addReceipt,\r\n    updateReceipt,\r\n    deleteReceipt\r\n  };\r\n};\r\n\r\nexport default useReceipts;\r\n"],"mappings":";;;;;;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,OAAO;AAChB,SAASC,EAAE;AACX,SAASC,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AAClG,OAAOC,YAAY;AACnB,SAASC,QAAQ;AAgDjB,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EAC/B,IAAAC,SAAA,GAAgCf,QAAQ,CAAC,EAAE,CAAC;IAAAgB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAA8BpB,QAAQ,CAAC,IAAI,CAAC;IAAAqB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAC1B,IAAAG,UAAA,GAA0BxB,QAAQ,CAAC,IAAI,CAAC;IAAAyB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAjCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EACtB,IAAAG,UAAA,GAA0B5B,QAAQ,CAAC,EAAE,CAAC;IAAA6B,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAA/BnB,KAAK,GAAAoB,UAAA;IAAEC,QAAQ,GAAAD,UAAA;EACtB,IAAAE,UAAA,GAA4C/B,QAAQ,CAAC,IAAI,CAAC;IAAAgC,WAAA,GAAAf,cAAA,CAAAc,UAAA;IAAnDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EACxC,IAAAG,WAAA,GAA8BnC,QAAQ,CAAC,IAAI,CAAC;IAAAoC,WAAA,GAAAnB,cAAA,CAAAkB,WAAA;IAArCE,OAAO,GAAAD,WAAA;IAAEE,UAAU,GAAAF,WAAA;EAC1B,IAAAG,WAAA,GAA8BvC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAAwC,WAAA,GAAAvB,cAAA,CAAAsB,WAAA;IAAnCE,OAAO,GAAAD,WAAA;IAAEE,UAAU,GAAAF,WAAA;EAC1B,IAAAG,QAAA,GAAiBxC,OAAO,CAAC,CAAC;IAAlByC,IAAI,GAAAD,QAAA,CAAJC,IAAI;EACZ,IAAAC,SAAA,GAAsBhC,QAAQ,CAAC,CAAC;IAAxBiC,SAAS,GAAAD,SAAA,CAATC,SAAS;EAQjB,IAAMC,aAAa,GAAG7C,WAAW,CAAA8C,iBAAA,CAAC,aAAwB;IAAA,IAAjBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACnD,IAAI;MACF3B,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI,CAACiB,IAAI,EAAE;QACT,MAAM,IAAIS,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAGA,IAAMC,YAAY,GAAAC,aAAA,CAAAA,aAAA;QACd9C,KAAK,EAAEwC,OAAO,CAACxC,KAAK,IAAIA,KAAK;QAC7B+C,aAAa,EAAEP,OAAO,CAACO,aAAa,IAAIvB;MAAc,GACnDQ,OAAO,GACPQ,OAAO,CACb;MAED,IAAMQ,qBAAqB,GAAGpD,UAAU,CAACD,EAAE,EAAE,UAAU,CAAC;MACxD,IAAIsD,aAAa,GAAGpD,KAAK,CACvBmD,qBAAqB,EACrBlD,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAEqC,IAAI,CAACe,GAAG,CAAC,EAC/BnD,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,EAC5BC,KAAK,CAAC6C,YAAY,CAAC7C,KAAK,CAC1B,CAAC;MAED,IAAI6C,YAAY,CAACE,aAAa,EAAE;QAC9BE,aAAa,GAAGpD,KAAK,CAACoD,aAAa,EAAEhD,UAAU,CAAC4C,YAAY,CAACE,aAAa,CAAC,CAAC;MAC9E;MAEA,IAAMI,QAAQ,SAASjD,OAAO,CAAC+C,aAAa,CAAC;MAE7C,IAAMG,WAAW,GAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAC,UAAAC,GAAG;QAAA,OAAAT,aAAA;UACvCU,EAAE,EAAED,GAAG,CAACC;QAAE,GACPD,GAAG,CAACE,IAAI,CAAC,CAAC;MAAA,CACb,CAAC;MAGH/C,WAAW,CAAC,UAAAgD,YAAY;QAAA,OACtBb,YAAY,CAACE,aAAa,MAAAY,MAAA,CAAAC,kBAAA,CAAOF,YAAY,GAAAE,kBAAA,CAAKR,WAAW,KAAIA,WAAW;MAAA,CAC9E,CAAC;MAGD3B,iBAAiB,CAAC0B,QAAQ,CAACE,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACX,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC;MAGlEb,UAAU,CAACuB,WAAW,CAACV,MAAM,KAAKG,YAAY,CAAC7C,KAAK,CAAC;IAEvD,CAAC,CAAC,OAAO6D,GAAG,EAAE;MACZ,IAAMC,mBAAmB,GAAG3D,YAAY,CAAC0D,GAAG,EAAE,2BAA2B,CAAC;MAC1E3C,QAAQ,CAAC4C,mBAAmB,CAAC;MAE7BzB,SAAS,CAACyB,mBAAmB,EAAE,OAAO,CAAC;IACzC,CAAC,SAAS;MACRhD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,GAAE,CAACqB,IAAI,EAAEnC,KAAK,EAAEwB,cAAc,EAAEQ,OAAO,EAAEK,SAAS,CAAC,CAAC;EAMrD,IAAM0B,QAAQ,GAAGtE,WAAW,CAAA8C,iBAAA,CAAC,aAAY;IACvC,IAAIX,OAAO,IAAI,CAACf,OAAO,IAAIW,cAAc,EAAE;MACzC,MAAMc,aAAa,CAAC;QAAES,aAAa,EAAEvB;MAAe,CAAC,CAAC;IACxD;EACF,CAAC,GAAE,CAACI,OAAO,EAAEf,OAAO,EAAEW,cAAc,EAAEc,aAAa,CAAC,CAAC;EAUrD,IAAM0B,UAAU,GAAGvE,WAAW;IAAA,IAAAwE,KAAA,GAAA1B,iBAAA,CAAC,WAAO2B,WAAW,EAAuB;MAAA,IAArBC,SAAS,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;MACjE,IAAI;QACF3B,UAAU,CAAC,IAAI,CAAC;QAChBI,QAAQ,CAAC,IAAI,CAAC;QAEd,IAAI,CAACiB,IAAI,EAAE;UACT,MAAM,IAAIS,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEA,IAAMwB,MAAM,SAASC,UAAU,CAACC,aAAa,CAACJ,WAAW,EAAEC,SAAS,CAAC;QAGrE,MAAM7B,aAAa,CAAC;UAAErC,UAAU,EAAE;QAAK,CAAC,CAAC;QAEzCoC,SAAS,CAAC,4BAA4B,EAAE,SAAS,CAAC;QAClD,OAAO+B,MAAM;MACf,CAAC,CAAC,OAAOP,GAAG,EAAE;QACZ,IAAMC,mBAAmB,GAAG3D,YAAY,CAAC0D,GAAG,EAAE,wBAAwB,CAAC;QACvE3C,QAAQ,CAAC4C,mBAAmB,CAAC;QAC7BzB,SAAS,CAACyB,mBAAmB,EAAE,OAAO,CAAC;QACvC,MAAMD,GAAG;MACX,CAAC,SAAS;QACR/C,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAAA,iBAAAyD,EAAA;MAAA,OAAAN,KAAA,CAAAO,KAAA,OAAA/B,SAAA;IAAA;EAAA,KAAE,CAACN,IAAI,EAAEG,aAAa,EAAED,SAAS,CAAC,CAAC;EAWpC,IAAMoC,aAAa,GAAGhF,WAAW;IAAA,IAAAiF,KAAA,GAAAnC,iBAAA,CAAC,WAAOoC,SAAS,EAAET,WAAW,EAAuB;MAAA,IAArBC,SAAS,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;MAC/E,IAAI;QACF3B,UAAU,CAAC,IAAI,CAAC;QAChBI,QAAQ,CAAC,IAAI,CAAC;QAEd,IAAI,CAACiB,IAAI,EAAE;UACT,MAAM,IAAIS,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEA,IAAMwB,MAAM,SAASC,UAAU,CAACI,aAAa,CAACE,SAAS,EAAET,WAAW,EAAEC,SAAS,CAAC;QAGhF,MAAM7B,aAAa,CAAC,CAAC;QAErBD,SAAS,CAAC,8BAA8B,EAAE,SAAS,CAAC;QACpD,OAAO+B,MAAM;MACf,CAAC,CAAC,OAAOP,GAAG,EAAE;QACZ,IAAMC,mBAAmB,GAAG3D,YAAY,CAAC0D,GAAG,EAAE,2BAA2B,CAAC;QAC1E3C,QAAQ,CAAC4C,mBAAmB,CAAC;QAC7BzB,SAAS,CAACyB,mBAAmB,EAAE,OAAO,CAAC;QACvC,MAAMD,GAAG;MACX,CAAC,SAAS;QACR/C,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAAA,iBAAA8D,GAAA,EAAAC,GAAA;MAAA,OAAAH,KAAA,CAAAF,KAAA,OAAA/B,SAAA;IAAA;EAAA,KAAE,CAACN,IAAI,EAAEG,aAAa,EAAED,SAAS,CAAC,CAAC;EASpC,IAAMyC,aAAa,GAAGrF,WAAW;IAAA,IAAAsF,KAAA,GAAAxC,iBAAA,CAAC,WAAOoC,SAAS,EAAK;MACrD,IAAI;QACF7D,UAAU,CAAC,IAAI,CAAC;QAChBI,QAAQ,CAAC,IAAI,CAAC;QAEd,IAAI,CAACiB,IAAI,EAAE;UACT,MAAM,IAAIS,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEA,MAAMyB,UAAU,CAACS,aAAa,CAACH,SAAS,CAAC;QAGzC,MAAMrC,aAAa,CAAC;UAAErC,UAAU,EAAE;QAAK,CAAC,CAAC;QAEzCoC,SAAS,CAAC,8BAA8B,EAAE,SAAS,CAAC;MACtD,CAAC,CAAC,OAAOwB,GAAG,EAAE;QACZ,IAAMC,mBAAmB,GAAG3D,YAAY,CAAC0D,GAAG,EAAE,2BAA2B,CAAC;QAC1E3C,QAAQ,CAAC4C,mBAAmB,CAAC;QAC7BzB,SAAS,CAACyB,mBAAmB,EAAE,OAAO,CAAC;QACvC,MAAMD,GAAG;MACX,CAAC,SAAS;QACR/C,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAAA,iBAAAkE,GAAA;MAAA,OAAAD,KAAA,CAAAP,KAAA,OAAA/B,SAAA;IAAA;EAAA,KAAE,CAACN,IAAI,EAAEG,aAAa,EAAED,SAAS,CAAC,CAAC;EAGpC7C,SAAS,CAAC,YAAM;IACd,IAAI2C,IAAI,EAAE;MACRG,aAAa,CAAC,CAAC;IACjB,CAAC,MAAM;MACL5B,WAAW,CAAC,EAAE,CAAC;IACjB;EACF,CAAC,EAAE,CAACyB,IAAI,EAAEG,aAAa,CAAC,CAAC;EAEzB,OAAO;IACL7B,QAAQ,EAARA,QAAQ;IACRI,OAAO,EAAPA,OAAO;IACPI,KAAK,EAALA,KAAK;IACLgE,UAAU,EAAVA,UAAU;IACVC,aAAa,EAAbA,aAAa;IACblD,OAAO,EAAPA,OAAO;IACPC,UAAU,EAAVA,UAAU;IACVK,aAAa,EAAbA,aAAa;IACb0B,UAAU,EAAVA,UAAU;IACVS,aAAa,EAAbA,aAAa;IACbK,aAAa,EAAbA;EACF,CAAC;AACH,CAAC;AAED,eAAezE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}