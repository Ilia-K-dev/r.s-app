{"ast":null,"code":"export var formatCurrency = function formatCurrency(value) {\n  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'USD';\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  if (value === null || value === undefined) {\n    return '';\n  }\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency\n    }).format(value);\n  } catch (error) {\n    console.error('Error formatting currency:', error);\n    return typeof value === 'number' ? value.toFixed(2) : String(value);\n  }\n};\nexport var parseCurrencyInput = function parseCurrencyInput(input) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  if (!input) return null;\n  try {\n    var cleanedInput = input.replace(/[^0-9.-]/g, '');\n    var parts = cleanedInput.split('.');\n    var finalInput = parts[0];\n    if (parts.length > 1) {\n      finalInput += '.' + parts.slice(1).join('');\n    }\n    var parsedValue = parseFloat(finalInput);\n    return isNaN(parsedValue) ? null : parsedValue;\n  } catch (error) {\n    console.error('Error parsing currency input:', error);\n    return null;\n  }\n};\nexport var convertCurrency = function convertCurrency(amount, fromCurrency, toCurrency, exchangeRates) {\n  if (!exchangeRates || !exchangeRates[fromCurrency] || !exchangeRates[toCurrency]) {\n    console.error(`Exchange rates not available for conversion from ${fromCurrency} to ${toCurrency}`);\n    return null;\n  }\n  var amountInBaseCurrency = amount / exchangeRates[fromCurrency];\n  var convertedAmount = amountInBaseCurrency * exchangeRates[toCurrency];\n  return convertedAmount;\n};\nexport var getCurrencySymbol = function getCurrencySymbol() {\n  var currency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'USD';\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  try {\n    var formatter = new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    });\n    return formatter.format(0).replace(/\\d/g, '').trim();\n  } catch (error) {\n    console.error('Error getting currency symbol:', error);\n    return '$';\n  }\n};\nexport default {\n  formatCurrency: formatCurrency,\n  parseCurrencyInput: parseCurrencyInput,\n  convertCurrency: convertCurrency,\n  getCurrencySymbol: getCurrencySymbol\n};","map":{"version":3,"names":["formatCurrency","value","currency","arguments","length","undefined","locale","Intl","NumberFormat","style","format","error","console","toFixed","String","parseCurrencyInput","input","cleanedInput","replace","parts","split","finalInput","slice","join","parsedValue","parseFloat","isNaN","convertCurrency","amount","fromCurrency","toCurrency","exchangeRates","amountInBaseCurrency","convertedAmount","getCurrencySymbol","formatter","minimumFractionDigits","maximumFractionDigits","trim"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/currency.js"],"sourcesContent":["/**\r\n * @desc Formats a numeric value as a currency string.\r\n * @param {number} value - The numeric value to format.\r\n * @param {string} [currency='USD'] - The currency code (e.g., 'USD', 'EUR').\r\n * @param {string} [locale='en-US'] - The locale to use for formatting.\r\n * @returns {string} - The formatted currency string. Returns empty string for null/undefined input.\r\n */\r\nexport const formatCurrency = (value, currency = 'USD', locale = 'en-US') => {\r\n  if (value === null || value === undefined) {\r\n    return '';\r\n  }\r\n\r\n  try {\r\n    return new Intl.NumberFormat(locale, {\r\n      style: 'currency',\r\n      currency: currency,\r\n    }).format(value);\r\n  } catch (error) {\r\n    console.error('Error formatting currency:', error);\r\n    // Fallback to fixed 2 decimal places if Intl.NumberFormat fails\r\n    return typeof value === 'number' ? value.toFixed(2) : String(value);\r\n  }\r\n};\r\n\r\n/**\r\n * @desc Parses a currency input string into a floating-point number.\r\n * Attempts to remove currency symbols, commas, and other non-numeric characters except decimal point.\r\n * @param {string} input - The currency input string.\r\n * @param {string} [locale='en-US'] - The locale to use for parsing (currently not used in parsing logic, but kept for consistency).\r\n * @returns {number|null} - The parsed numeric value, or null if parsing fails.\r\n */\r\nexport const parseCurrencyInput = (input, locale = 'en-US') => {\r\n  if (!input) return null;\r\n\r\n  try {\r\n    // Remove currency symbols, commas, and other non-numeric characters except decimal point and sign\r\n    // This regex is a basic attempt and might need refinement based on specific currency formats\r\n    const cleanedInput = input.replace(/[^0-9.-]/g, '');\r\n\r\n    // Handle multiple decimal points (keep only the first one)\r\n    const parts = cleanedInput.split('.');\r\n    let finalInput = parts[0];\r\n    if (parts.length > 1) {\r\n        finalInput += '.' + parts.slice(1).join('');\r\n    }\r\n\r\n    const parsedValue = parseFloat(finalInput);\r\n\r\n    return isNaN(parsedValue) ? null : parsedValue;\r\n  } catch (error) {\r\n    console.error('Error parsing currency input:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * @desc Converts an amount from one currency to another using provided exchange rates.\r\n * @param {number} amount - The amount to convert.\r\n * @param {string} fromCurrency - The currency code to convert from.\r\n * @param {string} toCurrency - The currency code to convert to.\r\n * @param {object} exchangeRates - An object containing exchange rates relative to a base currency (e.g., { USD: 1, EUR: 0.9, GBP: 0.8 }).\r\n * @returns {number|null} - The converted amount, or null if conversion is not possible (missing rates).\r\n */\r\nexport const convertCurrency = (amount, fromCurrency, toCurrency, exchangeRates) => {\r\n  if (!exchangeRates || !exchangeRates[fromCurrency] || !exchangeRates[toCurrency]) {\r\n    console.error(`Exchange rates not available for conversion from ${fromCurrency} to ${toCurrency}`);\r\n    return null; // Or throw an error\r\n  }\r\n\r\n  // Assuming exchangeRates are relative to a base currency (e.g., USD)\r\n  // amount_in_base = amount / rate_of_fromCurrency\r\n  // converted_amount = amount_in_base * rate_of_toCurrency\r\n  const amountInBaseCurrency = amount / exchangeRates[fromCurrency];\r\n  const convertedAmount = amountInBaseCurrency * exchangeRates[toCurrency];\r\n\r\n  return convertedAmount;\r\n};\r\n\r\n/**\r\n * @desc Gets the currency symbol for a given currency code and locale.\r\n * @param {string} [currency='USD'] - The currency code (e.g., 'USD', 'EUR').\r\n * @param {string} [locale='en-US'] - The locale to use.\r\n * @returns {string} - The currency symbol. Returns '$' as a fallback.\r\n */\r\nexport const getCurrencySymbol = (currency = 'USD', locale = 'en-US') => {\r\n  try {\r\n    const formatter = new Intl.NumberFormat(locale, {\r\n      style: 'currency',\r\n      currency: currency,\r\n      minimumFractionDigits: 0, // Avoid fractional digits for symbol only\r\n      maximumFractionDigits: 0,\r\n    });\r\n    // Format a zero value and extract the symbol by removing digits and whitespace\r\n    return formatter.format(0).replace(/\\d/g, '').trim();\r\n  } catch (error) {\r\n    console.error('Error getting currency symbol:', error);\r\n    return '$'; // Fallback\r\n  }\r\n};\r\n\r\nexport default {\r\n  formatCurrency,\r\n  parseCurrencyInput,\r\n  convertCurrency,\r\n  getCurrencySymbol,\r\n};\r\n"],"mappings":"AAOA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAyC;EAAA,IAAvCC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EACtE,IAAIF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKI,SAAS,EAAE;IACzC,OAAO,EAAE;EACX;EAEA,IAAI;IACF,OAAO,IAAIE,IAAI,CAACC,YAAY,CAACF,MAAM,EAAE;MACnCG,KAAK,EAAE,UAAU;MACjBP,QAAQ,EAAEA;IACZ,CAAC,CAAC,CAACQ,MAAM,CAACT,KAAK,CAAC;EAClB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAElD,OAAO,OAAOV,KAAK,KAAK,QAAQ,GAAGA,KAAK,CAACY,OAAO,CAAC,CAAC,CAAC,GAAGC,MAAM,CAACb,KAAK,CAAC;EACrE;AACF,CAAC;AASD,OAAO,IAAMc,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,KAAK,EAAuB;EAAA,IAArBV,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EACxD,IAAI,CAACa,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IAGF,IAAMC,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;IAGnD,IAAMC,KAAK,GAAGF,YAAY,CAACG,KAAK,CAAC,GAAG,CAAC;IACrC,IAAIC,UAAU,GAAGF,KAAK,CAAC,CAAC,CAAC;IACzB,IAAIA,KAAK,CAACf,MAAM,GAAG,CAAC,EAAE;MAClBiB,UAAU,IAAI,GAAG,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC/C;IAEA,IAAMC,WAAW,GAAGC,UAAU,CAACJ,UAAU,CAAC;IAE1C,OAAOK,KAAK,CAACF,WAAW,CAAC,GAAG,IAAI,GAAGA,WAAW;EAChD,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,IAAI;EACb;AACF,CAAC;AAUD,OAAO,IAAMgB,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,MAAM,EAAEC,YAAY,EAAEC,UAAU,EAAEC,aAAa,EAAK;EAClF,IAAI,CAACA,aAAa,IAAI,CAACA,aAAa,CAACF,YAAY,CAAC,IAAI,CAACE,aAAa,CAACD,UAAU,CAAC,EAAE;IAChFlB,OAAO,CAACD,KAAK,CAAC,oDAAoDkB,YAAY,OAAOC,UAAU,EAAE,CAAC;IAClG,OAAO,IAAI;EACb;EAKA,IAAME,oBAAoB,GAAGJ,MAAM,GAAGG,aAAa,CAACF,YAAY,CAAC;EACjE,IAAMI,eAAe,GAAGD,oBAAoB,GAAGD,aAAa,CAACD,UAAU,CAAC;EAExE,OAAOG,eAAe;AACxB,CAAC;AAQD,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAA2C;EAAA,IAAvChC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,OAAO;EAClE,IAAI;IACF,IAAMgC,SAAS,GAAG,IAAI5B,IAAI,CAACC,YAAY,CAACF,MAAM,EAAE;MAC9CG,KAAK,EAAE,UAAU;MACjBP,QAAQ,EAAEA,QAAQ;MAClBkC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC,CAAC;IAEF,OAAOF,SAAS,CAACzB,MAAM,CAAC,CAAC,CAAC,CAACQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACoB,IAAI,CAAC,CAAC;EACtD,CAAC,CAAC,OAAO3B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,GAAG;EACZ;AACF,CAAC;AAED,eAAe;EACbX,cAAc,EAAdA,cAAc;EACde,kBAAkB,EAAlBA,kBAAkB;EAClBY,eAAe,EAAfA,eAAe;EACfO,iBAAiB,EAAjBA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}