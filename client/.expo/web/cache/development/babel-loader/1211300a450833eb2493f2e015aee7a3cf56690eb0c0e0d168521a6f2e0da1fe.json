{"ast":null,"code":"var errorHandler = function errorHandler(error) {\n  var defaultMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'An unexpected error occurred.';\n  var userFriendlyMessage = error.message || defaultMessage;\n  console.error('Client-side Error:', error);\n  return userFriendlyMessage;\n};\nexport default errorHandler;","map":{"version":3,"names":["errorHandler","error","defaultMessage","arguments","length","undefined","userFriendlyMessage","message","console"],"sources":["C:/Users/user/Documents/app.v3/client/src/shared/utils/errorHandler.js"],"sourcesContent":["/**\r\n * @desc Centralized client-side error handler without using hooks directly.\r\n * Logs the error and returns a user-friendly message.\r\n * @param {Error} error - The error object caught in a hook or component.\r\n * @param {string} [defaultMessage='An unexpected error occurred.'] - A default message to display if the error object doesn't contain a user-friendly message.\r\n * @returns {string} - A user-friendly error message.\r\n */\r\nconst errorHandler = (error, defaultMessage = 'An unexpected error occurred.') => {\r\n  // Extract user-friendly message (assuming the error object from the API interceptor has a 'message' property)\r\n  const userFriendlyMessage = error.message || defaultMessage;\r\n\r\n  // Log the full error for debugging\r\n  console.error('Client-side Error:', error);\r\n\r\n  // Return the user-friendly message for displaying in the UI\r\n  return userFriendlyMessage;\r\n};\r\n\r\nexport default errorHandler;"],"mappings":"AAOA,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,KAAK,EAAuD;EAAA,IAArDC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,+BAA+B;EAE3E,IAAMG,mBAAmB,GAAGL,KAAK,CAACM,OAAO,IAAIL,cAAc;EAG3DM,OAAO,CAACP,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAG1C,OAAOK,mBAAmB;AAC5B,CAAC;AAED,eAAeN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}