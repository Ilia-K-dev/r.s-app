{"ast":null,"code":"import { fetchUserReceipts, fetchReceiptsByYear, fetchUserInventory, fetchStockMovements } from \"./dataFetchers\";\nexport var calculateSpendingByCategory = function calculateSpendingByCategory(receipts) {\n  var categories = {};\n  receipts.forEach(function (receipt) {\n    var category = receipt.category || 'Uncategorized';\n    var amount = receipt.total || receipt.amount || 0;\n    if (!categories[category]) {\n      categories[category] = 0;\n    }\n    categories[category] += amount;\n  });\n  return Object.keys(categories).map(function (category) {\n    return {\n      category: category,\n      amount: categories[category],\n      formattedAmount: categories[category].toFixed(2)\n    };\n  });\n};\nexport var calculateMonthlySpending = function calculateMonthlySpending(receipts) {\n  var months = {};\n  var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  for (var i = 0; i < 12; i++) {\n    months[monthNames[i]] = 0;\n  }\n  receipts.forEach(function (receipt) {\n    var date = receipt.date.toDate ? receipt.date.toDate() : new Date(receipt.date);\n    var monthName = monthNames[date.getMonth()];\n    var amount = receipt.total || receipt.amount || 0;\n    months[monthName] += amount;\n  });\n  return Object.keys(months).map(function (month) {\n    return {\n      month: month,\n      amount: months[month],\n      formattedAmount: months[month].toFixed(2)\n    };\n  });\n};\nexport var calculateTopMerchants = function calculateTopMerchants(receipts) {\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var merchants = {};\n  receipts.forEach(function (receipt) {\n    var merchant = receipt.merchant || 'Unknown';\n    var amount = receipt.total || receipt.amount || 0;\n    if (!merchants[merchant]) {\n      merchants[merchant] = {\n        total: 0,\n        count: 0\n      };\n    }\n    merchants[merchant].total += amount;\n    merchants[merchant].count += 1;\n  });\n  var sortedMerchants = Object.keys(merchants).map(function (merchant) {\n    return {\n      merchant: merchant,\n      total: merchants[merchant].total,\n      count: merchants[merchant].count,\n      formattedTotal: merchants[merchant].total.toFixed(2)\n    };\n  }).sort(function (a, b) {\n    return b.total - a.total;\n  });\n  return sortedMerchants.slice(0, limit);\n};\nexport var calculateInventoryValueTrend = function calculateInventoryValueTrend(inventory, stockMovements) {\n  var inventoryMap = inventory.reduce(function (map, item) {\n    map[item.id] = item;\n    return map;\n  }, {});\n  var movementsByDate = {};\n  stockMovements.forEach(function (movement) {\n    var date = movement.timestamp.toDate ? movement.timestamp.toDate() : new Date(movement.timestamp);\n    var dateString = date.toISOString().split('T')[0];\n    if (!movementsByDate[dateString]) {\n      movementsByDate[dateString] = [];\n    }\n    movementsByDate[dateString].push(movement);\n  });\n  var valueTrend = [];\n  var currentValue = inventory.reduce(function (total, item) {\n    return total + item.quantity * (item.unitCost || 0);\n  }, 0);\n  var sortedDates = Object.keys(movementsByDate).sort();\n  sortedDates.forEach(function (date) {\n    var movements = movementsByDate[date];\n    movements.forEach(function (movement) {\n      var item = inventoryMap[movement.inventoryId];\n      if (item) {\n        var unitCost = item.unitCost || 0;\n        if (movement.type === 'add') {\n          currentValue += movement.quantity * unitCost;\n        } else if (movement.type === 'remove') {\n          currentValue -= movement.quantity * unitCost;\n        }\n      }\n    });\n    valueTrend.push({\n      date: date,\n      value: currentValue,\n      formattedValue: currentValue.toFixed(2)\n    });\n  });\n  return valueTrend;\n};\nexport var calculateInventoryTurnover = function calculateInventoryTurnover(inventory, stockMovements) {\n  var cogs = stockMovements.filter(function (movement) {\n    return movement.type === 'remove';\n  }).reduce(function (total, movement) {\n    var item = inventory.find(function (i) {\n      return i.id === movement.inventoryId;\n    });\n    var unitCost = item ? item.unitCost || 0 : 0;\n    return total + movement.quantity * unitCost;\n  }, 0);\n  var inventoryValue = inventory.reduce(function (total, item) {\n    return total + item.quantity * (item.unitCost || 0);\n  }, 0);\n  var turnover = inventoryValue > 0 ? cogs / inventoryValue : 0;\n  return {\n    turnover: turnover,\n    formattedTurnover: turnover.toFixed(2),\n    cogs: cogs,\n    formattedCogs: cogs.toFixed(2),\n    averageInventoryValue: inventoryValue,\n    formattedInventoryValue: inventoryValue.toFixed(2)\n  };\n};","map":{"version":3,"names":["fetchUserReceipts","fetchReceiptsByYear","fetchUserInventory","fetchStockMovements","calculateSpendingByCategory","receipts","categories","forEach","receipt","category","amount","total","Object","keys","map","formattedAmount","toFixed","calculateMonthlySpending","months","monthNames","i","date","toDate","Date","monthName","getMonth","month","calculateTopMerchants","limit","arguments","length","undefined","merchants","merchant","count","sortedMerchants","formattedTotal","sort","a","b","slice","calculateInventoryValueTrend","inventory","stockMovements","inventoryMap","reduce","item","id","movementsByDate","movement","timestamp","dateString","toISOString","split","push","valueTrend","currentValue","quantity","unitCost","sortedDates","movements","inventoryId","type","value","formattedValue","calculateInventoryTurnover","cogs","filter","find","inventoryValue","turnover","formattedTurnover","formattedCogs","averageInventoryValue","formattedInventoryValue"],"sources":["C:/Users/user/Documents/app.v3/client/src/features/analytics/utils/calculators.js"],"sourcesContent":["import { fetchUserReceipts, fetchReceiptsByYear, fetchUserInventory, fetchStockMovements } from './dataFetchers';\r\n\r\n// Calculate spending by category\r\nexport const calculateSpendingByCategory = (receipts) => {\r\n  const categories = {};\r\n\r\n  receipts.forEach(receipt => {\r\n    const category = receipt.category || 'Uncategorized';\r\n    const amount = receipt.total || receipt.amount || 0;\r\n\r\n    if (!categories[category]) {\r\n      categories[category] = 0;\r\n    }\r\n\r\n    categories[category] += amount;\r\n  });\r\n\r\n  // Convert to array format for charting\r\n  return Object.keys(categories).map(category => ({\r\n    category,\r\n    amount: categories[category],\r\n    // Format to 2 decimal places\r\n    formattedAmount: categories[category].toFixed(2)\r\n  }));\r\n};\r\n\r\n// Calculate monthly spending\r\nexport const calculateMonthlySpending = (receipts) => {\r\n  const months = {};\r\n\r\n  // Initialize all months to ensure we have entries even for months without spending\r\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n                      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n  for (let i = 0; i < 12; i++) {\r\n    months[monthNames[i]] = 0;\r\n  }\r\n\r\n  receipts.forEach(receipt => {\r\n    const date = receipt.date.toDate ? receipt.date.toDate() : new Date(receipt.date);\r\n    const monthName = monthNames[date.getMonth()];\r\n    const amount = receipt.total || receipt.amount || 0;\r\n\r\n    months[monthName] += amount;\r\n  });\r\n\r\n  // Convert to array format for charting\r\n  return Object.keys(months).map(month => ({\r\n    month,\r\n    amount: months[month],\r\n    formattedAmount: months[month].toFixed(2)\r\n  }));\r\n};\r\n\r\n// Calculate top merchants\r\nexport const calculateTopMerchants = (receipts, limit = 5) => {\r\n  const merchants = {};\r\n\r\n  receipts.forEach(receipt => {\r\n    const merchant = receipt.merchant || 'Unknown';\r\n    const amount = receipt.total || receipt.amount || 0;\r\n\r\n    if (!merchants[merchant]) {\r\n      merchants[merchant] = {\r\n        total: 0,\r\n        count: 0\r\n      };\r\n    }\r\n\r\n    merchants[merchant].total += amount;\r\n    merchants[merchant].count += 1;\r\n  });\r\n\r\n  // Convert to array and sort by total spending\r\n  const sortedMerchants = Object.keys(merchants).map(merchant => ({\r\n    merchant,\r\n    total: merchants[merchant].total,\r\n    count: merchants[merchant].count,\r\n    formattedTotal: merchants[merchant].total.toFixed(2)\r\n  })).sort((a, b) => b.total - a.total);\r\n\r\n  // Return only the top merchants based on limit\r\n  return sortedMerchants.slice(0, limit);\r\n};\r\n\r\n// Calculate inventory value trend\r\nexport const calculateInventoryValueTrend = (inventory, stockMovements) => {\r\n  // Create a map of inventory items by ID for quick lookup\r\n  const inventoryMap = inventory.reduce((map, item) => {\r\n    map[item.id] = item;\r\n    return map;\r\n  }, {});\r\n\r\n  // Group stock movements by date (using day as granularity)\r\n  const movementsByDate = {};\r\n\r\n  stockMovements.forEach(movement => {\r\n    const date = movement.timestamp.toDate ? movement.timestamp.toDate() : new Date(movement.timestamp);\r\n    const dateString = date.toISOString().split('T')[0];\r\n\r\n    if (!movementsByDate[dateString]) {\r\n      movementsByDate[dateString] = [];\r\n    }\r\n\r\n    movementsByDate[dateString].push(movement);\r\n  });\r\n\r\n  // Calculate daily inventory value\r\n  const valueTrend = [];\r\n  let currentValue = inventory.reduce((total, item) => {\r\n    return total + (item.quantity * (item.unitCost || 0));\r\n  }, 0);\r\n\r\n  // Sort dates chronologically\r\n  const sortedDates = Object.keys(movementsByDate).sort();\r\n\r\n  sortedDates.forEach(date => {\r\n    const movements = movementsByDate[date];\r\n\r\n    movements.forEach(movement => {\r\n      const item = inventoryMap[movement.inventoryId];\r\n      if (item) {\r\n        const unitCost = item.unitCost || 0;\r\n        if (movement.type === 'add') {\r\n          currentValue += movement.quantity * unitCost;\r\n        } else if (movement.type === 'remove') {\r\n          currentValue -= movement.quantity * unitCost;\r\n        }\r\n      }\r\n    });\r\n\r\n    valueTrend.push({\r\n      date,\r\n      value: currentValue,\r\n      formattedValue: currentValue.toFixed(2)\r\n    });\r\n  });\r\n\r\n  return valueTrend;\r\n};\r\n\r\n// Calculate inventory turnover ratio\r\nexport const calculateInventoryTurnover = (inventory, stockMovements) => {\r\n  // Calculate cost of goods sold (sum of all \"remove\" movements)\r\n  const cogs = stockMovements\r\n    .filter(movement => movement.type === 'remove')\r\n    .reduce((total, movement) => {\r\n      const item = inventory.find(i => i.id === movement.inventoryId);\r\n      const unitCost = item ? (item.unitCost || 0) : 0;\r\n      return total + (movement.quantity * unitCost);\r\n    }, 0);\r\n\r\n  // Calculate average inventory value\r\n  const inventoryValue = inventory.reduce((total, item) => {\r\n    return total + (item.quantity * (item.unitCost || 0));\r\n  }, 0);\r\n\r\n  // Avoid division by zero\r\n  const turnover = inventoryValue > 0 ? cogs / inventoryValue : 0;\r\n\r\n  return {\r\n    turnover,\r\n    formattedTurnover: turnover.toFixed(2),\r\n    cogs,\r\n    formattedCogs: cogs.toFixed(2),\r\n    averageInventoryValue: inventoryValue,\r\n    formattedInventoryValue: inventoryValue.toFixed(2)\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}