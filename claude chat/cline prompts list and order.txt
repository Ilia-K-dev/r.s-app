Detailed Prompts for Implementation
Prompt 1: Set Up Basic Firebase Configuration
Set up the core Firebase configuration to connect the application with Firebase services.

Create/modify the file at client/src/core/config/firebase.js:

javascriptimport { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,
  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,
  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.REACT_APP_FIREBASE_APP_ID
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize services
export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);

export default app;

Create a .env.development file in the client directory with your Firebase configuration:

REACT_APP_API_URL=http://localhost:5001
REACT_APP_FIREBASE_API_KEY=your-api-key
REACT_APP_FIREBASE_AUTH_DOMAIN=project-reciept-reader-id.firebaseapp.com
REACT_APP_FIREBASE_PROJECT_ID=project-reciept-reader-id
REACT_APP_FIREBASE_STORAGE_BUCKET=project-reciept-reader-id.firebasestorage.app
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your-sender-id
REACT_APP_FIREBASE_APP_ID=your-app-id
Prompt 2: Create Authentication Context
Create the authentication context to manage user authentication state across the application.

Create/modify the file at client/src/core/contexts/AuthContext.js:

javascriptimport React, { createContext, useState, useEffect } from 'react';
import { auth } from '../config/firebase';
import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword, 
  signOut, 
  sendPasswordResetEmail,
  onAuthStateChanged
} from 'firebase/auth';

// Create the context
export const AuthContext = createContext({
  user: null,
  loading: true,
  login: async () => {},
  register: async () => {},
  logout: async () => {},
  resetPassword: async () => {}
});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Listen for auth state changes
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
      setLoading(false);
    });

    // Clean up subscription
    return () => unsubscribe();
  }, []);

  // Login function
  const login = async (email, password) => {
    try {
      const result = await signInWithEmailAndPassword(auth, email, password);
      return result.user;
    } catch (error) {
      throw new Error(error.message);
    }
  };

  // Register function
  const register = async (email, password, displayName) => {
    try {
      const result = await createUserWithEmailAndPassword(auth, email, password);
      // Set display name (could be extended to update profile)
      await updateProfile(result.user, { displayName });
      return result.user;
    } catch (error) {
      throw new Error(error.message);
    }
  };

  // Logout function
  const logout = async () => {
    try {
      await signOut(auth);
    } catch (error) {
      throw new Error(error.message);
    }
  };

  // Password reset function
  const resetPassword = async (email) => {
    try {
      await sendPasswordResetEmail(auth, email);
    } catch (error) {
      throw new Error(error.message);
    }
  };

  // Create the context value
  const value = {
    user,
    loading,
    login,
    register,
    logout,
    resetPassword
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
Prompt 3: Create useAuth Hook
Create a custom hook to easily access authentication functions throughout the application.

Create/modify the file at client/src/features/auth/hooks/useAuth.js:

javascriptimport { useContext } from 'react';
import { AuthContext } from '../../../core/contexts/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  
  return context;
};

export default useAuth;
Prompt 4: Create Login Component
Create the login component for user authentication.

Create/modify the file at client/src/features/auth/components/LoginPage.js:

javascriptimport React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { Input } from '../../../shared/components/forms/Input';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useAuth } from '../hooks/useAuth';
import { Mail, Lock } from 'lucide-react';

export const LoginPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  // Get the redirect path if user was redirected to login
  const from = location.state?.from?.pathname || '/';

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      await login(formData.email, formData.password);
      // Redirect to the page user was trying to access or home
      navigate(from, { replace: true });
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
            Sign in to your account
          </h2>
        </div>

        {error && (
          <Alert type="error" message={error} />
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm space-y-4">
            <Input
              type="email"
              label="Email address"
              icon={Mail}
              required
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            />

            <Input
              type="password"
              label="Password"
              icon={Lock}
              required
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
            />
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
              />
              <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                Remember me
              </label>
            </div>

            <Link
              to="/forgot-password"
              className="text-sm font-medium text-primary-600 hover:text-primary-500"
            >
              Forgot your password?
            </Link>
          </div>

          <Button
            type="submit"
            fullWidth
            loading={loading}
          >
            Sign in
          </Button>

          <div className="text-center">
            <span className="text-sm text-gray-600">
              Don't have an account?{' '}
              <Link
                to="/register"
                className="font-medium text-primary-600 hover:text-primary-500"
              >
                Sign up
              </Link>
            </span>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;
Prompt 5: Create Register Component
Create the registration component for new user sign-up.

Create/modify the file at client/src/features/auth/components/RegisterPage.js:

javascriptimport React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Input } from '../../../shared/components/forms/Input';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useAuth } from '../hooks/useAuth';
import { User, Mail, Lock } from 'lucide-react';

export const RegisterPage = () => {
  const navigate = useNavigate();
  const { register } = useAuth();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    // Basic validation
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    if (formData.password.length < 6) {
      setError('Password must be at least 6 characters');
      return;
    }

    setLoading(true);
    try {
      await register(formData.email, formData.password, formData.name);
      navigate('/');
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
            Create your account
          </h2>
        </div>

        {error && (
          <Alert type="error" message={error} />
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm space-y-4">
            <Input
              type="text"
              label="Full name"
              icon={User}
              required
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            />

            <Input
              type="email"
              label="Email address"
              icon={Mail}
              required
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
            />

            <Input
              type="password"
              label="Password"
              icon={Lock}
              required
              value={formData.password}
              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
            />

            <Input
              type="password"
              label="Confirm password"
              icon={Lock}
              required
              value={formData.confirmPassword}
              onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
            />
          </div>

          <Button
            type="submit"
            fullWidth
            loading={loading}
          >
            Sign up
          </Button>

          <div className="text-center">
            <span className="text-sm text-gray-600">
              Already have an account?{' '}
              <Link
                to="/login"
                className="font-medium text-primary-600 hover:text-primary-500"
              >
                Sign in
              </Link>
            </span>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RegisterPage;
Prompt 6: Create AuthGuard Component
Create the component to protect routes that require authentication.

Create/modify the file at client/src/features/auth/components/AuthGuard.js:

javascriptimport React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { Loading } from '../../../shared/components/ui/Loading';

const AuthGuard = ({ children }) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loading size="lg" />
      </div>
    );
  }

  if (!user) {
    // Redirect to login page and save attempted location
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
};

export default AuthGuard;
Prompt 7: Create Toast Context
Create a toast notification system for user feedback.

Create/modify the file at client/src/core/contexts/ToastContext.js:

javascriptimport React, { createContext, useState, useCallback } from 'react';
import { X } from 'lucide-react';

export const ToastContext = createContext({
  showToast: () => {},
});

export const ToastProvider = ({ children }) => {
  const [toasts, setToasts] = useState([]);

  const showToast = useCallback((message, type = 'info', duration = 5000) => {
    const id = Date.now();
    setToasts(prev => [...prev, { id, message, type }]);

    setTimeout(() => {
      setToasts(prev => prev.filter(toast => toast.id !== id));
    }, duration);
  }, []);

  const removeToast = useCallback((id) => {
    setToasts(prev => prev.filter(toast => toast.id !== id));
  }, []);

  return (
    <ToastContext.Provider value={{ showToast }}>
      {children}
      <div className="fixed bottom-4 right-4 z-50 space-y-2">
        {toasts.map(toast => (
          <div
            key={toast.id}
            className={`
              flex items-center justify-between p-4 rounded-lg shadow-lg 
              ${toast.type === 'success' && 'bg-green-500 text-white'}
              ${toast.type === 'error' && 'bg-red-500 text-white'}
              ${toast.type === 'info' && 'bg-blue-500 text-white'}
              ${toast.type === 'warning' && 'bg-yellow-500 text-white'}
            `}
          >
            <p>{toast.message}</p>
            <button
              onClick={() => removeToast(toast.id)}
              className="ml-4 hover:opacity-75"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        ))}
      </div>
    </ToastContext.Provider>
  );
};

export default ToastProvider;
Prompt 8: Create useToast Hook
Create a custom hook to access the toast notification system.

Create/modify the file at client/src/shared/hooks/useToast.js:

javascriptimport { useContext } from 'react';
import { ToastContext } from '../../core/contexts/ToastContext';

export const useToast = () => {
  const context = useContext(ToastContext);
  
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  
  return context;
};

export default useToast;
Prompt 9: Create Layout Components
Create the base layout components for the application.

Create/modify the file at client/src/shared/components/layout/Layout.js:

javascriptimport React from 'react';
import { Outlet } from 'react-router-dom';
import { Navbar } from './Navbar';
import { Sidebar } from './Sidebar';
import { Footer } from './Footer';

export const Layout = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <div className="flex h-[calc(100vh-4rem)]">
        <Sidebar />
        <main className="flex-1 p-6 overflow-auto">
          <div className="max-w-7xl mx-auto">
            <Outlet />
          </div>
        </main>
      </div>
      <Footer />
    </div>
  );
};

export default Layout;

Create/modify the file at client/src/shared/components/layout/Navbar.js:

javascriptimport React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../../features/auth/hooks/useAuth';
import { Bell, Settings, User } from 'lucide-react';
import { Button } from '../forms/Button';

export const Navbar = () => {
  const { user, logout } = useAuth();

  return (
    <nav className="bg-white border-b">
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between h-16">
          <div className="flex items-center">
            <Link to="/" className="text-xl font-bold text-primary-600">
              Receipt Scanner
            </Link>
          </div>
          
          {user && (
            <div className="flex items-center space-x-4">
              <Link 
                to="/notifications" 
                className="p-2 text-gray-400 hover:text-gray-500"
              >
                <Bell className="w-6 h-6" />
              </Link>
              
              <Link 
                to="/settings" 
                className="p-2 text-gray-400 hover:text-gray-500"
              >
                <Settings className="w-6 h-6" />
              </Link>

              <div className="relative">
                <Button
                  variant="secondary"
                  onClick={logout}
                >
                  <User className="w-5 h-5 mr-2" />
                  Logout
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

Create/modify the file at client/src/shared/components/layout/Sidebar.js:

javascriptimport React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { 
  Home, 
  Receipt, 
  PieChart, 
  Settings,
  Upload
} from 'lucide-react';

export const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: '/', label: 'Dashboard', icon: Home },
    { path: '/receipts', label: 'Receipts', icon: Receipt },
    { path: '/upload', label: 'Upload', icon: Upload },
    { path: '/reports', label: 'Reports', icon: PieChart },
    { path: '/settings', label: 'Settings', icon: Settings },
  ];

  return (
    <div className="w-64 bg-white border-r h-screen">
      <div className="p-4">
        {menuItems.map((item) => {
          const Icon = item.icon;
          const isActive = location.pathname === item.path;
          
          return (
            <Link
              key={item.path}
              to={item.path}
              className={`
                flex items-center space-x-2 p-2 rounded-lg mb-1
                ${isActive 
                  ? 'bg-primary-50 text-primary-600' 
                  : 'text-gray-600 hover:bg-gray-50'}
              `}
            >
              <Icon className="h-5 w-5" />
              <span>{item.label}</span>
            </Link>
          );
        })}
      </div>
    </div>
  );
};

export default Sidebar;
Prompt 10: Create Core UI Components
Create the essential UI components used throughout the application.

Create/modify the file at client/src/shared/components/forms/Button.js:

javascriptimport React from 'react';
import { Loading } from '../ui/Loading';

export const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  loading = false,
  disabled = false,
  fullWidth = false,
  icon: Icon,
  onClick,
  type = 'button',
  className = '',
  ...props 
}) => {
  const baseStyles = 'inline-flex items-center justify-center font-medium transition-colors duration-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',
    secondary: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-primary-500',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500'
  };

  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-sm',
    lg: 'px-6 py-3 text-base'
  };

  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled || loading}
      className={`
        ${baseStyles}
        ${variants[variant]}
        ${sizes[size]}
        ${fullWidth ? 'w-full' : ''}
        ${disabled || loading ? 'opacity-50 cursor-not-allowed' : ''}
        ${className}
      `}
      {...props}
    >
      {loading && (
        <Loading size="sm" className="mr-2" />
      )}
      {Icon && !loading && (
        <Icon className={`w-5 h-5 ${children ? 'mr-2' : ''}`} />
      )}
      {children}
    </button>
  );
};

export default Button;

Create/modify the file at client/src/shared/components/forms/Input.js:

javascriptimport React from 'react';

export const Input = ({ 
  icon: Icon, 
  error, 
  label, 
  className = '', 
  ...props 
}) => {
  return (
    <div className="w-full">
      {label && (
        <label className="block text-sm font-medium text-gray-700 mb-1">
          {label}
        </label>
      )}
      <div className="relative">
        {Icon && (
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Icon className="h-5 w-5 text-gray-400" />
          </div>
        )}
        <input
          className={`
            w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-300 focus:border-primary-300 outline-none transition-all duration-200
            ${Icon ? 'pl-10' : ''}
            ${error ? 'border-red-500 focus:ring-red-500' : ''}
            ${className}
          `}
          {...props}
        />
      </div>
      {error && (
        <p className="mt-1 text-sm text-red-500">{error}</p>
      )}
    </div>
  );
};

export default Input;

Create/modify the file at client/src/shared/components/ui/Card.js:

javascriptimport React from 'react';

export const Card = ({ children, className = '', ...props }) => {
  return (
    <div 
      className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}
      {...props}
    >
      {children}
    </div>
  );
};

export default Card;

Create/modify the file at client/src/shared/components/ui/Alert.js:

javascriptimport React from 'react';
import { XCircle, CheckCircle, AlertTriangle, Info } from 'lucide-react';

export const Alert = ({ 
  type = 'info', 
  title, 
  message,
  onClose 
}) => {
  const types = {
    success: {
      icon: CheckCircle,
      classes: 'bg-green-50 text-green-800 border-green-200'
    },
    error: {
      icon: XCircle,
      classes: 'bg-red-50 text-red-800 border-red-200'
    },
    warning: {
      icon: AlertTriangle,
      classes: 'bg-yellow-50 text-yellow-800 border-yellow-200'
    },
    info: {
      icon: Info,
      classes: 'bg-blue-50 text-blue-800 border-blue-200'
    }
  };

  const { icon: Icon, classes } = types[type];

  return (
    <div className={`p-4 rounded-lg border ${classes}`}>
      <div className="flex">
        <Icon className="h-5 w-5 mr-3" />
        <div className="flex-1">
          {title && <h3 className="font-medium">{title}</h3>}
          {message && <p className="text-sm mt-1">{message}</p>}
        </div>
        {onClose && (
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <span className="sr-only">Close</span>
            <XCircle className="h-5 w-5" />
          </button>
        )}
      </div>
    </div>
  );
};

export default Alert;

Create/modify the file at client/src/shared/components/ui/Loading.js:

javascriptimport React from 'react';

export const Loading = ({ size = 'md' }) => {
  const sizes = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8',
    lg: 'h-12 w-12'
  };

  return (
    <div className="flex justify-center items-center">
      <div className={`${sizes[size]} animate-spin rounded-full border-2 border-gray-300 border-t-primary-600`} />
    </div>
  );
};

export default Loading;
Prompt 11: Create Receipt API Service
Create the API service for receipt management.

Create/modify the file at client/src/features/receipts/services/receipts.js:

javascriptimport axios from 'axios';
import { auth } from '../../../core/config/firebase';

const API_URL = process.RetryClaude hit the max length for a message and has paused its response. You can write Continue to keep the chat going.IContinueEditLet me continue with the detailed workplan for the Receipt Scanner application implementation.
Prompt 11: Create Receipt API Service
Create the API service for receipt management.

Create/modify the file at client/src/features/receipts/services/receipts.js:

javascriptimport axios from 'axios';
import { auth } from '../../../core/config/firebase';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';

// Get authentication token
const getAuthToken = async () => {
  const user = auth.currentUser;
  if (!user) {
    throw new Error('User not authenticated');
  }
  return await user.getIdToken();
};

export const receiptApi = {
  // Create new receipt
  createReceipt: async (receiptData, imageFile = null) => {
    try {
      const token = await getAuthToken();
      
      if (imageFile) {
        // Create form data for file upload
        const formData = new FormData();
        formData.append('receipt', imageFile);
        
        // Add receipt data as JSON field
        formData.append('data', JSON.stringify(receiptData));
        
        const response = await axios.post(
          `${API_URL}/api/receipts/upload`,
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
              'Authorization': `Bearer ${token}`
            }
          }
        );
        
        return response.data;
      } else {
        // No image, just send JSON data
        const response = await axios.post(
          `${API_URL}/api/receipts`,
          receiptData,
          {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            }
          }
        );
        
        return response.data;
      }
    } catch (error) {
      throw new Error(`Failed to create receipt: ${error.response?.data?.message || error.message}`);
    }
  },

  // Get receipts with filters
  getReceipts: async (filters = {}) => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.get(
        `${API_URL}/api/receipts`,
        {
          params: filters,
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      throw new Error(`Failed to fetch receipts: ${error.response?.data?.message || error.message}`);
    }
  },

  // Get single receipt by ID
  getReceiptById: async (receiptId) => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.get(
        `${API_URL}/api/receipts/${receiptId}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      throw new Error(`Failed to fetch receipt: ${error.response?.data?.message || error.message}`);
    }
  },

  // Update receipt
  updateReceipt: async (receiptId, updateData, newImageFile = null) => {
    try {
      const token = await getAuthToken();
      
      if (newImageFile) {
        // Create form data for file upload
        const formData = new FormData();
        formData.append('receipt', newImageFile);
        
        // Add receipt data as JSON field
        formData.append('data', JSON.stringify(updateData));
        
        const response = await axios.put(
          `${API_URL}/api/receipts/${receiptId}/upload`,
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
              'Authorization': `Bearer ${token}`
            }
          }
        );
        
        return response.data;
      } else {
        // No image, just send JSON data
        const response = await axios.put(
          `${API_URL}/api/receipts/${receiptId}`,
          updateData,
          {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            }
          }
        );
        
        return response.data;
      }
    } catch (error) {
      throw new Error(`Failed to update receipt: ${error.response?.data?.message || error.message}`);
    }
  },

  // Delete receipt
  deleteReceipt: async (receiptId) => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.delete(
        `${API_URL}/api/receipts/${receiptId}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      throw new Error(`Failed to delete receipt: ${error.response?.data?.message || error.message}`);
    }
  }
};

export default receiptApi;
Prompt 12: Create Receipt Hooks
Create the custom hooks for receipt management.

Create/modify the file at client/src/features/receipts/hooks/useReceipts.js:

javascriptimport { useState, useEffect } from 'react';
import { useAuth } from '../../auth/hooks/useAuth';
import { receiptApi } from '../services/receipts';
import { useToast } from '../../../shared/hooks/useToast';

export const useReceipts = () => {
  const [receipts, setReceipts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth();
  const { showToast } = useToast();

  const fetchReceipts = async (filters = {}) => {
    try {
      setLoading(true);
      setError(null);
      
      if (!user) {
        throw new Error('User not authenticated');
      }
      
      const response = await receiptApi.getReceipts(filters);
      setReceipts(response.data || []);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching receipts:', err);
    } finally {
      setLoading(false);
    }
  };

  const addReceipt = async (receiptData, imageFile = null) => {
    try {
      setLoading(true);
      setError(null);
      
      if (!user) {
        throw new Error('User not authenticated');
      }
      
      const result = await receiptApi.createReceipt(receiptData, imageFile);
      
      // Refresh receipts list
      await fetchReceipts();
      
      showToast('Receipt added successfully', 'success');
      return result;
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
      console.error('Error adding receipt:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const updateReceipt = async (receiptId, receiptData, imageFile = null) => {
    try {
      setLoading(true);
      setError(null);
      
      if (!user) {
        throw new Error('User not authenticated');
      }
      
      const result = await receiptApi.updateReceipt(receiptId, receiptData, imageFile);
      
      // Update in local state
      setReceipts(prev => prev.map(receipt => 
        receipt.id === receiptId ? { ...receipt, ...receiptData } : receipt
      ));
      
      showToast('Receipt updated successfully', 'success');
      return result;
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
      console.error('Error updating receipt:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const deleteReceipt = async (receiptId) => {
    try {
      setLoading(true);
      setError(null);
      
      if (!user) {
        throw new Error('User not authenticated');
      }
      
      await receiptApi.deleteReceipt(receiptId);
      
      // Remove from local state
      setReceipts(prev => prev.filter(receipt => receipt.id !== receiptId));
      
      showToast('Receipt deleted successfully', 'success');
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
      console.error('Error deleting receipt:', err);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Fetch receipts when user changes
  useEffect(() => {
    if (user) {
      fetchReceipts();
    } else {
      setReceipts([]);
    }
  }, [user]);

  return {
    receipts,
    loading,
    error,
    fetchReceipts,
    addReceipt,
    updateReceipt,
    deleteReceipt
  };
};

export default useReceipts;
Prompt 13: Create Receipt Uploader Component
Create the component for uploading and processing receipt images.

Create/modify the file at client/src/features/receipts/components/ReceiptUploader.js:

javascriptimport React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Card } from '../../../shared/components/ui/Card';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useToast } from '../../../shared/hooks/useToast';
import { useReceipts } from '../hooks/useReceipts';
import { Camera, Upload, X, Image } from 'lucide-react';

const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ACCEPTED_TYPES = {
  'image/jpeg': ['.jpg', '.jpeg'],
  'image/png': ['.png'],
  'image/heic': ['.heic']
};

export const ReceiptUploader = ({ onSuccess, className = '' }) => {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const { addReceipt } = useReceipts();
  const { showToast } = useToast();

  // Handle dropped or selected files
  const onDrop = useCallback((acceptedFiles) => {
    const file = acceptedFiles[0];
    if (file) {
      // Validate file size
      if (file.size > MAX_FILE_SIZE) {
        setError(`File size exceeds ${MAX_FILE_SIZE / (1024 * 1024)}MB limit`);
        showToast(`File size exceeds ${MAX_FILE_SIZE / (1024 * 1024)}MB limit`, 'error');
        return;
      }

      // Create preview
      const previewUrl = URL.createObjectURL(file);
      setFile(file);
      setPreview(previewUrl);
      setError(null);
    }
  }, [showToast]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: ACCEPTED_TYPES,
    maxSize: MAX_FILE_SIZE,
    multiple: false
  });

  // Handle the upload process
  const handleUpload = async () => {
    if (!file) return;

    try {
      setLoading(true);
      setError(null);

      // Create a basic receipt object
      const receiptData = {
        date: new Date().toISOString().split('T')[0],
        total: 0, // Will be updated by OCR
        merchant: 'Unknown', // Will be updated by OCR
        category: ''
      };

      // Upload to server for processing
      const result = await addReceipt(receiptData, file);
      
      // Show success message
      showToast('Receipt uploaded successfully', 'success');
      
      // Reset the component
      handleClear();
      
      // Notify parent component
      if (onSuccess) {
        onSuccess(result);
      }
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  // Clear the selected file and preview
  const handleClear = () => {
    if (preview) {
      URL.revokeObjectURL(preview);
    }
    setFile(null);
    setPreview(null);
    setError(null);
  };

  return (
    <Card className={`p-6 ${className}`}>
      {error && (
        <Alert
          type="error"
          message={error}
          className="mb-4"
        />
      )}

      {!file ? (
        <div {...getRootProps()} className={`
          border-2 border-dashed rounded-lg p-6 text-center 
          transition-colors duration-200 cursor-pointer
          ${isDragActive ? 'border-primary-500 bg-primary-50' : 'border-gray-300 hover:border-primary-400'}
        `}>
          <input {...getInputProps()} />
          <Upload className="mx-auto h-12 w-12 text-gray-400" />
          <p className="mt-2 text-sm text-gray-600">
            {isDragActive ? 'Drop the receipt here...' : 'Drop a receipt or click to upload'}
          </p>
          <p className="text-xs text-gray-500 mt-1">
            Supported formats: JPG, PNG, HEIC (max 5MB)
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="relative">
            <img
              src={preview}
              alt="Receipt preview"
              className="w-full rounded-lg"
            />
            <Button
              className="absolute top-2 right-2"
              variant="secondary"
              size="sm"
              icon={X}
              onClick={handleClear}
              disabled={loading}
            >
              Clear
            </Button>
          </div>

          <div className="flex justify-end space-x-2">
            <Button
              variant="secondary"
              onClick={handleClear}
              disabled={loading}
            >
              Cancel
            </Button>
            <Button
              onClick={handleUpload}
              loading={loading}
              disabled={loading}
              icon={Upload}
            >
              Upload Receipt
            </Button>
          </div>
        </div>
      )}
    </Card>
  );
};

export default ReceiptUploader;
Prompt 14: Create Receipt Card Component
Create the component for displaying a receipt summary in a list.

Create/modify the file at client/src/features/receipts/components/ReceiptCard.js:

javascriptimport React from 'react';
import { format } from 'date-fns';
import { Card } from '../../../shared/components/ui/Card';
import { Badge } from '../../../shared/components/ui/Badge';
import { formatCurrency } from '../../../shared/utils/currency';
import { Receipt, AlertTriangle, Calendar, DollarSign } from 'lucide-react';

export const ReceiptCard = ({ 
  receipt,
  onClick,
  isSelected = false,
  error = null,
  className = ''
}) => {
  if (!receipt) return null;

  const {
    merchant,
    date,
    total,
    category,
    status = 'processed',
    items = []
  } = receipt;

  const getStatusColor = (status) => {
    const colors = {
      processed: 'success',
      pending: 'warning',
      failed: 'error',
      reviewing: 'info'
    };
    return colors[status] || 'default';
  };

  return (
    <Card 
      className={`
        relative hover:shadow-md transition-shadow duration-200 cursor-pointer p-4
        ${isSelected ? 'ring-2 ring-primary-500' : ''}
        ${error ? 'border-red-300' : ''}
        ${className}
      `}
      onClick={onClick}
    >
      {error && (
        <div className="absolute top-2 right-2">
          <AlertTriangle className="w-5 h-5 text-red-500" />
        </div>
      )}

      <div className="flex justify-between items-start">
        <div className="flex items-start space-x-4">
          <div className="p-2 rounded-full bg-gray-100">
            <Receipt className="w-6 h-6 text-gray-600" />
          </div>

          <div>
            <h3 className="font-medium text-gray-900">{merchant}</h3>
            
            <div className="flex items-center mt-1 text-sm text-gray-500">
              <Calendar className="w-4 h-4 mr-1" />
              {format(new Date(date), 'MMM d, yyyy')}
            </div>
            
            {items.length > 0 && (
              <div className="mt-2 text-sm text-gray-500">
                {items.length} {items.length === 1 ? 'item' : 'items'}
              </div>
            )}
          </div>
        </div>

        <div className="text-right">
          <div className="flex items-center justify-end">
            <DollarSign className="w-4 h-4 text-gray-400 mr-1" />
            <span className="text-lg font-semibold text-gray-900">
              {formatCurrency(total)}
            </span>
          </div>

          {status && (
            <Badge
              variant={getStatusColor(status)}
              size="sm"
              className="mt-2"
            >
              {status.charAt(0).toUpperCase() + status.slice(1)}
            </Badge>
          )}

          {category && (
            <div className="mt-2">
              <Badge variant="default" size="sm">
                {category}
              </Badge>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};

export default ReceiptCard;
Prompt 15: Create Badge Component for Receipt Card
Create the Badge component used in the receipt card.

Create/modify the file at client/src/shared/components/ui/Badge.js:

javascriptimport React from 'react';

export const Badge = ({ 
  children, 
  variant = 'default',
  size = 'md' 
}) => {
  const variants = {
    default: 'bg-gray-100 text-gray-800',
    primary: 'bg-primary-100 text-primary-800',
    success: 'bg-green-100 text-green-800',
    warning: 'bg-yellow-100 text-yellow-800',
    error: 'bg-red-100 text-red-800'
  };

  const sizes = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2.5 py-0.5 text-sm',
    lg: 'px-3 py-1 text-base'
  };

  return (
    <span className={`
      inline-flex items-center font-medium rounded-full
      ${variants[variant]}
      ${sizes[size]}
    `}>
      {children}
    </span>
  );
};

export default Badge;
Prompt 16: Create Receipt List Component
Create the component for displaying a list of receipts.

Create/modify the file at client/src/features/receipts/components/ReceiptList.js:

javascriptimport React, { useState, useMemo } from 'react';
import { ReceiptCard } from './ReceiptCard';
import { Button } from '../../../shared/components/forms/Button';
import { Loading } from '../../../shared/components/ui/Loading';
import { AlertCircle, ChevronLeft, ChevronRight } from 'lucide-react';

const ITEMS_PER_PAGE = 10;

export const ReceiptList = ({
  receipts = [],
  loading = false,
  error = null,
  onReceiptClick,
  selectedReceiptId = null,
  className = ''
}) => {
  const [currentPage, setCurrentPage] = useState(1);

  const paginatedReceipts = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    return receipts.slice(startIndex, endIndex);
  }, [receipts, currentPage]);

  const totalPages = Math.ceil(receipts.length / ITEMS_PER_PAGE);

  const handlePageChange = (pageNum) => {
    setCurrentPage(pageNum);
    // Scroll to top of list
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center py-8">
        <Loading size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center py-8 text-gray-500">
        <AlertCircle className="w-12 h-12 mb-4 text-red-500" />
        <p className="text-lg font-medium">Failed to load receipts</p>
        <p className="text-sm mt-2">{error}</p>
      </div>
    );
  }

  if (receipts.length === 0) {
    return (
      <div className="flex flex-col items-center py-8 text-gray-500">
        <p className="text-lg font-medium">No receipts found</p>
        <p className="text-sm mt-2">Try adjusting your filters or upload a new receipt</p>
      </div>
    );
  }

  return (
    <div className={className}>
      {/* Receipts Grid */}
      <div className="grid gap-4 mb-6">
        {paginatedReceipts.map((receipt) => (
          <ReceiptCard
            key={receipt.id}
            receipt={receipt}
            onClick={() => onReceiptClick?.(receipt)}
            isSelected={receipt.id === selectedReceiptId}
          />
        ))}
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex justify-between items-center pt-4 border-t">
          <div className="text-sm text-gray-500">
            Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to{' '}
            {Math.min(currentPage * ITEMS_PER_PAGE, receipts.length)} of{' '}
            {receipts.length} receipts
          </div>

          <div className="flex space-x-2">
            <Button
              variant="secondary"
              size="sm"
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              icon={ChevronLeft}
            >
              Previous
            </Button>

            {/* Page Numbers */}
            <div className="flex space-x-1">
              {Array.from({ length: totalPages }, (_, i) => i + 1)
                .filter(pageNum => {
                  // Show first page, last page, current page, and pages around current
                  return (
                    pageNum === 1 ||
                    pageNum === totalPages ||
                    Math.abs(pageNum - currentPage) <= 1
                  );
                })
                .map((pageNum, index, array) => {
                  // Add ellipsis
                  if (index > 0 && pageNum - array[index - 1] > 1) {
                    return (
                      <React.Fragment key={`ellipsis-${pageNum}`}>
                        <Button
                          variant="secondary"
                          size="sm"
                          disabled
                          className="px-2"
                        >
                          ...
                        </Button>
                        <Button
                          variant={pageNum === currentPage ? "primary" : "secondary"}
                          size="sm"
                          onClick={() => handlePageChange(pageNum)}
                          className="px-4"
                        >
                          {pageNum}
                        </Button>
                      </React.Fragment>
                    );
                  }

                  return (
                    <Button
                      key={pageNum}
                      variant={pageNum === currentPage ? "primary" : "secondary"}
                      size="sm"
                      onClick={() => handlePageChange(pageNum)}
                      className="px-4"
                    >
                      {pageNum}
                    </Button>
                  );
                })}
            </div>

            <Button
              variant="secondary"
              size="sm"
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              icon={ChevronRight}
            >
              Next
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReceiptList;
Prompt 17: Create Receipt Detail Component
Create the component for displaying detailed receipt information.

Create/modify the file at client/src/features/receipts/components/ReceiptDetail.js:

javascriptimport React from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { formatCurrency } from '../../../shared/utils/currency';
import { formatDate } from '../../../shared/utils/date';
import { Download, Printer } from 'lucide-react';
import { Button } from '../../../shared/components/forms/Button';

export const ReceiptDetail = ({ 
  receipt,
  onDownload,
  onPrint,
  className = ''
}) => {
  const TotalSection = () => (
    <div className="space-y-2">
      <div className="flex justify-between text-sm text-gray-500">
        <span>Subtotal</span>
        <span>{formatCurrency(receipt.subtotal || receipt.total)}</span>
      </div>
      {receipt.tax > 0 && (
        <div className="flex justify-between text-sm text-gray-500">
          <span>Tax</span>
          <span>{formatCurrency(receipt.tax)}</span>
        </div>
      )}
      {receipt.discount > 0 && (
        <div className="flex justify-between text-sm text-gray-500">
          <span>Discount</span>
          <span>-{formatCurrency(receipt.discount)}</span>
        </div>
      )}
      <div className="flex justify-between text-base font-semibold text-gray-900 pt-2 border-t">
        <span>Total</span>
        <span>{formatCurrency(receipt.total)}</span>
      </div>
    </div>
  );

  return (
    <Card className={className}>
      <div className="p-6">
        {/* Header with Actions */}
        <div className="flex justify-between items-start mb-6">
          <div>
            <h3 className="text-xl font-semibold text-gray-900">
              {receipt.merchant}
            </h3>
            <p className="text-sm text-gray-500">
              {formatDate(receipt.date)}
            </p>
            {receipt.category && (
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mt-1">
                {receipt.category}
              </span>
            )}
          </div>
          <div className="flex space-x-2">
            {onPrint && (
              <Button
                variant="secondary"
                size="sm"
                icon={Printer}
                onClick={onPrint}
              >
                Print
              </Button>
            )}
            {onDownload && receipt.imageUrl && (
              <Button
                variant="secondary"
                size="sm"
                icon={Download}
                onClick={onDownload}
              >
                Download
              </Button>
            )}
          </div>
        </div>

        {/* Items Section */}
        {receipt.items && receipt.items.length > 0 && (
          <div className="mb-6">
            <h4 className="text-sm font-medium text-gray-700 mb-4">Items</h4>
            <div className="divide-y">
              {receipt.items.map((item, index) => (
                <div key={index} className="py-3 flex justify-between">
                  <div className="flex-1">
                    <span className="text-sm font-medium text-gray-900">
                      {item.name}
                    </span>
                    {item.description && (
                      <p className="text-sm text-gray-500 mt-0.5">
                        {item.description}
                      </p>
                    )}
                    {item.quantity > 1 && (
                      <p className="text-sm text-gray-500 mt-0.5">
                        Quantity: {item.quantity}
                      </p>
                    )}
                  </div>
                  <div className="text-right">
                    <span className="text-sm font-medium text-gray-900">
                      {formatCurrency(item.price * (item.quantity || 1))}
                    </span>
                    {item.quantity > 1 && (
                      <p className="text-xs text-gray-500">
                        {formatCurrency(item.price)} each
                      </p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Totals Section */}
        <div className="bg-gray-50 p-4 rounded-lg mb-6">
          <TotalSection />
        </div>

        {/* Additional Details */}
        <div className="grid grid-cols-2 gap-6">
          {receipt.paymentMethod && (
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-1">
                Payment Method
              </h4>
              <p className="text-sm text-gray-900">
                {receipt.paymentMethod}
              </p>
            </div>
          )}
          {receipt.transactionId && (
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-1">
                Transaction ID
              </h4>
              <p className="text-sm text-gray-900">
                {receipt.transactionId}
              </p>
            </div>
          )}
        </div>

        {/* Notes Section */}
        {receipt.notes && (
          <div className="mt-6">
            <h4 className="text-sm font-medium text-gray-700 mb-2">
              Notes
            </h4>
            <p className="text-sm text-gray-600 whitespace-pre-wrap rounded-lg bg-gray-50 p-3">
              {receipt.notes}
            </p>
          </div>
        )}

        {/* Receipt Image */}
        {receipt.imageUrl && (
          <div className="mt-6">
            <h4 className="text-sm font-medium text-gray-700 mb-2">
              Receipt Image
            </h4>
            <div className="rounded-lg overflow-hidden border">
              <img
                src={receipt.imageUrl}
                alt="Receipt"
                className="w-full h-auto"
              />
            </div>
          </div>
        )}

        {/* Metadata */}
        <div className="mt-6RetryClaude hit the max length for a message and has paused its response. You can write Continue to keep the chat going.IContinueEditLet me continue with the detailed implementation plan for the Receipt Scanner application.
Prompt 17: Create Receipt Detail Component (continued)
Continuing the Receipt Detail component implementation:
javascript        {/* Metadata */}
        <div className="mt-6 pt-6 border-t">
          <div className="flex justify-between text-xs text-gray-500">
            <span>Added on {formatDate(receipt.createdAt || receipt.date)}</span>
            {receipt.updatedAt && (
              <span>Last updated {formatDate(receipt.updatedAt)}</span>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default ReceiptDetail;
Prompt 18: Create Receipt Detail Page Component
Create the page component for viewing receipt details.

Create/modify the file at client/src/features/receipts/pages/ReceiptDetailPage.js:

javascriptimport React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useReceipts } from '../hooks/useReceipts';
import { useToast } from '../../../shared/hooks/useToast';
import { PageHeader } from '../../../shared/components/layout/PageHeader';
import { ReceiptDetail } from '../components/ReceiptDetail';
import { ReceiptEdit } from '../components/ReceiptEdit';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { Loading } from '../../../shared/components/ui/Loading';
import { Modal } from '../../../shared/components/ui/Modal';
import { ChevronLeft, Edit, Trash, Download } from 'lucide-react';

const ReceiptDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { showToast } = useToast();
  const { getReceiptById, updateReceipt, deleteReceipt } = useReceipts();

  const [receipt, setReceipt] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  // Fetch receipt data
  useEffect(() => {
    const fetchReceipt = async () => {
      try {
        setLoading(true);
        const data = await getReceiptById(id);
        setReceipt(data);
      } catch (err) {
        setError(err.message);
        console.error('Error fetching receipt:', err);
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchReceipt();
    }
  }, [id, getReceiptById]);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = async (updatedData) => {
    try {
      await updateReceipt(id, updatedData);
      setReceipt(prevReceipt => ({
        ...prevReceipt,
        ...updatedData
      }));
      setIsEditing(false);
      showToast('Receipt updated successfully', 'success');
    } catch (err) {
      showToast(err.message || 'Failed to update receipt', 'error');
      console.error('Error updating receipt:', err);
    }
  };

  const handleDelete = async () => {
    try {
      await deleteReceipt(id);
      showToast('Receipt deleted successfully', 'success');
      navigate('/receipts');
    } catch (err) {
      showToast(err.message || 'Failed to delete receipt', 'error');
      console.error('Error deleting receipt:', err);
    }
  };

  const handleDownload = async () => {
    try {
      if (!receipt.imageUrl) {
        throw new Error('No image available');
      }

      // Create a link element and trigger download
      const link = document.createElement('a');
      link.href = receipt.imageUrl;
      link.download = `receipt-${receipt.merchant}-${id}.jpg`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (err) {
      showToast('Failed to download receipt image', 'error');
      console.error('Error downloading receipt:', err);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loading size="lg" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4">
        <Alert 
          type="error"
          title="Error loading receipt"
          message={error}
        />
        <Button
          variant="secondary"
          icon={ChevronLeft}
          onClick={() => navigate('/receipts')}
          className="mt-4"
        >
          Back to Receipts
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      <PageHeader
        title={isEditing ? "Edit Receipt" : "Receipt Details"}
        showBack
        onBack={() => navigate('/receipts')}
        action={
          !isEditing && (
            <div className="flex space-x-2">
              {receipt.imageUrl && (
                <Button
                  variant="secondary"
                  icon={Download}
                  onClick={handleDownload}
                >
                  Download
                </Button>
              )}
              <Button
                variant="secondary"
                icon={Edit}
                onClick={handleEdit}
              >
                Edit
              </Button>
              <Button
                variant="danger"
                icon={Trash}
                onClick={() => setShowDeleteModal(true)}
              >
                Delete
              </Button>
            </div>
          )
        }
      />

      {isEditing ? (
        <ReceiptEdit
          receipt={receipt}
          onSave={handleSave}
          onCancel={() => setIsEditing(false)}
        />
      ) : (
        <ReceiptDetail
          receipt={receipt}
          imageUrl={receipt.imageUrl}
          onDownload={handleDownload}
        />
      )}

      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="Delete Receipt"
        size="sm"
      >
        <div className="space-y-4">
          <p className="text-gray-600">
            Are you sure you want to delete this receipt? This action cannot be undone.
          </p>
          <div className="flex justify-end space-x-2">
            <Button
              variant="secondary"
              onClick={() => setShowDeleteModal(false)}
            >
              Cancel
            </Button>
            <Button
              variant="danger"
              icon={Trash}
              onClick={handleDelete}
            >
              Delete
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default ReceiptDetailPage;
Prompt 19: Create PageHeader Component
Create the page header component used in the receipt detail page.

Create/modify the file at client/src/shared/components/layout/PageHeader.js:

javascriptimport React from 'react';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import { Button } from '../forms/Button';

export const PageHeader = ({ 
  title, 
  subtitle, 
  action,
  showBack = false,
  onBack,
  className = ''
}) => {
  const navigate = useNavigate();

  const handleBack = () => {
    if (onBack) {
      onBack();
    } else {
      navigate(-1);
    }
  };

  return (
    <div className={`flex justify-between items-center mb-6 ${className}`}>
      <div>
        {showBack && (
          <button
            onClick={handleBack}
            className="flex items-center text-gray-600 hover:text-gray-900 mb-2"
          >
            <ArrowLeft className="w-4 h-4 mr-1" />
            Back
          </button>
        )}
        <h1 className="text-2xl font-bold text-gray-900">{title}</h1>
        {subtitle && (
          <p className="mt-1 text-sm text-gray-500">{subtitle}</p>
        )}
      </div>
      {action && (
        <div>
          {typeof action === 'function' ? action() : action}
        </div>
      )}
    </div>
  );
};

export default PageHeader;
Prompt 20: Create Modal Component
Create the modal component used for confirmation dialogs.

Create/modify the file at client/src/shared/components/ui/Modal.js:

javascriptimport React from 'react';
import { X } from 'lucide-react';

export const Modal = ({ 
  isOpen, 
  onClose, 
  title, 
  children, 
  size = 'md' 
}) => {
  if (!isOpen) return null;

  const sizes = {
    sm: 'max-w-md',
    md: 'max-w-lg',
    lg: 'max-w-2xl',
    xl: 'max-w-4xl'
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center p-4">
        <div className="fixed inset-0 bg-black opacity-30" onClick={onClose} />
        <div className={`relative bg-white rounded-lg shadow-xl ${sizes[size]} w-full`}>
          <div className="flex items-center justify-between p-4 border-b">
            <h3 className="text-lg font-semibold">{title}</h3>
            <button
              onClick={onClose}
              className="p-1 hover:bg-gray-100 rounded-full"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          <div className="p-6">{children}</div>
        </div>
      </div>
    </div>
  );
};

export default Modal;
Prompt 21: Create Receipt Edit Component
Create the component for editing receipt details.

Create/modify the file at client/src/features/receipts/components/ReceiptEdit.js:

javascriptimport React, { useState, useEffect } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Input } from '../../../shared/components/forms/Input';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { Dropdown } from '../../../shared/components/forms/Dropdown';
import { useCategories } from '../../categories/hooks/useCategories';
import { parseCurrencyInput } from '../../../shared/utils/currency';
import { Store, Calendar, DollarSign, Tag, Plus, Trash, Save } from 'lucide-react';

export const ReceiptEdit = ({
  receipt,
  onSave,
  onCancel,
  loading = false,
  error = null
}) => {
  const { categories, loading: categoriesLoading } = useCategories();
  
  const [formData, setFormData] = useState({
    merchant: '',
    date: new Date().toISOString().split('T')[0],
    total: '',
    category: '',
    items: [{ name: '', price: '', quantity: 1 }],
    notes: ''
  });

  const [validationErrors, setValidationErrors] = useState({});

  useEffect(() => {
    if (receipt) {
      setFormData({
        merchant: receipt.merchant || '',
        date: receipt.date ? new Date(receipt.date).toISOString().split('T')[0] : '',
        total: receipt.total ? receipt.total.toString() : '',
        category: receipt.category || '',
        items: receipt.items?.length > 0 
          ? receipt.items 
          : [{ name: '', price: '', quantity: 1 }],
        notes: receipt.notes || ''
      });
    }
  }, [receipt]);

  const handleItemChange = (index, field, value) => {
    const updatedItems = [...formData.items];
    updatedItems[index] = {
      ...updatedItems[index],
      [field]: field === 'price' ? parseCurrencyInput(value) : value
    };

    // Recalculate total
    const newTotal = updatedItems.reduce((sum, item) => {
      const price = parseFloat(item.price) || 0;
      const quantity = parseInt(item.quantity) || 1;
      return sum + (price * quantity);
    }, 0);

    setFormData(prev => ({
      ...prev,
      items: updatedItems,
      total: newTotal.toFixed(2)
    }));
  };

  const addItem = () => {
    setFormData(prev => ({
      ...prev,
      items: [...prev.items, { name: '', price: '', quantity: 1 }]
    }));
  };

  const removeItem = (index) => {
    const updatedItems = formData.items.filter((_, i) => i !== index);
    setFormData(prev => ({
      ...prev,
      items: updatedItems
    }));
  };

  const validateForm = () => {
    const errors = {};

    if (!formData.merchant.trim()) {
      errors.merchant = 'Merchant name is required';
    }

    if (!formData.date) {
      errors.date = 'Date is required';
    }

    if (!formData.total) {
      errors.total = 'Total amount is required';
    } else if (isNaN(parseFloat(formData.total))) {
      errors.total = 'Total must be a valid number';
    }

    // Validate items
    formData.items.forEach((item, index) => {
      if (item.name.trim() && !item.price) {
        errors[`items.${index}.price`] = 'Price is required';
      }
      if (item.price && !item.name.trim()) {
        errors[`items.${index}.name`] = 'Item name is required';
      }
    });

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Call onSave with formatted data
    const submissionData = {
      ...formData,
      total: parseFloat(formData.total),
      items: formData.items
        .filter(item => item.name.trim() && item.price)
        .map(item => ({
          ...item,
          price: parseFloat(item.price),
          quantity: parseInt(item.quantity) || 1
        }))
    };

    await onSave(submissionData);
  };

  return (
    <Card>
      <form onSubmit={handleSubmit} className="p-6 space-y-6">
        {error && (
          <Alert type="error" message={error} />
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Input
            label="Merchant"
            icon={Store}
            value={formData.merchant}
            onChange={(e) => setFormData({ ...formData, merchant: e.target.value })}
            error={validationErrors.merchant}
            required
          />

          <Input
            type="date"
            label="Date"
            icon={Calendar}
            value={formData.date}
            onChange={(e) => setFormData({ ...formData, date: e.target.value })}
            error={validationErrors.date}
            required
          />

          <Input
            type="text"
            label="Total Amount"
            icon={DollarSign}
            value={formData.total}
            onChange={(e) => setFormData({ 
              ...formData, 
              total: parseCurrencyInput(e.target.value)
            })}
            error={validationErrors.total}
            required
          />

          <Dropdown
            label="Category"
            options={categories?.map(cat => ({
              value: cat.id,
              label: cat.name
            })) || []}
            value={formData.category}
            onChange={(value) => setFormData({ ...formData, category: value })}
            error={validationErrors.category}
            disabled={categoriesLoading}
          />
        </div>

        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-medium text-gray-900">Items</h3>
            <Button
              type="button"
              variant="secondary"
              size="sm"
              icon={Plus}
              onClick={addItem}
            >
              Add Item
            </Button>
          </div>

          {formData.items.map((item, index) => (
            <div key={index} className="flex gap-4">
              <Input
                placeholder="Item name"
                value={item.name}
                onChange={(e) => handleItemChange(index, 'name', e.target.value)}
                error={validationErrors[`items.${index}.name`]}
                className="flex-1"
              />
              <Input
                type="text"
                placeholder="Price"
                value={item.price}
                onChange={(e) => handleItemChange(index, 'price', e.target.value)}
                error={validationErrors[`items.${index}.price`]}
                className="w-32"
              />
              <Input
                type="number"
                placeholder="Qty"
                value={item.quantity}
                onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
                error={validationErrors[`items.${index}.quantity`]}
                min="1"
                className="w-24"
              />
              {formData.items.length > 1 && (
                <Button
                  type="button"
                  variant="danger"
                  size="sm"
                  icon={Trash}
                  onClick={() => removeItem(index)}
                />
              )}
            </div>
          ))}
        </div>

        <Input
          label="Notes"
          type="textarea"
          value={formData.notes}
          onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
          className="h-24"
          placeholder="Add any additional notes here..."
        />

        <div className="flex justify-end space-x-4">
          <Button
            type="button"
            variant="secondary"
            onClick={onCancel}
            disabled={loading}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            loading={loading}
            icon={Save}
          >
            Save Receipt
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default ReceiptEdit;
Prompt 22: Create Dropdown Component
Create the dropdown component used in the receipt edit form.

Create/modify the file at client/src/shared/components/forms/Dropdown.js:

javascriptimport React, { useState } from 'react';
import { ChevronDown } from 'lucide-react';

export const Dropdown = ({ 
  options, 
  value, 
  onChange, 
  placeholder = 'Select an option',
  label,
  disabled = false,
  error,
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);

  const selected = options.find(option => option.value === value);

  return (
    <div className={`relative ${className}`}>
      {label && (
        <label className="block text-sm font-medium text-gray-700 mb-1">
          {label}
        </label>
      )}
      <button
        type="button"
        className={`
          w-full px-4 py-2 text-left bg-white border rounded-lg
          focus:outline-none focus:ring-2 focus:ring-primary-300
          ${error ? 'border-red-500' : 'border-gray-300'}
          ${disabled ? 'bg-gray-100 cursor-not-allowed' : 'cursor-pointer'}
        `}
        onClick={() => !disabled && setIsOpen(!isOpen)}
        disabled={disabled}
      >
        <div className="flex items-center justify-between">
          <span className={!selected ? 'text-gray-500' : ''}>
            {selected ? selected.label : placeholder}
          </span>
          <ChevronDown className={`w-5 h-5 transition-transform ${isOpen ? 'transform rotate-180' : ''}`} />
        </div>
      </button>

      {isOpen && !disabled && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg">
          {options.map((option) => (
            <button
              key={option.value}
              type="button"
              className={`
                w-full px-4 py-2 text-left hover:bg-gray-50
                ${option.value === value ? 'bg-primary-50 text-primary-600' : ''}
              `}
              onClick={() => {
                onChange(option.value);
                setIsOpen(false);
              }}
            >
              {option.label}
            </button>
          ))}
        </div>
      )}
      
      {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
    </div>
  );
};

export default Dropdown;
Prompt 23: Create Categories API and Hook
Create the API service and hook for category management.

Create/modify the file at client/src/features/categories/services/categories.js:

javascriptimport axios from 'axios';
import { auth } from '../../../core/config/firebase';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';

// Default categories if no custom ones exist
export const DEFAULT_CATEGORIES = [
  { id: 'groceries', name: 'Groceries', color: '#22C55E' },
  { id: 'dining', name: 'Dining', color: '#F59E0B' },
  { id: 'transportation', name: 'Transportation', color: '#3B82F6' },
  { id: 'utilities', name: 'Utilities', color: '#8B5CF6' },
  { id: 'entertainment', name: 'Entertainment', color: '#EC4899' },
  { id: 'shopping', name: 'Shopping', color: '#06B6D4' },
  { id: 'health', name: 'Health', color: '#EF4444' },
  { id: 'other', name: 'Other', color: '#6B7280' }
];

// Get authentication token
const getAuthToken = async () => {
  const user = auth.currentUser;
  if (!user) {
    throw new Error('User not authenticated');
  }
  return await user.getIdToken();
};

export const categoriesApi = {
  getCategories: async () => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.get(
        `${API_URL}/api/categories`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      const categories = response.data?.data || [];
      
      // Return default categories if no custom ones exist
      return categories.length > 0 ? categories : DEFAULT_CATEGORIES;
    } catch (error) {
      console.error('Failed to fetch categories:', error);
      // Return defaults on error
      return DEFAULT_CATEGORIES;
    }
  },

  createCategory: async (categoryData) => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.post(
        `${API_URL}/api/categories`,
        categoryData,
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      throw new Error(`Failed to create category: ${error.response?.data?.message || error.message}`);
    }
  },

  updateCategory: async (categoryId, categoryData) => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.put(
        `${API_URL}/api/categories/${categoryId}`,
        categoryData,
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      throw new Error(`Failed to update category: ${error.response?.data?.message || error.message}`);
    }
  },

  deleteCategory: async (categoryId) => {
    try {
      const token = await getAuthToken();
      
      const response = await axios.delete(
        `${API_URL}/api/categories/${categoryId}`,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      return response.data;
    } catch (error) {
      throw new Error(`Failed to delete category: ${error.response?.data?.message || error.message}`);
    }
  }
};

export default categoriesApi;

Create/modify the file at client/src/features/categories/hooks/useCategories.js:

javascriptimport { useState, useEffect } from 'react';
import { useAuth } from '../../auth/hooks/useAuth';
import { categoriesApi, DEFAULT_CATEGORIES } from '../services/categories';
import { useToast } from '../../../shared/hooks/useToast';

export const useCategories = () => {
  const [categories, setCategories] = useState(DEFAULT_CATEGORIES);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const { user } = useAuth();
  const { showToast } = useToast();

  const fetchCategories = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const data = await categoriesApi.getCategories();
      setCategories(data);
    } catch (err) {
      setError(err.message);
      console.error('Error fetching categories:', err);
    } finally {
      setLoading(false);
    }
  };

  const addCategory = async (categoryData) => {
    try {
      setLoading(true);
      setError(null);
      
      const newCategory = await categoriesApi.createCategory(categoryData);
      setCategories(prev => [...prev, newCategory]);
      
      showToast('Category added successfully', 'success');
      return newCategory;
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const updateCategory = async (categoryId, categoryData) => {
    try {
      setLoading(true);
      setError(null);
      
      await categoriesApi.updateCategory(categoryId, categoryData);
      
      setCategories(prev => 
        prev.map(category => 
          category.id === categoryId ? { ...category, ...categoryData } : category
        )
      );
      
      showToast('Category updated successfully', 'success');
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  const deleteCategory = async (categoryId) => {
    try {
      setLoading(true);
      setError(null);
      
      await categoriesApi.deleteCategory(categoryId);
      
      setCategories(prev => prev.filter(category => category.id !== categoryId));
      
      showToast('Category deleted successfully', 'success');
    } catch (err) {
      setError(err.message);
      showToast(err.message, 'error');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user) {
      fetchCategories();
    }
  }, [user]);

  return {
    categories,
    loading,
    error,
    fetchCategories,
    addCategory,
    updateCategory,
    deleteCategory
  };
};

export default useCategories;
Prompt 24: Create Utility Functions for Date and Currency
Create utility functions for date and currency formatting that will be used throughout the application.
Create/modify the file at client/src/shared/utils/currency.js:
javascript/**
 * Format a number as currency with proper symbol and decimal places
 * @param {number|string} amount - The amount to format
 * @param {string} currency - Currency code (default: 'USD')
 * @returns {string} Formatted currency string
 */
export const formatCurrency = (amount, currency = 'USD', locale = 'en-US') => {
  if (typeof amount !== 'number') {
    amount = parseFloat(amount) || 0;
  }

  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency,
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  }).format(amount);
};

/**
 * Parse currency input, cleaning and validating the value
 * @param {string} value - Raw input to be parsed
 * @returns {string} Cleaned currency string
 */
export const parseCurrencyInput = (value) => {
  // Remove all non-digit characters except decimal point
  const cleanValue = value.replace(/[^\d.]/g, '');

  // Ensure only one decimal point
  const parts = cleanValue.split('.');
  if (parts.length > 2) {
    return parts[0] + '.' + parts[1];
  }

  // Limit to 2 decimal places
  if (parts.length === 2) {
    return parts[0] + '.' + parts[1].slice(0, 2);
  }

  return cleanValue;
};

/**
 * Calculate total from array of items
 * @param {Array} items - Array of items with amount property
 * @returns {number} Total amount
 */
export const calculateTotal = (items = []) => {
  return items.reduce((sum, item) => {
    const amount = parseFloat(item.amount) || 0;
    const quantity = parseFloat(item.quantity) || 1;
    return sum + (amount * quantity);
  }, 0);
};

/**
 * Calculate tax amount based on base amount and tax rate
 * @param {number} amount - Base amount
 * @param {number} taxRate - Tax rate percentage
 * @returns {number} Tax amount
 */
export const calculateTax = (amount, taxRate = 0) => {
  return amount * (taxRate / 100);
};

/**
 * Round number to specified decimal places
 * @param {number} number - Number to round
 * @param {number} decimals - Number of decimal places
 * @returns {number} Rounded number
 */
export const roundToDecimals = (number, decimals = 2) => {
  const factor = Math.pow(10, decimals);
  return Math.round((number + Number.EPSILON) * factor) / factor;
};

export default {
  formatCurrency,
  parseCurrencyInput,
  calculateTotal,
  calculateTax,
  roundToDecimals
};
Create/modify the file at client/src/shared/utils/date.js:
javascriptimport { 
  format, 
  parseISO, 
  isValid, 
  differenceInDays,
  startOfDay,
  endOfDay,
  startOfWeek,
  endOfWeek,
  startOfMonth,
  endOfMonth,
  startOfYear,
  endOfYear,
  addDays,
  subDays,
  subMonths
} from 'date-fns';

/**
 * Format date with specified format string
 * @param {Date|string} date - Date to format
 * @param {string} formatStr - Format string
 * @returns {string} Formatted date string
 */
export const formatDate = (date, formatStr = 'MMM dd, yyyy') => {
  if (!date) return '';
  
  const parsedDate = typeof date === 'string' ? parseISO(date) : date;
  if (!isValid(parsedDate)) return '';
  
  return format(parsedDate, formatStr);
};

/**
 * Validate date
 * @param {Date|string} date - Date to validate
 * @returns {boolean} Whether date is valid
 */
export const isValidDate = (date) => {
  const parsedDate = new Date(date);
  return parsedDate instanceof Date && !isNaN(parsedDate);
};

/**
 * Get predefined date range options
 * @returns {Object} Date range options
 */
export const getDateRangeOptions = () => {
  const today = new Date();
  
  const thisMonth = {
    start: startOfMonth(today),
    end: endOfMonth(today)
  };

  const lastMonth = {
    start: startOfMonth(subMonths(today, 1)),
    end: endOfMonth(subMonths(today, 1))
  };

  const thisYear = {
    start: startOfYear(today),
    end: endOfYear(today)
  };

  return {
    today: {
      label: 'Today',
      start: startOfDay(today),
      end: endOfDay(today)
    },
    yesterday: {
      label: 'Yesterday',
      start: startOfDay(subDays(today, 1)),
      end: endOfDay(subDays(today, 1))
    },
    last7Days: {
      label: 'Last 7 days',
      start: startOfDay(subDays(today, 6)),
      end: endOfDay(today)
    },
    last30Days: {
      label: 'Last 30 days',
      start: startOfDay(subDays(today, 29)),
      end: endOfDay(today)
    },
    thisWeek: {
      label: 'This week',
      start: startOfWeek(today),
      end: endOfWeek(today)
    },
    thisMonth: {
      label: 'This month',
      ...thisMonth
    },
    lastMonth: {
      label: 'Last month',
      ...lastMonth
    },
    thisYear: {
      label: 'This year',
      ...thisYear
    }
  };
};

/**
 * Parse date string with fallback
 * @param {string} dateString - Date string to parse
 * @param {Date|null} fallback - Fallback value if parsing fails
 * @returns {Date|null} Parsed date or fallback
 */
export const parseDate = (dateString, fallback = null) => {
  if (!dateString) return fallback;
  
  const parsedDate = new Date(dateString);
  return isValid(parsedDate) ? parsedDate : fallback;
};

/**
 * Format date range
 * @param {Date|string} startDate - Start date
 * @param {Date|string} endDate - End date
 * @param {string} formatStr - Format string
 * @returns {string} Formatted date range string
 */
export const formatDateRange = (startDate, endDate, formatStr = 'MMM dd, yyyy') => {
  return `${formatDate(startDate, formatStr)} - ${formatDate(endDate, formatStr)}`;
};

export default {
  formatDate,
  isValidDate,
  getDateRangeOptions,
  parseDate,
  formatDateRange
};
Prompt 25: Create Receipts Page
Create the main page component for managing receipts.
Create/modify the file at client/src/features/receipts/pages/ReceiptsPage.js:
javascriptimport React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ReceiptList } from '../components/ReceiptList';
import { ReceiptFilters } from '../components/ReceiptFilters';
import { ReceiptUploader } from '../components/ReceiptUploader';
import { Modal } from '../../../shared/components/ui/Modal';
import { Button } from '../../../shared/components/forms/Button';
import { useReceipts } from '../hooks/useReceipts';
import { useToast } from '../../../shared/hooks/useToast';
import { Plus } from 'lucide-react';

const ReceiptsPage = () => {
  const navigate = useNavigate();
  const { receipts, loading, error, fetchReceipts } = useReceipts();
  const { showToast } = useToast();
  const [filters, setFilters] = useState({
    search: '',
    dateRange: '',
    category: '',
    sortBy: 'date_desc'
  });

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    fetchReceipts(newFilters);
  };

  const handleResetFilters = () => {
    setFilters({
      search: '',
      dateRange: '',
      category: '',
      sortBy: 'date_desc'
    });
    fetchReceipts();
  };

  const handleReceiptClick = (receipt) => {
    navigate(`/receipts/${receipt.id}`);
  };

  const handleUploadSuccess = () => {
    showToast('Receipt uploaded successfully', 'success');
    fetchReceipts(filters);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">Receipts</h1>
      </div>

      <ReceiptUploader onUploadSuccess={handleUploadSuccess} />

      <ReceiptFilters
        filters={filters}
        onChange={handleFilterChange}
        onReset={handleResetFilters}
      />

      <ReceiptList
        receipts={receipts}
        loading={loading}
        error={error}
        onReceiptClick={handleReceiptClick}
      />
    </div>
  );
};

export default ReceiptsPage;
Prompt 26: Create Receipt Filters Component
Create the component for filtering receipts by various criteria.
Create/modify the file at client/src/features/receipts/components/ReceiptFilters.js:
javascriptimport React from 'react';
import { Input } from '../../../shared/components/forms/Input';
import { Dropdown } from '../../../shared/components/forms/Dropdown';
import { Button } from '../../../shared/components/forms/Button';
import { useCategories } from '../../categories/hooks/useCategories';
import { Search, Filter, X } from 'lucide-react';

export const ReceiptFilters = ({ filters, onChange, onReset }) => {
  const { categories } = useCategories();

  const dateRanges = [
    { value: '7d', label: 'Last 7 days' },
    { value: '30d', label: 'Last 30 days' },
    { value: 'this_month', label: 'This month' },
    { value: 'last_month', label: 'Last month' },
    { value: 'custom', label: 'Custom range' }
  ];

  const sortOptions = [
    { value: 'date_desc', label: 'Date (Newest first)' },
    { value: 'date_asc', label: 'Date (Oldest first)' },
    { value: 'amount_desc', label: 'Amount (Highest first)' },
    { value: 'amount_asc', label: 'Amount (Lowest first)' }
  ];

  return (
    <div className="bg-white p-4 rounded-lg shadow-sm border">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Input
          placeholder="Search merchants..."
          icon={Search}
          value={filters.search}
          onChange={(e) => onChange({ ...filters, search: e.target.value })}
        />

        <Dropdown
          options={dateRanges}
          value={filters.dateRange}
          onChange={(value) => onChange({ ...filters, dateRange: value })}
          placeholder="Select date range"
        />

        <Dropdown
          options={categories.map(cat => ({
            value: cat.id,
            label: cat.name
          }))}
          value={filters.category}
          onChange={(value) => onChange({ ...filters, category: value })}
          placeholder="Select category"
        />

        <Dropdown
          options={sortOptions}
          value={filters.sortBy}
          onChange={(value) => onChange({ ...filters, sortBy: value })}
          placeholder="Sort by"
        />
      </div>

      {(filters.search || filters.dateRange || filters.category || filters.sortBy) && (
        <div className="mt-4 flex justify-end">
          <Button
            variant="secondary"
            size="sm"
            icon={X}
            onClick={onReset}
          >
            Clear Filters
          </Button>
        </div>
      )}
    </div>
  );
};

export default ReceiptFilters;
Prompt 27: Create Dashboard Page
Create the main dashboard page that shows summary information and recent receipts.
Create/modify the file at client/src/features/dashboard/pages/DashboardPage.js:
javascriptimport React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card } from '../../../shared/components/ui/Card';
import { ReceiptList } from '../../../features/receipts/components/ReceiptList';
import { Button } from '../../../shared/components/forms/Button';
import { useReceipts } from '../../../features/receipts/hooks/useReceipts';
import { SpendingChart } from '../../analytics/components/SpendingChart';
import { formatCurrency } from '../../../shared/utils/currency';
import { Loading } from '../../../shared/components/ui/Loading';
import { Alert } from '../../../shared/components/ui/Alert';
import { PieChart, CreditCard, ShoppingBag, Plus } from 'lucide-react';

const DashboardPage = () => {
  const navigate = useNavigate();
  const { receipts, loading: receiptsLoading, error: receiptsError } = useReceipts();
  const [recentReceipts, setRecentReceipts] = useState([]);
  const [stats, setStats] = useState({
    totalSpent: 0,
    receiptCount: 0,
    categoryCount: 0
  });

  useEffect(() => {
    if (receipts && receipts.length > 0) {
      // Get recent receipts (last 5)
      const sorted = [...receipts].sort((a, b) => 
        new Date(b.date) - new Date(a.date)
      );
      setRecentReceipts(sorted.slice(0, 5));
      
      // Calculate summary stats
      const total = receipts.reduce((sum, receipt) => sum + receipt.total, 0);
      
      // Get unique categories
      const categories = new Set(receipts.map(receipt => receipt.category).filter(Boolean));
      
      setStats({
        totalSpent: total,
        receiptCount: receipts.length,
        categoryCount: categories.size
      });
    }
  }, [receipts]);

  const handleReceiptClick = (receipt) => {
    navigate(`/receipts/${receipt.id}`);
  };

  const handleAddReceiptClick = () => {
    navigate('/receipts');
  };

  if (receiptsLoading) {
    return (
      <div className="flex justify-center items-center py-12">
        <Loading size="lg" />
      </div>
    );
  }

  if (receiptsError) {
    return (
      <Alert type="error" message={receiptsError} />
    );
  }

  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
      
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-primary-100 mr-4">
              <CreditCard className="h-6 w-6 text-primary-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500">Total Spent</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900">
                {formatCurrency(stats.totalSpent)}
              </p>
            </div>
          </div>
        </Card>
        
        <Card className="p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100 mr-4">
              <ShoppingBag className="h-6 w-6 text-green-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500">Total Receipts</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900">
                {stats.receiptCount}
              </p>
            </div>
          </div>
        </Card>
        
        <Card className="p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-purple-100 mr-4">
              <PieChart className="h-6 w-6 text-purple-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500">Categories</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900">
                {stats.categoryCount}
              </p>
            </div>
          </div>
        </Card>
      </div>
      
      {/* Spending Chart */}
      {receipts.length > 0 && (
        <Card className="p-6">
          <h2 className="text-lg font-semibold mb-4">Spending Overview</h2>
          <div className="h-64">
            <SpendingChart data={receipts} />
          </div>
        </Card>
      )}
      
      {/* Recent Receipts */}
      <div>
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-semibold">Recent Receipts</h2>
          <Button 
            variant="primary" 
            icon={Plus}
            onClick={handleAddReceiptClick}
          >
            Add Receipt
          </Button>
        </div>
        
        {recentReceipts.length > 0 ? (
          <ReceiptList
            receipts={recentReceipts}
            onReceiptClick={handleReceiptClick}
          />
        ) : (
          <Card className="p-8 text-center">
            <p className="text-gray-500 mb-4">No receipts found. Start by adding your first receipt.</p>
            <Button 
              variant="primary" 
              icon={Plus}
              onClick={handleAddReceiptClick}
            >
              Add Receipt
            </Button>
          </Card>
        )}
      </div>
    </div>
  );
};

export default DashboardPage;
Prompt 28: Create SpendingChart Component
Create a component for visualizing spending data.
Create/modify the file at client/src/features/analytics/components/SpendingChart.js:
javascriptimport React, { useMemo } from 'react';
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer 
} from 'recharts';
import { formatCurrency } from '../../../shared/utils/currency';
import { formatDate } from '../../../shared/utils/date';

export const SpendingChart = ({ data = [] }) => {
  const chartData = useMemo(() => {
    if (!data || data.length === 0) return [];

    // Group receipts by date and sum totals
    const dateMap = data.reduce((acc, receipt) => {
      const date = formatDate(receipt.date, 'MMM dd');
      if (!acc[date]) {
        acc[date] = { date, amount: 0 };
      }
      acc[date].amount += receipt.total;
      return acc;
    }, {});

    // Convert to array and sort by date
    return Object.values(dateMap).sort((a, b) => {
      return new Date(a.date) - new Date(b.date);
    });
  }, [data]);

  if (chartData.length === 0) {
    return <div className="h-full flex items-center justify-center text-gray-500">No data available</div>;
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
        <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
        <XAxis 
          dataKey="date" 
          stroke="#6B7280"
          fontSize={12}
        />
        <YAxis 
          stroke="#6B7280"
          fontSize={12}
          tickFormatter={(value) => formatCurrency(value)}
        />
        <Tooltip
          formatter={(value) => [formatCurrency(value), 'Amount']}
          labelStyle={{ color: '#111827' }}
          contentStyle={{
            backgroundColor: '#FFFFFF',
            border: '1px solid #E5E7EB',
            borderRadius: '0.375rem',
            padding: '0.5rem'
          }}
        />
        <Line
          type="monotone"
          dataKey="amount"
          stroke="#0EA5E9"
          strokeWidth={2}
          dot={{ fill: '#0EA5E9', r: 4 }}
          activeDot={{ r: 6 }}
        />
      </LineChart>
    </ResponsiveContainer>
  );
};

export default SpendingChart;
Prompt 29: Create App.js and Routes Configuration
Create the main App component and configure the application routes.
Create/modify the file at client/src/App.js:
javascriptimport React from 'react';
import { RouterProvider } from 'react-router-dom';
import { AuthProvider } from './core/contexts/AuthContext';
import { ToastProvider } from './core/contexts/ToastContext';
import { router } from './routes';
import './shared/styles/index.css';

const App = () => {
  return (
    <AuthProvider>
      <ToastProvider>
        <RouterProvider router={router} />
      </ToastProvider>
    </AuthProvider>
  );
};

export default App;
Create/modify the file at client/src/routes.js:
javascriptimport { createBrowserRouter } from 'react-router-dom';
import { Layout } from './shared/components/layout/Layout';
import DashboardPage from './features/dashboard/pages/DashboardPage';
import ReceiptsPage from './features/receipts/pages/ReceiptsPage';
import ReceiptDetailPage from './features/receipts/pages/ReceiptDetailPage';
import ReportsPage from './features/analytics/pages/ReportsPage';
import SettingsPage from './features/settings/pages/SettingsPage';
import LoginPage from './features/auth/components/LoginPage';
import RegisterPage from './features/auth/components/RegisterPage';
import ForgotPasswordPage from './features/auth/components/ForgotPasswordPage';
import NotFoundPage from './core/pages/NotFoundPage';
import AuthGuard from './features/auth/components/AuthGuard';

export const router = createBrowserRouter([
  {
    path: '/',
    element: (
      <AuthGuard>
        <Layout />
      </AuthGuard>
    ),
    errorElement: <NotFoundPage />,
    children: [
      { index: true, element: <DashboardPage /> },
      { path: 'receipts', element: <ReceiptsPage /> },
      { path: 'receipts/:id', element: <ReceiptDetailPage /> },
      { path: 'reports', element: <ReportsPage /> },
      { path: 'settings', element: <SettingsPage /> }
    ]
  },
  { path: '/login', element: <LoginPage /> },
  { path: '/register', element: <RegisterPage /> },
  { path: '/forgot-password', element: <ForgotPasswordPage /> }
]);

export default router;
Prompt 30: Create NotFoundPage Component
Create a 404 page component for handling unknown routes.
Create/modify the file at client/src/core/pages/NotFoundPage.js:
javascriptimport React from 'react';
import { Link } from 'react-router-dom';
import { Button } from '../../shared/components/forms/Button';
import { Home } from 'lucide-react';

export const NotFoundPage = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="text-center">
        <h1 className="text-6xl font-bold text-gray-900">404</h1>
        <p className="mt-2 text-lg text-gray-600">Page not found</p>
        <p className="mt-1 text-gray-500">
          The page you're looking for doesn't exist or has been moved.
        </p>
        <div className="mt-6">
          <Link to="/">
            <Button icon={Home}>
              Back to Home
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;
Prompt 31: Create Footer Component
Create a footer component for the application layout.
Create/modify the file at client/src/shared/components/layout/Footer.js:
javascriptimport React from 'react';

export const Footer = () => {
  return (
    <footer className="bg-white border-t">
      <div className="max-w-7xl mx-auto py-6 px-4">
        <div className="flex justify-between items-center">
          <p className="text-gray-500">
            © {new Date().getFullYear()} Receipt Scanner. All rights reserved.
          </p>
          <div className="flex space-x-6">
            <a href="#" className="text-gray-500 hover:text-gray-600">
              Privacy Policy
            </a>
            <a href="#" className="text-gray-500 hover:text-gray-600">
              Terms of Service
            </a>
            <a href="#" className="text-gray-500 hover:text-gray-600">
              Contact
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
Prompt 32: Create CSS Styles
Create base CSS styles for the application.
Create/modify the file at client/src/shared/styles/index.css:
css@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* Custom classes */
@layer components {
  /* Card Components */
  .card {
    @apply bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow duration-200;
  }

  /* Button Components */
  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
  }

  .btn-primary {
    @apply btn bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }

  .btn-secondary {
    @apply btn bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-primary-500;
  }

  .btn-danger {
    @apply btn bg-red-600 text-white hover:bg-red-700 focus:ring-red-500;
  }

  /* Form Components */
  .input {
    @apply w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-300 focus:border-primary-300 outline-none transition-all duration-200;
  }

  .input-error {
    @apply border-red-300 focus:ring-red-300 focus:border-red-300;
  }

  /* Layout Components */
  .layout-container {
    @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
  }
}

/* Global Styles */
@layer base {
  body {
    @apply bg-gray-50 text-gray-900 antialiased;
  }

  h1 {
    @apply text-3xl font-bold;
  }

  h2 {
    @apply text-2xl font-bold;
  }

  h3 {
    @apply text-xl font-bold;
  }

  a {
    @apply text-primary-600 hover:text-primary-700;
  }
}
Prompt 33: Create Settings Page
Create a page for managing user settings.
Create/modify the file at client/src/features/settings/pages/SettingsPage.js:
javascriptimport React from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { ProfileSettings } from '../components/ProfileSettings';
import { CategorySettings } from '../components/CategorySettings';
import { NotificationSettings } from '../components/NotificationSettings';
import { ExportSettings } from '../components/ExportSettings';

const SettingsPage = () => {
  return (
    <div className="space-y-6">
      <h1 className="text-2xl font-bold text-gray-900">Settings</h1>

      <div className="grid gap-6">
        <ProfileSettings />
        <CategorySettings />
        <NotificationSettings />
        <ExportSettings />
      </div>
    </div>
  );
};

export default SettingsPage;
Prompt 34: Create ProfileSettings Component
Create a component for users to edit their profile settings.
javascriptimport React, { useState, useEffect } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Input } from '../../../shared/components/forms/Input';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useAuth } from '../../auth/hooks/useAuth';
import { useToast } from '../../../shared/hooks/useToast';
import { User, Mail, Save } from 'lucide-react';

export const ProfileSettings = () => {
  const { user, updateProfile } = useAuth();
  const { showToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  
  const [formData, setFormData] = useState({
    displayName: '',
    email: '',
    photoURL: ''
  });
  
  useEffect(() => {
    if (user) {
      setFormData({
        displayName: user.displayName || '',
        email: user.email || '',
        photoURL: user.photoURL || ''
      });
    }
  }, [user]);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);
    
    try {
      await updateProfile({
        displayName: formData.displayName,
        photoURL: formData.photoURL
      });
      
      setSuccess(true);
      showToast('Profile updated successfully', 'success');
    } catch (err) {
      setError(err.message);
      showToast('Failed to update profile', 'error');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Profile Settings</h2>
      
      {error && (
        <Alert 
          type="error" 
          message={error} 
          className="mb-4" 
        />
      )}
      
      {success && (
        <Alert 
          type="success" 
          message="Profile updated successfully" 
          className="mb-4" 
        />
      )}
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <Input
          label="Display Name"
          icon={User}
          value={formData.displayName}
          onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}
        />
        
        <Input
          label="Email"
          icon={Mail}
          type="email"
          value={formData.email}
          disabled
          helperText="Email address cannot be changed"
        />
        
        <Input
          label="Profile Picture URL"
          value={formData.photoURL}
          onChange={(e) => setFormData({ ...formData, photoURL: e.target.value })}
          placeholder="https://example.com/profile-image.jpg"
        />
        
        <div className="flex justify-end">
          <Button
            type="submit"
            loading={loading}
            icon={Save}
          >
            Save Changes
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default ProfileSettings;
Prompt 35: Create CategorySettings Component
Create a component for users to manage receipt categories.
javascriptimport React, { useState } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Input } from '../../../shared/components/forms/Input';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useCategories } from '../../categories/hooks/useCategories';
import { useToast } from '../../../shared/hooks/useToast';
import { Tag, Plus, Trash, Edit, Save, X } from 'lucide-react';

export const CategorySettings = () => {
  const { categories, loading, error, addCategory, updateCategory, deleteCategory } = useCategories();
  const { showToast } = useToast();
  
  const [newCategory, setNewCategory] = useState({ name: '', color: '#3B82F6' });
  const [editingCategory, setEditingCategory] = useState(null);
  const [validationError, setValidationError] = useState(null);
  
  const handleAddSubmit = async (e) => {
    e.preventDefault();
    setValidationError(null);
    
    if (!newCategory.name.trim()) {
      setValidationError('Category name is required');
      return;
    }
    
    try {
      await addCategory(newCategory);
      setNewCategory({ name: '', color: '#3B82F6' });
      showToast('Category added successfully', 'success');
    } catch (err) {
      showToast(err.message, 'error');
    }
  };
  
  const handleEditSubmit = async (e) => {
    e.preventDefault();
    setValidationError(null);
    
    if (!editingCategory.name.trim()) {
      setValidationError('Category name is required');
      return;
    }
    
    try {
      await updateCategory(editingCategory.id, {
        name: editingCategory.name,
        color: editingCategory.color
      });
      
      setEditingCategory(null);
      showToast('Category updated successfully', 'success');
    } catch (err) {
      showToast(err.message, 'error');
    }
  };
  
  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      try {
        await deleteCategory(categoryId);
        showToast('Category deleted successfully', 'success');
      } catch (err) {
        showToast(err.message, 'error');
      }
    }
  };
  
  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Category Settings</h2>
      
      {error && (
        <Alert 
          type="error" 
          message={error} 
          className="mb-4" 
        />
      )}
      
      {validationError && (
        <Alert 
          type="error" 
          message={validationError} 
          className="mb-4" 
        />
      )}
      
      {/* Add New Category Form */}
      <form onSubmit={handleAddSubmit} className="mb-6">
        <div className="flex items-end gap-4">
          <div className="flex-1">
            <Input
              label="New Category Name"
              icon={Tag}
              value={newCategory.name}
              onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}
              placeholder="Enter category name"
            />
          </div>
          
          <div className="w-24">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Color
            </label>
            <input
              type="color"
              value={newCategory.color}
              onChange={(e) => setNewCategory({ ...newCategory, color: e.target.value })}
              className="w-full h-10 p-1 border border-gray-300 rounded-lg"
            />
          </div>
          
          <Button
            type="submit"
            loading={loading}
            icon={Plus}
          >
            Add
          </Button>
        </div>
      </form>
      
      {/* Categories List */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium">Your Categories</h3>
        
        {categories.length === 0 ? (
          <p className="text-gray-500">No custom categories yet. Add your first category above.</p>
        ) : (
          <div className="space-y-2">
            {categories.map((category) => (
              <div 
                key={category.id} 
                className="flex items-center justify-between p-3 border rounded-lg"
              >
                {editingCategory && editingCategory.id === category.id ? (
                  <form onSubmit={handleEditSubmit} className="flex w-full items-center gap-4">
                    <div className="flex-1">
                      <Input
                        value={editingCategory.name}
                        onChange={(e) => setEditingCategory({ 
                          ...editingCategory, 
                          name: e.target.value 
                        })}
                      />
                    </div>
                    
                    <div className="w-20">
                      <input
                        type="color"
                        value={editingCategory.color}
                        onChange={(e) => setEditingCategory({ 
                          ...editingCategory, 
                          color: e.target.value 
                        })}
                        className="w-full h-8 p-1 border border-gray-300 rounded-lg"
                      />
                    </div>
                    
                    <Button
                      type="submit"
                      variant="success"
                      size="sm"
                      icon={Save}
                    >
                      Save
                    </Button>
                    
                    <Button
                      type="button"
                      variant="secondary"
                      size="sm"
                      icon={X}
                      onClick={() => setEditingCategory(null)}
                    >
                      Cancel
                    </Button>
                  </form>
                ) : (
                  <>
                    <div className="flex items-center">
                      <div 
                        className="w-5 h-5 rounded-full mr-3" 
                        style={{ backgroundColor: category.color }}
                      />
                      <span>{category.name}</span>
                    </div>
                    
                    <div className="flex space-x-2">
                      <Button
                        variant="secondary"
                        size="sm"
                        icon={Edit}
                        onClick={() => setEditingCategory(category)}
                      >
                        Edit
                      </Button>
                      
                      <Button
                        variant="danger"
                        size="sm"
                        icon={Trash}
                        onClick={() => handleDelete(category.id)}
                      >
                        Delete
                      </Button>
                    </div>
                  </>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </Card>
  );
};

export default CategorySettings;
Prompt 36: Create NotificationSettings Component
Create a component for users to manage their notification preferences.
javascriptimport React, { useState, useEffect } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Button } from '../../../shared/components/forms/Button';
import { Switch } from '../../../shared/components/forms/Switch';
import { Alert } from '../../../shared/components/ui/Alert';
import { useAuth } from '../../auth/hooks/useAuth';
import { useToast } from '../../../shared/hooks/useToast';
import { Save, Bell } from 'lucide-react';

export const NotificationSettings = () => {
  const { user } = useAuth();
  const { showToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  
  const [preferences, setPreferences] = useState({
    emailNotifications: false,
    pushNotifications: false,
    receiptProcessed: true,
    monthlyReports: true,
    lowStockAlerts: true
  });
  
  useEffect(() => {
    const fetchNotificationPreferences = async () => {
      // In a real app, fetch user preferences from the backend
      // For this example, we'll use dummy data
      setPreferences({
        emailNotifications: true,
        pushNotifications: false,
        receiptProcessed: true,
        monthlyReports: true,
        lowStockAlerts: true
      });
    };
    
    if (user) {
      fetchNotificationPreferences();
    }
  }, [user]);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccess(false);
    
    try {
      // In a real app, save preferences to the backend
      // For now, we'll just simulate a delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setSuccess(true);
      showToast('Notification settings updated', 'success');
    } catch (err) {
      setError('Failed to update notification settings');
      showToast('Failed to update notification settings', 'error');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Notification Settings</h2>
      
      {error && (
        <Alert 
          type="error" 
          message={error} 
          className="mb-4" 
        />
      )}
      
      {success && (
        <Alert 
          type="success" 
          message="Notification settings updated successfully" 
          className="mb-4" 
        />
      )}
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-4">
          <h3 className="text-lg font-medium">Notification Channels</h3>
          
          <div className="space-y-3">
            <Switch
              label="Email Notifications"
              checked={preferences.emailNotifications}
              onChange={(checked) => setPreferences({ ...preferences, emailNotifications: checked })}
              description="Receive notifications via email"
            />
            
            <Switch
              label="Push Notifications"
              checked={preferences.pushNotifications}
              onChange={(checked) => setPreferences({ ...preferences, pushNotifications: checked })}
              description="Receive in-app notifications"
            />
          </div>
        </div>
        
        <div className="space-y-4">
          <h3 className="text-lg font-medium">Notification Types</h3>
          
          <div className="space-y-3">
            <Switch
              label="Receipt Processed"
              checked={preferences.receiptProcessed}
              onChange={(checked) => setPreferences({ ...preferences, receiptProcessed: checked })}
              description="Notify when a receipt has been processed"
            />
            
            <Switch
              label="Monthly Reports"
              checked={preferences.monthlyReports}
              onChange={(checked) => setPreferences({ ...preferences, monthlyReports: checked })}
              description="Receive monthly spending reports"
            />
            
            <Switch
              label="Low Stock Alerts"
              checked={preferences.lowStockAlerts}
              onChange={(checked) => setPreferences({ ...preferences, lowStockAlerts: checked })}
              description="Get alerted when inventory items are running low"
            />
          </div>
        </div>
        
        <div className="flex justify-end">
          <Button
            type="submit"
            loading={loading}
            icon={Save}
          >
            Save Preferences
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default NotificationSettings;
Prompt 37: Create Switch Component
Create a switch toggle component for notification settings.
javascriptimport React from 'react';

export const Switch = ({ 
  label, 
  description, 
  checked, 
  onChange, 
  disabled = false,
  className = ''
}) => {
  return (
    <div className={`flex items-start ${className}`}>
      <div className="flex items-center h-5">
        <button
          type="button"
          role="switch"
          aria-checked={checked}
          disabled={disabled}
          className={`
            relative inline-flex flex-shrink-0 h-6 w-11 rounded-full 
            ${disabled ? 'cursor-not-allowed opacity-60' : 'cursor-pointer'}
            transition-colors ease-in-out duration-200
            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500
            ${checked ? 'bg-primary-600' : 'bg-gray-200'}
          `}
          onClick={() => onChange(!checked)}
        >
          <span
            className={`
              pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow
              transform ring-0 transition ease-in-out duration-200
              ${checked ? 'translate-x-5' : 'translate-x-0'}
            `}
          />
        </button>
      </div>
      
      <div className="ml-3 text-sm">
        <label className="font-medium text-gray-700">{label}</label>
        {description && (
          <p className="text-gray-500">{description}</p>
        )}
      </div>
    </div>
  );
};

export default Switch;
Prompt 38: Create ExportSettings Component
Create a component for exporting receipt data.
javascriptimport React, { useState } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Button } from '../../../shared/components/forms/Button';
import { Dropdown } from '../../../shared/components/forms/Dropdown';
import { Alert } from '../../../shared/components/ui/Alert';
import { useToast } from '../../../shared/hooks/useToast';
import { FileDown, FileText, Download } from 'lucide-react';

export const ExportSettings = () => {
  const { showToast } = useToast();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const [exportOptions, setExportOptions] = useState({
    format: 'csv',
    dateRange: 'all',
    includeImages: false
  });
  
  const formats = [
    { value: 'csv', label: 'CSV' },
    { value: 'json', label: 'JSON' },
    { value: 'pdf', label: 'PDF' }
  ];
  
  const dateRanges = [
    { value: 'all', label: 'All Time' },
    { value: 'this_month', label: 'This Month' },
    { value: 'last_month', label: 'Last Month' },
    { value: 'this_year', label: 'This Year' },
    { value: 'custom', label: 'Custom Range' }
  ];
  
  const handleExport = async () => {
    setLoading(true);
    setError(null);
    
    try {
      // In a real app, call your export API here
      // For this example, we'll just simulate a delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      showToast(`Data exported as ${exportOptions.format.toUpperCase()} successfully`, 'success');
    } catch (err) {
      setError('Failed to export data. Please try again.');
      showToast('Export failed', 'error');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Data Export</h2>
      
      {error && (
        <Alert 
          type="error" 
          message={error} 
          className="mb-4" 
        />
      )}
      
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Dropdown
            label="Export Format"
            options={formats}
            value={exportOptions.format}
            onChange={(value) => setExportOptions({ ...exportOptions, format: value })}
          />
          
          <Dropdown
            label="Date Range"
            options={dateRanges}
            value={exportOptions.dateRange}
            onChange={(value) => setExportOptions({ ...exportOptions, dateRange: value })}
          />
          
          <div className="flex items-center mt-2">
            <input
              type="checkbox"
              id="includeImages"
              checked={exportOptions.includeImages}
              onChange={(e) => setExportOptions({ 
                ...exportOptions, 
                includeImages: e.target.checked 
              })}
              className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label htmlFor="includeImages" className="ml-2 text-sm text-gray-700">
              Include receipt images (where available)
            </label>
          </div>
        </div>
        
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm text-gray-500">
              Export your receipt data in your chosen format.
            </p>
          </div>
          
          <div className="flex space-x-2">
            <Button
              variant="secondary"
              icon={FileText}
              onClick={() => showToast('Template downloaded', 'success')}
            >
              Download Template
            </Button>
            
            <Button
              onClick={handleExport}
              loading={loading}
              icon={FileDown}
            >
              Export Data
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default ExportSettings;
Prompt 39: Create ReportsPage Component
Create a page for viewing analytics and reports.
javascriptimport React, { useState } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Button } from '../../../shared/components/forms/Button';
import { Dropdown } from '../../../shared/components/forms/Dropdown';
import { Alert } from '../../../shared/components/ui/Alert';
import { Loading } from '../../../shared/components/ui/Loading';
import { SpendingChart } from '../components/SpendingChart';
import { CategoryBreakdown } from '../components/CategoryBreakdown';
import { SpendingTrends } from '../components/SpendingTrends';
import { useReceipts } from '../../receipts/hooks/useReceipts';
import { ChevronDown, Calendar, Printer, Download } from 'lucide-react';
import { formatDate } from '../../../shared/utils/date';

const ReportsPage = () => {
  const { receipts, loading, error } = useReceipts();
  const [timeframe, setTimeframe] = useState('month');
  
  const timeframeOptions = [
    { value: 'week', label: 'Last 7 Days' },
    { value: 'month', label: 'Last 30 Days' },
    { value: 'quarter', label: 'Last 3 Months' },
    { value: 'year', label: 'Last 12 Months' }
  ];
  
  const handlePrint = () => {
    window.print();
  };
  
  const handleExport = () => {
    // In a real app, this would generate and download a report
    alert('Export functionality would go here');
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center py-12">
        <Loading size="lg" />
      </div>
    );
  }
  
  if (error) {
    return <Alert type="error" message={error} />;
  }
  
  const today = new Date();
  const startDate = new Date(today);
  
  switch (timeframe) {
    case 'week':
      startDate.setDate(today.getDate() - 7);
      break;
    case 'month':
      startDate.setDate(today.getDate() - 30);
      break;
    case 'quarter':
      startDate.setDate(today.getDate() - 90);
      break;
    case 'year':
      startDate.setDate(today.getDate() - 365);
      break;
    default:
      startDate.setDate(today.getDate() - 30);
  }
  
  const filteredReceipts = receipts.filter(receipt => {
    const receiptDate = new Date(receipt.date);
    return receiptDate >= startDate && receiptDate <= today;
  });
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">Reports & Analytics</h1>
        
        <div className="flex space-x-2">
          <Dropdown
            options={timeframeOptions}
            value={timeframe}
            onChange={setTimeframe}
          />
          
          <Button
            variant="secondary"
            icon={Printer}
            onClick={handlePrint}
          >
            Print
          </Button>
          
          <Button
            variant="secondary"
            icon={Download}
            onClick={handleExport}
          >
            Export
          </Button>
        </div>
      </div>
      
      <Card className="p-6">
        <div className="mb-4">
          <h2 className="text-lg font-semibold">Spending Overview</h2>
          <p className="text-sm text-gray-500">
            {formatDate(startDate)} - {formatDate(today)}
          </p>
        </div>
        
        <div className="h-80">
          <SpendingChart data={filteredReceipts} />
        </div>
      </Card>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="p-6">
          <h2 className="text-lg font-semibold mb-4">Spending by Category</h2>
          <div className="h-80">
            <CategoryBreakdown data={filteredReceipts} />
          </div>
        </Card>
        
        <Card className="p-6">
          <h2 className="text-lg font-semibold mb-4">Spending Trends</h2>
          <div className="h-80">
            <SpendingTrends data={filteredReceipts} timeframe={timeframe} />
          </div>
        </Card>
      </div>
    </div>
  );
};

export default ReportsPage;
Prompt 40: Create CategoryBreakdown Component
Create a component for visualizing spending by category.
javascriptimport React, { useMemo } from 'react';
import { 
  PieChart, 
  Pie, 
  Cell, 
  Legend, 
  Tooltip, 
  ResponsiveContainer 
} from 'recharts';
import { formatCurrency } from '../../../shared/utils/currency';

export const CategoryBreakdown = ({ data = [] }) => {
  const chartData = useMemo(() => {
    if (!data || data.length === 0) return [];

    // Group receipts by category and sum totals
    const categories = data.reduce((acc, receipt) => {
      const category = receipt.category || 'Uncategorized';
      
      if (!acc[category]) {
        acc[category] = { 
          name: category, 
          value: 0,
          color: getCategoryColor(category)
        };
      }
      
      acc[category].value += receipt.total;
      return acc;
    }, {});

    // Convert to array and sort by amount
    return Object.values(categories).sort((a, b) => b.value - a.value);
  }, [data]);

  // Helper to get a consistent color for each category
  function getCategoryColor(category) {
    const colors = {
      'Groceries': '#22C55E',
      'Dining': '#F59E0B',
      'Transportation': '#3B82F6',
      'Utilities': '#8B5CF6',
      'Entertainment': '#EC4899',
      'Shopping': '#06B6D4',
      'Health': '#EF4444',
      'Uncategorized': '#6B7280'
      // Add more colors as needed
    };
    
    return colors[category] || '#6B7280';
  }

  if (chartData.length === 0) {
    return (
      <div className="h-full flex items-center justify-center text-gray-500">
        No data available
      </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <PieChart>
        <Pie
          data={chartData}
          cx="50%"
          cy="50%"
          labelLine={false}
          outerRadius={80}
          fill="#8884d8"
          dataKey="value"
          label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
        >
          {chartData.map((entry, index) => (
            <Cell key={`cell-${index}`} fill={entry.color} />
          ))}
        </Pie>
        <Tooltip
          formatter={(value) => [formatCurrency(value), 'Amount']}
          labelStyle={{ color: '#111827' }}
          contentStyle={{
            backgroundColor: '#FFFFFF',
            border: '1px solid #E5E7EB',
            borderRadius: '0.375rem',
            padding: '0.5rem'
          }}
        />
        <Legend />
      </PieChart>
    </ResponsiveContainer>
  );
};

export default CategoryBreakdown;
Prompt 41: Create SpendingTrends Component
Create a component for analyzing spending trends over time.
javascriptimport React, { useMemo } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer
} from 'recharts';
import { formatCurrency } from '../../../shared/utils/currency';
import { format, parseISO, subMonths, subDays, startOfMonth, endOfMonth } from 'date-fns';

export const SpendingTrends = ({ data = [], timeframe = 'month' }) => {
  const chartData = useMemo(() => {
    if (!data || data.length === 0) return [];

    const today = new Date();
    let groupedData = [];
    
    switch (timeframe) {
      case 'week':
        // Last 7 days by day
        for (let i = 6; i >= 0; i--) {
          const date = subDays(today, i);
          const dateString = format(date, 'MMM dd');
          const dayTotal = data
            .filter(receipt => {
              const receiptDate = parseISO(receipt.date);
              return format(receiptDate, 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd');
            })
            .reduce((sum, receipt) => sum + receipt.total, 0);
            
          groupedData.push({
            date: dateString,
            amount: dayTotal
          });
        }
        break;
        
      case 'month':
        // Last 4 weeks by week
        for (let i = 3; i >= 0; i--) {
          const weekStart = subDays(today, i * 7 + 6);
          const weekEnd = subDays(today, i * 7);
          
          const weekTotal = data
            .filter(receipt => {
              const receiptDate = parseISO(receipt.date);
              return receiptDate >= weekStart && receiptDate <= weekEnd;
            })
            .reduce((sum, receipt) =>
  const receiptDate = parseISO(receipt.date);
              return receiptDate >= weekStart && receiptDate <= weekEnd;
            })
            .reduce((sum, receipt) => sum + receipt.total, 0);
            
          groupedData.push({
            date: `Week ${4-i}`,
            amount: weekTotal
          });
        }
        break;
        
      case 'quarter':
        // Last 3 months by month
        for (let i = 2; i >= 0; i--) {
          const month = subMonths(today, i);
          const monthStart = startOfMonth(month);
          const monthEnd = endOfMonth(month);
          
          const monthTotal = data
            .filter(receipt => {
              const receiptDate = parseISO(receipt.date);
              return receiptDate >= monthStart && receiptDate <= monthEnd;
            })
            .reduce((sum, receipt) => sum + receipt.total, 0);
            
          groupedData.push({
            date: format(month, 'MMM yyyy'),
            amount: monthTotal
          });
        }
        break;
        
      case 'year':
        // Last 12 months by month
        for (let i = 11; i >= 0; i--) {
          const month = subMonths(today, i);
          const monthStart = startOfMonth(month);
          const monthEnd = endOfMonth(month);
          
          const monthTotal = data
            .filter(receipt => {
              const receiptDate = parseISO(receipt.date);
              return receiptDate >= monthStart && receiptDate <= monthEnd;
            })
            .reduce((sum, receipt) => sum + receipt.total, 0);
            
          groupedData.push({
            date: format(month, 'MMM'),
            amount: monthTotal
          });
        }
        break;
        
      default:
        // Default to monthly
        for (let i = 11; i >= 0; i--) {
          const month = subMonths(today, i);
          const monthStart = startOfMonth(month);
          const monthEnd = endOfMonth(month);
          
          const monthTotal = data
            .filter(receipt => {
              const receiptDate = parseISO(receipt.date);
              return receiptDate >= monthStart && receiptDate <= monthEnd;
            })
            .reduce((sum, receipt) => sum + receipt.total, 0);
            
          groupedData.push({
            date: format(month, 'MMM'),
            amount: monthTotal
          });
        }
    }
    
    return groupedData;
  }, [data, timeframe]);

  if (chartData.length === 0) {
    return (
      <div className="h-full flex items-center justify-center text-gray-500">
        No data available
      </div>
    );
  }

  return (
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
        <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
        <XAxis 
          dataKey="date" 
          stroke="#6B7280"
          fontSize={12}
        />
        <YAxis 
          stroke="#6B7280"
          fontSize={12}
          tickFormatter={(value) => formatCurrency(value)}
        />
        <Tooltip
          formatter={(value) => [formatCurrency(value), 'Amount']}
          labelStyle={{ color: '#111827' }}
          contentStyle={{
            backgroundColor: '#FFFFFF',
            border: '1px solid #E5E7EB',
            borderRadius: '0.375rem',
            padding: '0.5rem'
          }}
        />
        <Bar 
          dataKey="amount" 
          fill="#8884d8" 
          radius={[4, 4, 0, 0]}
        />
      </BarChart>
    </ResponsiveContainer>
  );
};

export default SpendingTrends;
Prompt 42: Create Document Scanning Components
Create components for handling document scanning and upload.
javascriptimport React, { useState, useRef, useEffect } from 'react';
import { Card } from '../../../shared/components/ui/Card';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useToast } from '../../../shared/hooks/useToast';
import { useReceipts } from '../../receipts/hooks/useReceipts';
import { Camera, Image, RotateCw, Upload, X } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

export const DocumentScanner = () => {
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const [stream, setStream] = useState(null);
  const [isCameraActive, setIsCameraActive] = useState(false);
  const [capturedImage, setCapturedImage] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);
  const { addReceipt } = useReceipts();
  const { showToast } = useToast();
  const navigate = useNavigate();

  // Initialize camera
  const initializeCamera = async () => {
    try {
      setError(null);
      
      const constraints = {
        video: {
          facingMode: 'environment', // prefer rear camera
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        }
      };
      
      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);
      setStream(mediaStream);
      
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream;
        setIsCameraActive(true);
      }
    } catch (err) {
      setError('Failed to access camera. Please check permissions.');
      console.error('Camera error:', err);
    }
  };

  // Stop camera stream
  const stopCamera = () => {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
      setStream(null);
      setIsCameraActive(false);
    }
  };

  // Clean up on unmount
  useEffect(() => {
    return () => {
      stopCamera();
    };
  }, []);

  // Capture image from camera
  const captureImage = () => {
    if (!videoRef.current || !canvasRef.current) return;
    
    const video = videoRef.current;
    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');
    
    // Set canvas dimensions to match video
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    // Draw video frame to canvas
    context.drawImage(video, 0, 0, canvas.width, canvas.height);
    
    // Get image data URL
    const imageDataUrl = canvas.toDataURL('image/jpeg');
    setCapturedImage(imageDataUrl);
    
    // Stop camera after capture
    stopCamera();
  };

  // Convert data URL to Blob
  const dataURLtoBlob = (dataURL) => {
    const parts = dataURL.split(';base64,');
    const contentType = parts[0].split(':')[1];
    const raw = window.atob(parts[1]);
    const rawLength = raw.length;
    const uInt8Array = new Uint8Array(rawLength);
    
    for (let i = 0; i < rawLength; ++i) {
      uInt8Array[i] = raw.charCodeAt(i);
    }
    
    return new Blob([uInt8Array], { type: contentType });
  };

  // Process the captured image
  const processImage = async () => {
    try {
      setIsProcessing(true);
      setError(null);
      
      // Convert image to file
      const imageBlob = dataURLtoBlob(capturedImage);
      const filename = `receipt_${Date.now()}.jpg`;
      const file = new File([imageBlob], filename, { type: 'image/jpeg' });
      
      // Create basic receipt data
      const receiptData = {
        date: new Date().toISOString().split('T')[0],
        total: 0, // Will be updated by OCR
        merchant: 'Unknown', // Will be updated by OCR
        category: ''
      };
      
      // Upload and process the receipt
      const result = await addReceipt(receiptData, file);
      
      showToast('Receipt uploaded successfully', 'success');
      
      // Navigate to the receipt detail page
      navigate(`/receipts/${result.id}`);
    } catch (err) {
      setError(err.message || 'Failed to process receipt');
      showToast(err.message || 'Failed to process receipt', 'error');
    } finally {
      setIsProcessing(false);
    }
  };

  // Reset the scanner
  const resetScanner = () => {
    setCapturedImage(null);
    setError(null);
    initializeCamera();
  };

  return (
    <Card className="p-6">
      <h2 className="text-xl font-semibold mb-4">Receipt Scanner</h2>
      
      {error && (
        <Alert 
          type="error" 
          message={error} 
          className="mb-4" 
        />
      )}
      
      <div className="space-y-4">
        {/* Hidden canvas for image processing */}
        <canvas ref={canvasRef} className="hidden" />
        
        {!isCameraActive && !capturedImage && (
          <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8">
            <Camera className="w-12 h-12 text-gray-400 mb-4" />
            <p className="text-gray-600 mb-4">
              Use your camera to scan a receipt
            </p>
            <Button
              onClick={initializeCamera}
              icon={Camera}
            >
              Start Camera
            </Button>
          </div>
        )}
        
        {isCameraActive && (
          <div className="relative">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              className="w-full h-auto rounded-lg"
            />
            
            <div className="absolute bottom-4 left-0 right-0 flex justify-center space-x-4">
              <Button
                onClick={() => stopCamera()}
                variant="secondary"
                icon={X}
              >
                Cancel
              </Button>
              
              <Button
                onClick={captureImage}
                icon={Camera}
              >
                Capture
              </Button>
            </div>
          </div>
        )}
        
        {capturedImage && (
          <div className="relative">
            <img
              src={capturedImage}
              alt="Captured receipt"
              className="w-full h-auto rounded-lg"
            />
            
            <div className="mt-4 flex justify-center space-x-4">
              <Button
                onClick={resetScanner}
                variant="secondary"
                icon={RotateCw}
              >
                Retake
              </Button>
              
              <Button
                onClick={processImage}
                loading={isProcessing}
                icon={Upload}
              >
                Process Receipt
              </Button>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

export default DocumentScanner;
Prompt 43: Create ScanPage Component
Create a dedicated page for document scanning.
javascriptimport React from 'react';
import { DocumentScanner } from '../components/DocumentScanner';
import { PageHeader } from '../../../shared/components/layout/PageHeader';
import { ReceiptUploader } from '../../receipts/components/ReceiptUploader';
import { useNavigate } from 'react-router-dom';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../../shared/components/ui/Tabs';

const ScanPage = () => {
  const navigate = useNavigate();
  
  const handleReceiptProcessed = (receiptId) => {
    navigate(`/receipts/${receiptId}`);
  };
  
  return (
    <div className="space-y-6">
      <PageHeader 
        title="Scan Document" 
        subtitle="Scan a receipt or document using your camera or upload a file"
      />
      
      <Tabs defaultValue="camera">
        <TabsList className="mb-4">
          <TabsTrigger value="camera">Camera</TabsTrigger>
          <TabsTrigger value="upload">File Upload</TabsTrigger>
        </TabsList>
        
        <TabsContent value="camera">
          <DocumentScanner onSuccess={handleReceiptProcessed} />
        </TabsContent>
        
        <TabsContent value="upload">
          <ReceiptUploader onSuccess={handleReceiptProcessed} />
        </TabsContent>
      </Tabs>
      
      <div className="bg-white p-4 rounded-lg shadow-sm border mt-6">
        <h3 className="text-lg font-medium mb-2">Tips for better scanning</h3>
        <ul className="list-disc list-inside space-y-2 text-gray-600">
          <li>Ensure good lighting for clear images</li>
          <li>Place receipt on a contrasting background</li>
          <li>Flatten wrinkled receipts for better results</li>
          <li>Make sure the entire receipt is visible in the frame</li>
          <li>Hold the camera steady to avoid blur</li>
        </ul>
      </div>
    </div>
  );
};

export default ScanPage;
Prompt 44: Create Tabs Component
Create a tabs component for the scan page.
javascriptimport React from 'react';

export const TabsList = ({ children, className = '' }) => {
  return (
    <div className={`flex border-b border-gray-200 ${className}`}>
      {children}
    </div>
  );
};

export const TabsTrigger = ({ children, value, active, onClick }) => {
  return (
    <button
      className={`
        px-4 py-2 text-sm font-medium 
        ${active 
          ? 'text-primary-600 border-b-2 border-primary-600' 
          : 'text-gray-500 hover:text-gray-700 hover:border-gray-300'}
      `}
      onClick={() => onClick(value)}
    >
      {children}
    </button>
  );
};

export const TabsContent = ({ children, value, activeValue }) => {
  if (value !== activeValue) return null;
  return <div>{children}</div>;
};

export const Tabs = ({ children, defaultValue, className = '' }) => {
  const [activeTab, setActiveTab] = React.useState(defaultValue);
  
  // Clone and modify the children to pass the active state
  const modifiedChildren = React.Children.map(children, child => {
    if (child.type === TabsList) {
      // For TabsList, modify its TabsTrigger children
      const modifiedTabsList = React.cloneElement(
        child,
        {},
        React.Children.map(child.props.children, trigger => {
          if (trigger.type === TabsTrigger) {
            return React.cloneElement(trigger, {
              active: trigger.props.value === activeTab,
              onClick: (value) => setActiveTab(value)
            });
          }
          return trigger;
        })
      );
      return modifiedTabsList;
    }
    
    if (child.type === TabsContent) {
      // Pass the active tab to TabsContent
      return React.cloneElement(child, {
        activeValue: activeTab
      });
    }
    
    return child;
  });
  
  return (
    <div className={className}>
      {modifiedChildren}
    </div>
  );
};

export default Tabs;
Prompt 45: Update Routes Configuration
Update the routes configuration to include the scan page.
javascriptimport { createBrowserRouter } from 'react-router-dom';
import { Layout } from './shared/components/layout/Layout';
import DashboardPage from './features/dashboard/pages/DashboardPage';
import ReceiptsPage from './features/receipts/pages/ReceiptsPage';
import ReceiptDetailPage from './features/receipts/pages/ReceiptDetailPage';
import ScanPage from './features/documents/pages/ScanPage';
import ReportsPage from './features/analytics/pages/ReportsPage';
import SettingsPage from './features/settings/pages/SettingsPage';
import LoginPage from './features/auth/components/LoginPage';
import RegisterPage from './features/auth/components/RegisterPage';
import ForgotPasswordPage from './features/auth/components/ForgotPasswordPage';
import NotFoundPage from './core/pages/NotFoundPage';
import AuthGuard from './features/auth/components/AuthGuard';

export const router = createBrowserRouter([
  {
    path: '/',
    element: (
      <AuthGuard>
        <Layout />
      </AuthGuard>
    ),
    errorElement: <NotFoundPage />,
    children: [
      { index: true, element: <DashboardPage /> },
      { path: 'receipts', element: <ReceiptsPage /> },
      { path: 'receipts/:id', element: <ReceiptDetailPage /> },
      { path: 'scan', element: <ScanPage /> },
      { path: 'reports', element: <ReportsPage /> },
      { path: 'settings', element: <SettingsPage /> }
    ]
  },
  { path: '/login', element: <LoginPage /> },
  { path: '/register', element: <RegisterPage /> },
  { path: '/forgot-password', element: <ForgotPasswordPage /> }
]);

export default router;
Prompt 46: Create ForgotPasswordPage Component
Create a page for password reset functionality.
javascriptimport React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Input } from '../../../shared/components/forms/Input';
import { Button } from '../../../shared/components/forms/Button';
import { Alert } from '../../../shared/components/ui/Alert';
import { useAuth } from '../hooks/useAuth';
import { Mail } from 'lucide-react';

export const ForgotPasswordPage = () => {
  const { resetPassword } = useAuth();
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess(false);

    if (!email.trim()) {
      setError('Email is required');
      return;
    }

    setLoading(true);
    try {
      await resetPassword(email);
      setSuccess(true);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-bold text-gray-900">
            Reset your password
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Enter your email address and we'll send you a link to reset your password.
          </p>
        </div>

        {error && (
          <Alert type="error" message={error} />
        )}

        {success && (
          <Alert 
            type="success" 
            message="Check your email for a password reset link" 
          />
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div>
            <Input
              type="email"
              label="Email address"
              icon={Mail}
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>

          <Button
            type="submit"
            fullWidth
            loading={loading}
          >
            Send Reset Link
          </Button>

          <div className="text-center">
            <Link
              to="/login"
              className="font-medium text-primary-600 hover:text-primary-500"
            >
              Back to login
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ForgotPasswordPage;
Prompt 47: Update Sidebar Component
Update the sidebar component to include the scan page link.
javascriptimport React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { 
  Home, 
  Receipt, 
  PieChart, 
  Settings,
  Camera,
  Upload
} from 'lucide-react';

export const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: '/', label: 'Dashboard', icon: Home },
    { path: '/receipts', label: 'Receipts', icon: Receipt },
    { path: '/scan', label: 'Scan', icon: Camera },
    { path: '/reports', label: 'Reports', icon: PieChart },
    { path: '/settings', label: 'Settings', icon: Settings },
  ];

  return (
    <div className="w-64 bg-white border-r h-full overflow-y-auto">
      <div className="p-4">
        {menuItems.map((item) => {
          const Icon = item.icon;
          const isActive = location.pathname === item.path;
          
          return (
            <Link
              key={item.path}
              to={item.path}
              className={`
                flex items-center space-x-2 p-2 rounded-lg mb-1
                ${isActive 
                  ? 'bg-primary-50 text-primary-600' 
                  : 'text-gray-600 hover:bg-gray-50'}
              `}
            >
              <Icon className="h-5 w-5" />
              <span>{item.label}</span>
            </Link>
          );
        })}
      </div>
    </div>
  );
};

export default Sidebar;
Prompt 48: Create Complete Firestore Security Rules
Create comprehensive security rules for Firestore collections based on the security analysis.
javascriptrules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    function isValidReceipt(data) {
      return data.userId is string
          && data.merchant is string
          && data.date is string
          && data.total is number && data.total >= 0;
    }
    
    function isValidCategory(data) {
      return data.userId is string
          && data.name is string && data.name.size() > 0
          && data.color is string;
    }
    
    function isValidProduct(data) {
      return data.userId is string
          && data.name is string && data.name.size() > 0
          && data.price is number && data.price >= 0;
    }
    
    function isValidInventory(data) {
      return data.userId is string
          && data.productId is string
          && data.quantity is number && data.quantity >= 0;
    }
    
    // User data
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Prevent deletion
    }
    
    // Receipts
    match /receipts/{receiptId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
                     && isValidReceipt(request.resource.data);
      allow update: if isOwner(resource);
      allow delete: if isOwner(resource);
    }
    
    // Categories
    match /categories/{categoryId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
                     && isValidCategory(request.resource.data);
      allow update: if isOwner(resource);
      allow delete: if isOwner(resource);
    }
    
    // Products
    match /products/{productId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
                     && isValidProduct(request.resource.data);
      allow update: if isOwner(resource);
      allow delete: if isOwner(resource);
    }
    
    // Inventory
    match /inventory/{inventoryId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
                     && isValidInventory(request.resource.data);
      allow update: if isOwner(resource);
      allow delete: if isOwner(resource);
    }
    
    // Stock Movements
    match /stockMovements/{movementId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if false; // Stock movements should be immutable
      allow delete: if false; // Prevent deletion for audit purposes
    }
    
    // Alerts
    match /alerts/{alertId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource) && request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['status', 'resolvedAt', 'resolvedBy']);
      allow delete: if false; // Prevent deletion for record keeping
    }
    
    // Vendors
    match /vendors/{vendorId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource);
      allow delete: if isOwner(resource);
    }
    
    // Documents
    match /documents/{documentId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource);
      allow delete: if isOwner(resource);
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isOwner(resource);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource) && request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['read', 'readAt']);
      allow delete: if isOwner(resource);
    }
    
    // Notification Preferences
    match /notificationPreferences/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // Prevent deletion
    }
  }
}
Prompt 49: Create Complete Storage Security Rules
Create comprehensive security rules for Firebase Storage based on the security analysis.
javascriptrules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isDocumentFile() {
      return request.resource.contentType.matches('image/.*') || 
             request.resource.contentType.matches('application/pdf');
    }
    
    function isFileSizeUnder(size) {
      return request.resource.size < size;
    }
    
    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // Receipt images
    match /receipts/{userId}/{fileName} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId
                   && isImageFile()
                   && isFileSizeUnder(10 * 1024 * 1024); // 10MB limit
    }
    
    // Profile images
    match /profiles/{userId}/{fileName} {
      allow read: if true; // Profile images can be publicly readable
      allow write: if isAuthenticated() && request.auth.uid == userId
                   && isImageFile()
                   && isFileSizeUnder(5 * 1024 * 1024); // 5MB limit
    }
    
    // Document scans
    match /documents/{userId}/{fileName} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId
                   && isDocumentFile()
                   && isFileSizeUnder(20 * 1024 * 1024); // 20MB limit
    }
    
    // Export files
    match /exports/{userId}/{fileName} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // Only created by server
    }
  }
}
Prompt 50: Create index.js Entry Point
Create the main entry point for the React application.
javascriptimport React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './shared/styles/index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

